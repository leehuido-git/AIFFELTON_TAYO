
self_d_test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000072e  00800200  00004564  000045f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004564  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004aa  0080092e  0080092e  00004d26  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004d26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00004dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b8f  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001848  00000000  00000000  00009bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002314  00000000  00000000  0000b43b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af0  00000000  00000000  0000d750  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001076  00000000  00000000  0000e240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004d61  00000000  00000000  0000f2b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  00014017  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c2       	rjmp	.+1062   	; 0x428 <__ctors_end>
       2:	00 00       	nop
       4:	31 c2       	rjmp	.+1122   	; 0x468 <__bad_interrupt>
       6:	00 00       	nop
       8:	2f c2       	rjmp	.+1118   	; 0x468 <__bad_interrupt>
       a:	00 00       	nop
       c:	2d c2       	rjmp	.+1114   	; 0x468 <__bad_interrupt>
       e:	00 00       	nop
      10:	2b c2       	rjmp	.+1110   	; 0x468 <__bad_interrupt>
      12:	00 00       	nop
      14:	29 c2       	rjmp	.+1106   	; 0x468 <__bad_interrupt>
      16:	00 00       	nop
      18:	27 c2       	rjmp	.+1102   	; 0x468 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	25 c2       	rjmp	.+1098   	; 0x468 <__bad_interrupt>
      1e:	00 00       	nop
      20:	23 c2       	rjmp	.+1094   	; 0x468 <__bad_interrupt>
      22:	00 00       	nop
      24:	21 c2       	rjmp	.+1090   	; 0x468 <__bad_interrupt>
      26:	00 00       	nop
      28:	1f c2       	rjmp	.+1086   	; 0x468 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	1d c2       	rjmp	.+1082   	; 0x468 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1b c2       	rjmp	.+1078   	; 0x468 <__bad_interrupt>
      32:	00 00       	nop
      34:	19 c2       	rjmp	.+1074   	; 0x468 <__bad_interrupt>
      36:	00 00       	nop
      38:	17 c2       	rjmp	.+1070   	; 0x468 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	15 c2       	rjmp	.+1066   	; 0x468 <__bad_interrupt>
      3e:	00 00       	nop
      40:	13 c2       	rjmp	.+1062   	; 0x468 <__bad_interrupt>
      42:	00 00       	nop
      44:	11 c2       	rjmp	.+1058   	; 0x468 <__bad_interrupt>
      46:	00 00       	nop
      48:	0f c2       	rjmp	.+1054   	; 0x468 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0d c2       	rjmp	.+1050   	; 0x468 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0b c2       	rjmp	.+1046   	; 0x468 <__bad_interrupt>
      52:	00 00       	nop
      54:	09 c2       	rjmp	.+1042   	; 0x468 <__bad_interrupt>
      56:	00 00       	nop
      58:	07 c2       	rjmp	.+1038   	; 0x468 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__vector_23>
      60:	03 c2       	rjmp	.+1030   	; 0x468 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 69 15 	jmp	0x2ad2	; 0x2ad2 <__vector_25>
      68:	ff c1       	rjmp	.+1022   	; 0x468 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fd c1       	rjmp	.+1018   	; 0x468 <__bad_interrupt>
      6e:	00 00       	nop
      70:	fb c1       	rjmp	.+1014   	; 0x468 <__bad_interrupt>
      72:	00 00       	nop
      74:	f9 c1       	rjmp	.+1010   	; 0x468 <__bad_interrupt>
      76:	00 00       	nop
      78:	f7 c1       	rjmp	.+1006   	; 0x468 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f5 c1       	rjmp	.+1002   	; 0x468 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f3 c1       	rjmp	.+998    	; 0x468 <__bad_interrupt>
      82:	00 00       	nop
      84:	f1 c1       	rjmp	.+994    	; 0x468 <__bad_interrupt>
      86:	00 00       	nop
      88:	ef c1       	rjmp	.+990    	; 0x468 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ed c1       	rjmp	.+986    	; 0x468 <__bad_interrupt>
      8e:	00 00       	nop
      90:	eb c1       	rjmp	.+982    	; 0x468 <__bad_interrupt>
      92:	00 00       	nop
      94:	e9 c1       	rjmp	.+978    	; 0x468 <__bad_interrupt>
      96:	00 00       	nop
      98:	e7 c1       	rjmp	.+974    	; 0x468 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__vector_39>
      a0:	e3 c1       	rjmp	.+966    	; 0x468 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e1 c1       	rjmp	.+962    	; 0x468 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	df c1       	rjmp	.+958    	; 0x468 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	dd c1       	rjmp	.+954    	; 0x468 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	db c1       	rjmp	.+950    	; 0x468 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d9 c1       	rjmp	.+946    	; 0x468 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d7 c1       	rjmp	.+942    	; 0x468 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d5 c1       	rjmp	.+938    	; 0x468 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d3 c1       	rjmp	.+934    	; 0x468 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d1 c1       	rjmp	.+930    	; 0x468 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	cf c1       	rjmp	.+926    	; 0x468 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ce c1       	rjmp	.+924    	; 0x46a <__vector_51>
      ce:	00 00       	nop
      d0:	cb c1       	rjmp	.+918    	; 0x468 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c9 c1       	rjmp	.+914    	; 0x468 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c7 c1       	rjmp	.+910    	; 0x468 <__bad_interrupt>
      da:	00 00       	nop
      dc:	c5 c1       	rjmp	.+906    	; 0x468 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c3 c1       	rjmp	.+902    	; 0x468 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	44 15       	cp	r20, r4
      e6:	47 15       	cp	r20, r7
      e8:	47 15       	cp	r20, r7
      ea:	47 15       	cp	r20, r7
      ec:	47 15       	cp	r20, r7
      ee:	47 15       	cp	r20, r7
      f0:	47 15       	cp	r20, r7
      f2:	47 15       	cp	r20, r7
      f4:	5e 14       	cp	r5, r14
      f6:	47 15       	cp	r20, r7
      f8:	47 15       	cp	r20, r7
      fa:	47 15       	cp	r20, r7
      fc:	47 15       	cp	r20, r7
      fe:	47 15       	cp	r20, r7
     100:	47 15       	cp	r20, r7
     102:	47 15       	cp	r20, r7
     104:	5e 14       	cp	r5, r14
     106:	47 15       	cp	r20, r7
     108:	47 15       	cp	r20, r7
     10a:	47 15       	cp	r20, r7
     10c:	47 15       	cp	r20, r7
     10e:	47 15       	cp	r20, r7
     110:	47 15       	cp	r20, r7
     112:	47 15       	cp	r20, r7
     114:	66 14       	cp	r6, r6
     116:	47 15       	cp	r20, r7
     118:	47 15       	cp	r20, r7
     11a:	47 15       	cp	r20, r7
     11c:	47 15       	cp	r20, r7
     11e:	47 15       	cp	r20, r7
     120:	47 15       	cp	r20, r7
     122:	47 15       	cp	r20, r7
     124:	8b 14       	cp	r8, r11
     126:	47 15       	cp	r20, r7
     128:	47 15       	cp	r20, r7
     12a:	47 15       	cp	r20, r7
     12c:	47 15       	cp	r20, r7
     12e:	47 15       	cp	r20, r7
     130:	47 15       	cp	r20, r7
     132:	47 15       	cp	r20, r7
     134:	66 14       	cp	r6, r6
     136:	47 15       	cp	r20, r7
     138:	47 15       	cp	r20, r7
     13a:	47 15       	cp	r20, r7
     13c:	47 15       	cp	r20, r7
     13e:	47 15       	cp	r20, r7
     140:	47 15       	cp	r20, r7
     142:	47 15       	cp	r20, r7
     144:	90 14       	cp	r9, r0
     146:	47 15       	cp	r20, r7
     148:	47 15       	cp	r20, r7
     14a:	47 15       	cp	r20, r7
     14c:	47 15       	cp	r20, r7
     14e:	47 15       	cp	r20, r7
     150:	47 15       	cp	r20, r7
     152:	47 15       	cp	r20, r7
     154:	95 14       	cp	r9, r5
     156:	47 15       	cp	r20, r7
     158:	47 15       	cp	r20, r7
     15a:	47 15       	cp	r20, r7
     15c:	47 15       	cp	r20, r7
     15e:	47 15       	cp	r20, r7
     160:	47 15       	cp	r20, r7
     162:	47 15       	cp	r20, r7
     164:	a6 14       	cp	r10, r6
     166:	47 15       	cp	r20, r7
     168:	47 15       	cp	r20, r7
     16a:	47 15       	cp	r20, r7
     16c:	47 15       	cp	r20, r7
     16e:	47 15       	cp	r20, r7
     170:	47 15       	cp	r20, r7
     172:	47 15       	cp	r20, r7
     174:	cf 14       	cp	r12, r15
     176:	47 15       	cp	r20, r7
     178:	47 15       	cp	r20, r7
     17a:	47 15       	cp	r20, r7
     17c:	47 15       	cp	r20, r7
     17e:	47 15       	cp	r20, r7
     180:	47 15       	cp	r20, r7
     182:	47 15       	cp	r20, r7
     184:	9a 14       	cp	r9, r10
     186:	47 15       	cp	r20, r7
     188:	47 15       	cp	r20, r7
     18a:	47 15       	cp	r20, r7
     18c:	47 15       	cp	r20, r7
     18e:	47 15       	cp	r20, r7
     190:	47 15       	cp	r20, r7
     192:	47 15       	cp	r20, r7
     194:	b4 14       	cp	r11, r4
     196:	47 15       	cp	r20, r7
     198:	47 15       	cp	r20, r7
     19a:	47 15       	cp	r20, r7
     19c:	47 15       	cp	r20, r7
     19e:	47 15       	cp	r20, r7
     1a0:	47 15       	cp	r20, r7
     1a2:	47 15       	cp	r20, r7
     1a4:	d1 14       	cp	r13, r1
     1a6:	47 15       	cp	r20, r7
     1a8:	47 15       	cp	r20, r7
     1aa:	47 15       	cp	r20, r7
     1ac:	47 15       	cp	r20, r7
     1ae:	47 15       	cp	r20, r7
     1b0:	47 15       	cp	r20, r7
     1b2:	47 15       	cp	r20, r7
     1b4:	d1 14       	cp	r13, r1
     1b6:	47 15       	cp	r20, r7
     1b8:	47 15       	cp	r20, r7
     1ba:	47 15       	cp	r20, r7
     1bc:	47 15       	cp	r20, r7
     1be:	47 15       	cp	r20, r7
     1c0:	47 15       	cp	r20, r7
     1c2:	47 15       	cp	r20, r7
     1c4:	d1 14       	cp	r13, r1
     1c6:	47 15       	cp	r20, r7
     1c8:	47 15       	cp	r20, r7
     1ca:	47 15       	cp	r20, r7
     1cc:	47 15       	cp	r20, r7
     1ce:	47 15       	cp	r20, r7
     1d0:	47 15       	cp	r20, r7
     1d2:	47 15       	cp	r20, r7
     1d4:	d1 14       	cp	r13, r1
     1d6:	47 15       	cp	r20, r7
     1d8:	47 15       	cp	r20, r7
     1da:	47 15       	cp	r20, r7
     1dc:	47 15       	cp	r20, r7
     1de:	47 15       	cp	r20, r7
     1e0:	47 15       	cp	r20, r7
     1e2:	47 15       	cp	r20, r7
     1e4:	da 14       	cp	r13, r10
     1e6:	47 15       	cp	r20, r7
     1e8:	47 15       	cp	r20, r7
     1ea:	47 15       	cp	r20, r7
     1ec:	47 15       	cp	r20, r7
     1ee:	47 15       	cp	r20, r7
     1f0:	47 15       	cp	r20, r7
     1f2:	47 15       	cp	r20, r7
     1f4:	0b 15       	cp	r16, r11
     1f6:	47 15       	cp	r20, r7
     1f8:	47 15       	cp	r20, r7
     1fa:	47 15       	cp	r20, r7
     1fc:	47 15       	cp	r20, r7
     1fe:	47 15       	cp	r20, r7
     200:	47 15       	cp	r20, r7
     202:	47 15       	cp	r20, r7
     204:	da 14       	cp	r13, r10
     206:	47 15       	cp	r20, r7
     208:	47 15       	cp	r20, r7
     20a:	47 15       	cp	r20, r7
     20c:	47 15       	cp	r20, r7
     20e:	47 15       	cp	r20, r7
     210:	47 15       	cp	r20, r7
     212:	47 15       	cp	r20, r7
     214:	0b 15       	cp	r16, r11
     216:	47 15       	cp	r20, r7
     218:	47 15       	cp	r20, r7
     21a:	47 15       	cp	r20, r7
     21c:	47 15       	cp	r20, r7
     21e:	47 15       	cp	r20, r7
     220:	47 15       	cp	r20, r7
     222:	47 15       	cp	r20, r7
     224:	f2 14       	cp	r15, r2
     226:	47 15       	cp	r20, r7
     228:	47 15       	cp	r20, r7
     22a:	47 15       	cp	r20, r7
     22c:	47 15       	cp	r20, r7
     22e:	47 15       	cp	r20, r7
     230:	47 15       	cp	r20, r7
     232:	47 15       	cp	r20, r7
     234:	0f 15       	cp	r16, r15
     236:	47 15       	cp	r20, r7
     238:	47 15       	cp	r20, r7
     23a:	47 15       	cp	r20, r7
     23c:	47 15       	cp	r20, r7
     23e:	47 15       	cp	r20, r7
     240:	47 15       	cp	r20, r7
     242:	47 15       	cp	r20, r7
     244:	0f 15       	cp	r16, r15
     246:	47 15       	cp	r20, r7
     248:	47 15       	cp	r20, r7
     24a:	47 15       	cp	r20, r7
     24c:	47 15       	cp	r20, r7
     24e:	47 15       	cp	r20, r7
     250:	47 15       	cp	r20, r7
     252:	47 15       	cp	r20, r7
     254:	24 15       	cp	r18, r4
     256:	47 15       	cp	r20, r7
     258:	47 15       	cp	r20, r7
     25a:	47 15       	cp	r20, r7
     25c:	47 15       	cp	r20, r7
     25e:	47 15       	cp	r20, r7
     260:	47 15       	cp	r20, r7
     262:	47 15       	cp	r20, r7
     264:	3e 15       	cp	r19, r14
     266:	47 15       	cp	r20, r7
     268:	47 15       	cp	r20, r7
     26a:	47 15       	cp	r20, r7
     26c:	47 15       	cp	r20, r7
     26e:	47 15       	cp	r20, r7
     270:	47 15       	cp	r20, r7
     272:	47 15       	cp	r20, r7
     274:	3e 15       	cp	r19, r14
     276:	08 4a       	sbci	r16, 0xA8	; 168
     278:	d7 3b       	cpi	r29, 0xB7	; 183
     27a:	3b ce       	rjmp	.-906    	; 0xfffffef2 <__eeprom_end+0xff7efef2>
     27c:	01 6e       	ori	r16, 0xE1	; 225
     27e:	84 bc       	out	0x24, r8	; 36
     280:	bf fd       	.word	0xfdbf	; ????
     282:	c1 2f       	mov	r28, r17
     284:	3d 6c       	ori	r19, 0xCD	; 205
     286:	74 31       	cpi	r23, 0x14	; 20
     288:	9a bd       	out	0x2a, r25	; 42
     28a:	56 83       	std	Z+6, r21	; 0x06
     28c:	3d da       	rcall	.-2950   	; 0xfffff708 <__eeprom_end+0xff7ef708>
     28e:	3d 00       	.word	0x003d	; ????
     290:	c7 7f       	andi	r28, 0xF7	; 247
     292:	11 be       	out	0x31, r1	; 49
     294:	d9 e4       	ldi	r29, 0x49	; 73
     296:	bb 4c       	sbci	r27, 0xCB	; 203
     298:	3e 91       	ld	r19, -X
     29a:	6b aa       	std	Y+51, r6	; 0x33
     29c:	aa be       	out	0x3a, r10	; 58
     29e:	00 00       	nop
     2a0:	00 80       	ld	r0, Z
     2a2:	3f 07       	cpc	r19, r31
     2a4:	63 42       	sbci	r22, 0x23	; 35
     2a6:	36 b7       	in	r19, 0x36	; 54
     2a8:	9b d8       	rcall	.-3786   	; 0xfffff3e0 <__eeprom_end+0xff7ef3e0>
     2aa:	a7 1a       	sub	r10, r23
     2ac:	39 68       	ori	r19, 0x89	; 137
     2ae:	56 18       	sub	r5, r6
     2b0:	ae ba       	out	0x1e, r10	; 30
     2b2:	ab 55       	subi	r26, 0x5B	; 91
     2b4:	8c 1d       	adc	r24, r12
     2b6:	3c b7       	in	r19, 0x3c	; 60
     2b8:	cc 57       	subi	r28, 0x7C	; 124
     2ba:	63 bd       	out	0x23, r22	; 35
     2bc:	6d ed       	ldi	r22, 0xDD	; 221
     2be:	fd 75       	andi	r31, 0x5D	; 93
     2c0:	3e f6       	brtc	.-114    	; 0x250 <__SREG__+0x211>
     2c2:	17 72       	andi	r17, 0x27	; 39
     2c4:	31 bf       	out	0x31, r19	; 49
     2c6:	00 00       	nop
     2c8:	00 80       	ld	r0, Z
     2ca:	3f 08       	sbc	r3, r15
     2cc:	00 00       	nop
     2ce:	00 be       	out	0x30, r0	; 48
     2d0:	92 24       	eor	r9, r2
     2d2:	49 12       	cpse	r4, r25
     2d4:	3e ab       	std	Y+54, r19	; 0x36
     2d6:	aa aa       	std	Y+50, r10	; 0x32
     2d8:	2a be       	out	0x3a, r2	; 58
     2da:	cd cc       	rjmp	.-1638   	; 0xfffffc76 <__eeprom_end+0xff7efc76>
     2dc:	cc 4c       	sbci	r28, 0xCC	; 204
     2de:	3e 00       	.word	0x003e	; ????
     2e0:	00 00       	nop
     2e2:	80 be       	out	0x30, r8	; 48
     2e4:	ab aa       	std	Y+51, r10	; 0x33
     2e6:	aa aa       	std	Y+50, r10	; 0x32
     2e8:	3e 00       	.word	0x003e	; ????
     2ea:	00 00       	nop
     2ec:	00 bf       	out	0x30, r16	; 48
     2ee:	00 00       	nop
     2f0:	00 80       	ld	r0, Z
     2f2:	3f 00       	.word	0x003f	; ????
     2f4:	00 00       	nop
     2f6:	00 00       	nop
     2f8:	08 41       	sbci	r16, 0x18	; 24
     2fa:	78 d3       	rcall	.+1776   	; 0x9ec <main+0x398>
     2fc:	bb 43       	sbci	r27, 0x3B	; 59
     2fe:	87 d1       	rcall	.+782    	; 0x60e <GPS_parsing+0x9a>
     300:	13 3d       	cpi	r17, 0xD3	; 211
     302:	19 0e       	add	r1, r25
     304:	3c c3       	rjmp	.+1656   	; 0x97e <main+0x32a>
     306:	bd 42       	sbci	r27, 0x2D	; 45
     308:	82 ad       	ldd	r24, Z+58	; 0x3a
     30a:	2b 3e       	cpi	r18, 0xEB	; 235
     30c:	68 ec       	ldi	r22, 0xC8	; 200
     30e:	82 76       	andi	r24, 0x62	; 98
     310:	be d9       	rcall	.-3204   	; 0xfffff68e <__eeprom_end+0xff7ef68e>
     312:	8f e1       	ldi	r24, 0x1F	; 31
     314:	a9 3e       	cpi	r26, 0xE9	; 233
     316:	4c 80       	ldd	r4, Y+4	; 0x04
     318:	ef ff       	.word	0xffef	; ????
     31a:	be 01       	movw	r22, r28
     31c:	c4 ff       	sbrs	r28, 4
     31e:	7f 3f       	cpi	r23, 0xFF	; 255
     320:	00 00       	nop
     322:	00 00       	nop
	...

00000326 <__trampolines_end>:
     326:	6e 61       	ori	r22, 0x1E	; 30
     328:	6e 00       	.word	0x006e	; ????

0000032a <__c.2332>:
     32a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     33a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     34a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     35a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     36a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     37a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     38a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     39a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     3aa:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     3ba:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     3ca:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     3da:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     3ea:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3fa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     40a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     41a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000428 <__ctors_end>:
     428:	11 24       	eor	r1, r1
     42a:	1f be       	out	0x3f, r1	; 63
     42c:	cf ef       	ldi	r28, 0xFF	; 255
     42e:	d1 e2       	ldi	r29, 0x21	; 33
     430:	de bf       	out	0x3e, r29	; 62
     432:	cd bf       	out	0x3d, r28	; 61
     434:	00 e0       	ldi	r16, 0x00	; 0
     436:	0c bf       	out	0x3c, r16	; 60

00000438 <__do_copy_data>:
     438:	19 e0       	ldi	r17, 0x09	; 9
     43a:	a0 e0       	ldi	r26, 0x00	; 0
     43c:	b2 e0       	ldi	r27, 0x02	; 2
     43e:	e4 e6       	ldi	r30, 0x64	; 100
     440:	f5 e4       	ldi	r31, 0x45	; 69
     442:	00 e0       	ldi	r16, 0x00	; 0
     444:	0b bf       	out	0x3b, r16	; 59
     446:	02 c0       	rjmp	.+4      	; 0x44c <__do_copy_data+0x14>
     448:	07 90       	elpm	r0, Z+
     44a:	0d 92       	st	X+, r0
     44c:	ae 32       	cpi	r26, 0x2E	; 46
     44e:	b1 07       	cpc	r27, r17
     450:	d9 f7       	brne	.-10     	; 0x448 <__do_copy_data+0x10>

00000452 <__do_clear_bss>:
     452:	2d e0       	ldi	r18, 0x0D	; 13
     454:	ae e2       	ldi	r26, 0x2E	; 46
     456:	b9 e0       	ldi	r27, 0x09	; 9
     458:	01 c0       	rjmp	.+2      	; 0x45c <.do_clear_bss_start>

0000045a <.do_clear_bss_loop>:
     45a:	1d 92       	st	X+, r1

0000045c <.do_clear_bss_start>:
     45c:	a8 3d       	cpi	r26, 0xD8	; 216
     45e:	b2 07       	cpc	r27, r18
     460:	e1 f7       	brne	.-8      	; 0x45a <.do_clear_bss_loop>
     462:	f8 d0       	rcall	.+496    	; 0x654 <main>
     464:	0c 94 b0 22 	jmp	0x4560	; 0x4560 <_exit>

00000468 <__bad_interrupt>:
     468:	cb cd       	rjmp	.-1130   	; 0x0 <__vectors>

0000046a <__vector_51>:
		return 1;
	}
	else{
		return 0;
	}
}
     46a:	1f 92       	push	r1
     46c:	0f 92       	push	r0
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	0f 92       	push	r0
     472:	11 24       	eor	r1, r1
     474:	0b b6       	in	r0, 0x3b	; 59
     476:	0f 92       	push	r0
     478:	2f 93       	push	r18
     47a:	3f 93       	push	r19
     47c:	8f 93       	push	r24
     47e:	9f 93       	push	r25
     480:	ef 93       	push	r30
     482:	ff 93       	push	r31
     484:	e0 91 2f 09 	lds	r30, 0x092F	; 0x80092f <uart2_rx_idx>
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	8e 0f       	add	r24, r30
     48c:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <uart2_rx_idx>
     490:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	ed 50       	subi	r30, 0x0D	; 13
     498:	f6 4f       	sbci	r31, 0xF6	; 246
     49a:	90 83       	st	Z, r25
     49c:	28 2f       	mov	r18, r24
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	f9 01       	movw	r30, r18
     4a2:	ee 50       	subi	r30, 0x0E	; 14
     4a4:	f6 4f       	sbci	r31, 0xF6	; 246
     4a6:	90 81       	ld	r25, Z
     4a8:	9a 30       	cpi	r25, 0x0A	; 10
     4aa:	51 f4       	brne	.+20     	; 0x4c0 <__vector_51+0x56>
     4ac:	f9 01       	movw	r30, r18
     4ae:	ed 50       	subi	r30, 0x0D	; 13
     4b0:	f6 4f       	sbci	r31, 0xF6	; 246
     4b2:	10 82       	st	Z, r1
     4b4:	10 92 2f 09 	sts	0x092F, r1	; 0x80092f <uart2_rx_idx>
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	80 93 2e 09 	sts	0x092E, r24	; 0x80092e <__data_end>
     4be:	04 c0       	rjmp	.+8      	; 0x4c8 <__vector_51+0x5e>
     4c0:	8e 3f       	cpi	r24, 0xFE	; 254
     4c2:	10 f0       	brcs	.+4      	; 0x4c8 <__vector_51+0x5e>
     4c4:	10 92 2f 09 	sts	0x092F, r1	; 0x80092f <uart2_rx_idx>
     4c8:	ff 91       	pop	r31
     4ca:	ef 91       	pop	r30
     4cc:	9f 91       	pop	r25
     4ce:	8f 91       	pop	r24
     4d0:	3f 91       	pop	r19
     4d2:	2f 91       	pop	r18
     4d4:	0f 90       	pop	r0
     4d6:	0b be       	out	0x3b, r0	; 59
     4d8:	0f 90       	pop	r0
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	0f 90       	pop	r0
     4de:	1f 90       	pop	r1
     4e0:	18 95       	reti

000004e2 <GPS_UART2_init>:
     4e2:	dc 01       	movw	r26, r24
     4e4:	cb 01       	movw	r24, r22
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	aa 1f       	adc	r26, r26
     4ec:	bb 1f       	adc	r27, r27
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	aa 1f       	adc	r26, r26
     4f4:	bb 1f       	adc	r27, r27
     4f6:	9c 01       	movw	r18, r24
     4f8:	ad 01       	movw	r20, r26
     4fa:	22 0f       	add	r18, r18
     4fc:	33 1f       	adc	r19, r19
     4fe:	44 1f       	adc	r20, r20
     500:	55 1f       	adc	r21, r21
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	74 e2       	ldi	r23, 0x24	; 36
     506:	84 ef       	ldi	r24, 0xF4	; 244
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 33 20 	call	0x4066	; 0x4066 <__udivmodsi4>
     50e:	21 50       	subi	r18, 0x01	; 1
     510:	31 09       	sbc	r19, r1
     512:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     516:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     51a:	82 e0       	ldi	r24, 0x02	; 2
     51c:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     520:	80 e9       	ldi	r24, 0x90	; 144
     522:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     526:	86 e0       	ldi	r24, 0x06	; 6
     528:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
     52c:	08 95       	ret

0000052e <GPS_UART2_gets>:

char GPS_UART2_gets(void)
{
	if(uart2_rx_str_flag){
     52e:	80 91 2e 09 	lds	r24, 0x092E	; 0x80092e <__data_end>
     532:	88 23       	and	r24, r24
     534:	21 f0       	breq	.+8      	; 0x53e <GPS_UART2_gets+0x10>
		uart2_rx_str_flag = 0;
     536:	10 92 2e 09 	sts	0x092E, r1	; 0x80092e <__data_end>
		return 1;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	08 95       	ret
	}
	else{
		return 0;
     53e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     540:	08 95       	ret

00000542 <atohex>:
}

unsigned char atohex(char hexadecimal)
{
	int decimal = 0;
	if(hexadecimal>='A' && hexadecimal<='F'){
     542:	9f eb       	ldi	r25, 0xBF	; 191
     544:	98 0f       	add	r25, r24
     546:	96 30       	cpi	r25, 0x06	; 6
     548:	18 f4       	brcc	.+6      	; 0x550 <atohex+0xe>
		decimal = decimal*16 + hexadecimal-'A'+10;
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	c7 97       	sbiw	r24, 0x37	; 55
     54e:	08 95       	ret
	}
	else if(hexadecimal>='a' && hexadecimal<='f'){
     550:	9f e9       	ldi	r25, 0x9F	; 159
     552:	98 0f       	add	r25, r24
     554:	96 30       	cpi	r25, 0x06	; 6
     556:	20 f4       	brcc	.+8      	; 0x560 <atohex+0x1e>
		decimal = decimal*16 + hexadecimal-'a'+10;	
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	87 55       	subi	r24, 0x57	; 87
     55c:	91 09       	sbc	r25, r1
     55e:	08 95       	ret
	}
	else if(hexadecimal>='0' && hexadecimal<='9'){
     560:	90 ed       	ldi	r25, 0xD0	; 208
     562:	98 0f       	add	r25, r24
     564:	9a 30       	cpi	r25, 0x0A	; 10
     566:	18 f4       	brcc	.+6      	; 0x56e <atohex+0x2c>
		decimal = decimal*16 + hexadecimal-'0';			
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	c0 97       	sbiw	r24, 0x30	; 48
     56c:	08 95       	ret
	return 1;
}

unsigned char atohex(char hexadecimal)
{
	int decimal = 0;
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
	}
	else if(hexadecimal>='0' && hexadecimal<='9'){
		decimal = decimal*16 + hexadecimal-'0';			
	}
	return decimal;
}
     572:	08 95       	ret

00000574 <GPS_parsing>:
		return 0;
	}
}

char GPS_parsing(char *s)
{
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	ec 01       	movw	r28, r24
	unsigned char bChecksum = 0;
	unsigned char asterisk_idx = 0;
	
	if(GPS_UART2_gets()==0){
     582:	d5 df       	rcall	.-86     	; 0x52e <GPS_UART2_gets>
     584:	88 23       	and	r24, r24
     586:	09 f4       	brne	.+2      	; 0x58a <GPS_parsing+0x16>
     588:	55 c0       	rjmp	.+170    	; 0x634 <GPS_parsing+0xc0>
		return -1;
	}

	if(!(uart2_rx_buffer[0]=='$'&&uart2_rx_buffer[3]=='R'&&uart2_rx_buffer[4]=='M'&&uart2_rx_buffer[5]=='C')){
     58a:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <uart2_rx_buffer>
     58e:	84 32       	cpi	r24, 0x24	; 36
     590:	09 f0       	breq	.+2      	; 0x594 <GPS_parsing+0x20>
     592:	52 c0       	rjmp	.+164    	; 0x638 <GPS_parsing+0xc4>
     594:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <uart2_rx_buffer+0x3>
     598:	82 35       	cpi	r24, 0x52	; 82
     59a:	09 f0       	breq	.+2      	; 0x59e <GPS_parsing+0x2a>
     59c:	4f c0       	rjmp	.+158    	; 0x63c <GPS_parsing+0xc8>
     59e:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <uart2_rx_buffer+0x4>
     5a2:	8d 34       	cpi	r24, 0x4D	; 77
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <GPS_parsing+0x34>
     5a6:	4c c0       	rjmp	.+152    	; 0x640 <GPS_parsing+0xcc>
     5a8:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <uart2_rx_buffer+0x5>
     5ac:	83 34       	cpi	r24, 0x43	; 67
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <GPS_parsing+0x3e>
     5b0:	49 c0       	rjmp	.+146    	; 0x644 <GPS_parsing+0xd0>
		return -1;
	}

	for(unsigned char i=1;  uart2_rx_buffer[i]!='*'; i++){
     5b2:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <uart2_rx_buffer+0x1>
     5b6:	8a 32       	cpi	r24, 0x2A	; 42
     5b8:	79 f0       	breq	.+30     	; 0x5d8 <GPS_parsing+0x64>
     5ba:	01 e0       	ldi	r16, 0x01	; 1
     5bc:	f1 2c       	mov	r15, r1
     5be:	01 c0       	rjmp	.+2      	; 0x5c2 <GPS_parsing+0x4e>
     5c0:	09 2f       	mov	r16, r25
		bChecksum ^= uart2_rx_buffer[i];
     5c2:	f8 26       	eor	r15, r24

	if(!(uart2_rx_buffer[0]=='$'&&uart2_rx_buffer[3]=='R'&&uart2_rx_buffer[4]=='M'&&uart2_rx_buffer[5]=='C')){
		return -1;
	}

	for(unsigned char i=1;  uart2_rx_buffer[i]!='*'; i++){
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	90 0f       	add	r25, r16
     5c8:	e9 2f       	mov	r30, r25
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	ed 50       	subi	r30, 0x0D	; 13
     5ce:	f6 4f       	sbci	r31, 0xF6	; 246
     5d0:	80 81       	ld	r24, Z
     5d2:	8a 32       	cpi	r24, 0x2A	; 42
     5d4:	a9 f7       	brne	.-22     	; 0x5c0 <GPS_parsing+0x4c>
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <GPS_parsing+0x68>
     5d8:	00 e0       	ldi	r16, 0x00	; 0
     5da:	f1 2c       	mov	r15, r1
		bChecksum ^= uart2_rx_buffer[i];
		asterisk_idx=i;
	}

	if(bChecksum!=((atohex(uart2_rx_buffer[asterisk_idx+2])*16)+ atohex(uart2_rx_buffer[asterisk_idx+3]))){
     5dc:	10 e0       	ldi	r17, 0x00	; 0
     5de:	0d 50       	subi	r16, 0x0D	; 13
     5e0:	16 4f       	sbci	r17, 0xF6	; 246
     5e2:	f8 01       	movw	r30, r16
     5e4:	82 81       	ldd	r24, Z+2	; 0x02
     5e6:	ad df       	rcall	.-166    	; 0x542 <atohex>
     5e8:	e8 2e       	mov	r14, r24
     5ea:	f8 01       	movw	r30, r16
     5ec:	83 81       	ldd	r24, Z+3	; 0x03
     5ee:	a9 df       	rcall	.-174    	; 0x542 <atohex>
     5f0:	2f 2d       	mov	r18, r15
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	f0 e1       	ldi	r31, 0x10	; 16
     5f8:	ef 9e       	mul	r14, r31
     5fa:	80 0d       	add	r24, r0
     5fc:	91 1d       	adc	r25, r1
     5fe:	11 24       	eor	r1, r1
     600:	28 17       	cp	r18, r24
     602:	39 07       	cpc	r19, r25
     604:	31 f0       	breq	.+12     	; 0x612 <GPS_parsing+0x9e>
		printf("GPS Packet Error\n");
     606:	8c e1       	ldi	r24, 0x1C	; 28
     608:	94 e0       	ldi	r25, 0x04	; 4
     60a:	0e 94 12 22 	call	0x4424	; 0x4424 <puts>
		return -2;
     60e:	8e ef       	ldi	r24, 0xFE	; 254
     610:	1a c0       	rjmp	.+52     	; 0x646 <GPS_parsing+0xd2>
	}

	if(uart2_rx_buffer[18] != 'A'){
     612:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <uart2_rx_buffer+0x12>
     616:	81 34       	cpi	r24, 0x41	; 65
     618:	31 f0       	breq	.+12     	; 0x626 <GPS_parsing+0xb2>
		printf("Wait GPS not found\n");
     61a:	8d e2       	ldi	r24, 0x2D	; 45
     61c:	94 e0       	ldi	r25, 0x04	; 4
     61e:	0e 94 12 22 	call	0x4424	; 0x4424 <puts>
		return -2;
     622:	8e ef       	ldi	r24, 0xFE	; 254
     624:	10 c0       	rjmp	.+32     	; 0x646 <GPS_parsing+0xd2>
	}

	strcpy(s, uart2_rx_buffer);
     626:	63 ef       	ldi	r22, 0xF3	; 243
     628:	79 e0       	ldi	r23, 0x09	; 9
     62a:	ce 01       	movw	r24, r28
     62c:	0e 94 7f 21 	call	0x42fe	; 0x42fe <strcpy>
	return 1;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	09 c0       	rjmp	.+18     	; 0x646 <GPS_parsing+0xd2>
{
	unsigned char bChecksum = 0;
	unsigned char asterisk_idx = 0;
	
	if(GPS_UART2_gets()==0){
		return -1;
     634:	8f ef       	ldi	r24, 0xFF	; 255
     636:	07 c0       	rjmp	.+14     	; 0x646 <GPS_parsing+0xd2>
	}

	if(!(uart2_rx_buffer[0]=='$'&&uart2_rx_buffer[3]=='R'&&uart2_rx_buffer[4]=='M'&&uart2_rx_buffer[5]=='C')){
		return -1;
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	05 c0       	rjmp	.+10     	; 0x646 <GPS_parsing+0xd2>
     63c:	8f ef       	ldi	r24, 0xFF	; 255
     63e:	03 c0       	rjmp	.+6      	; 0x646 <GPS_parsing+0xd2>
     640:	8f ef       	ldi	r24, 0xFF	; 255
     642:	01 c0       	rjmp	.+2      	; 0x646 <GPS_parsing+0xd2>
     644:	8f ef       	ldi	r24, 0xFF	; 255
		return -2;
	}

	strcpy(s, uart2_rx_buffer);
	return 1;
}
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	ff 90       	pop	r15
     650:	ef 90       	pop	r14
     652:	08 95       	ret

00000654 <main>:

char count = 0;
double pitch = 0, yaw = 0, roll = 0;

int main(void)
{
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	cf 5f       	subi	r28, 0xFF	; 255
     65e:	d1 09       	sbc	r29, r1
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	de bf       	out	0x3e, r29	; 62
     666:	0f be       	out	0x3f, r0	; 63
     668:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0x80;
     66a:	80 e8       	ldi	r24, 0x80	; 128
     66c:	84 b9       	out	0x04, r24	; 4
	sei();
     66e:	78 94       	sei
	UART0_init(1000000);	// UART0 init
     670:	60 e4       	ldi	r22, 0x40	; 64
     672:	72 e4       	ldi	r23, 0x42	; 66
     674:	8f e0       	ldi	r24, 0x0F	; 15
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <UART0_init>
	GPS_UART2_init(9600);	
     67c:	60 e8       	ldi	r22, 0x80	; 128
     67e:	75 e2       	ldi	r23, 0x25	; 37
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	2e df       	rcall	.-420    	; 0x4e2 <GPS_UART2_init>
	XM430_init(57600);
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	71 ee       	ldi	r23, 0xE1	; 225
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 77 17 	call	0x2eee	; 0x2eee <XM430_init>
	Timer0_init();
     692:	0e 94 00 13 	call	0x2600	; 0x2600 <Timer0_init>
	twi_init();			// TWI init
     696:	0e 94 68 13 	call	0x26d0	; 0x26d0 <twi_init>
	mpu9250_setup();	// MPU9250 init
     69a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <mpu9250_setup>

	xm430_Torque(0xFE, 1);
     69e:	61 e0       	ldi	r22, 0x01	; 1
     6a0:	8e ef       	ldi	r24, 0xFE	; 254
     6a2:	0e 94 46 18 	call	0x308c	; 0x308c <xm430_Torque>
    while (1)
    {
		char s[255];
		if (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01 && Timer0_flag(240)==1){
     6a6:	6a e3       	ldi	r22, 0x3A	; 58
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	66 d7       	rcall	.+3788   	; 0x1578 <readByte>
     6ac:	80 ff       	sbrs	r24, 0
     6ae:	59 c1       	rjmp	.+690    	; 0x962 <main+0x30e>
     6b0:	80 ef       	ldi	r24, 0xF0	; 240
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 09 13 	call	0x2612	; 0x2612 <Timer0_flag>
     6b8:	01 97       	sbiw	r24, 0x01	; 1
     6ba:	09 f0       	breq	.+2      	; 0x6be <main+0x6a>
     6bc:	52 c1       	rjmp	.+676    	; 0x962 <main+0x30e>
			readAccelData(accelCount);  // Read the x/y/z adc values
     6be:	82 ef       	ldi	r24, 0xF2	; 242
     6c0:	9a e0       	ldi	r25, 0x0A	; 10
			getAres();
     6c2:	15 d3       	rcall	.+1578   	; 0xcee <readAccelData>
     6c4:	9a d2       	rcall	.+1332   	; 0xbfa <getAres>
			// Now we'll calculate the accleration value into actual g's
			ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
     6c6:	c0 90 2a 0b 	lds	r12, 0x0B2A	; 0x800b2a <aRes>
     6ca:	d0 90 2b 0b 	lds	r13, 0x0B2B	; 0x800b2b <aRes+0x1>
     6ce:	e0 90 2c 0b 	lds	r14, 0x0B2C	; 0x800b2c <aRes+0x2>
     6d2:	f0 90 2d 0b 	lds	r15, 0x0B2D	; 0x800b2d <aRes+0x3>
     6d6:	02 ef       	ldi	r16, 0xF2	; 242
     6d8:	1a e0       	ldi	r17, 0x0A	; 10
     6da:	f8 01       	movw	r30, r16
     6dc:	60 81       	ld	r22, Z
     6de:	71 81       	ldd	r23, Z+1	; 0x01
     6e0:	07 2e       	mov	r0, r23
     6e2:	00 0c       	add	r0, r0
     6e4:	88 0b       	sbc	r24, r24
     6e6:	99 0b       	sbc	r25, r25
     6e8:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     6ec:	a7 01       	movw	r20, r14
     6ee:	96 01       	movw	r18, r12
     6f0:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     6f4:	60 93 26 0b 	sts	0x0B26, r22	; 0x800b26 <ax>
     6f8:	70 93 27 0b 	sts	0x0B27, r23	; 0x800b27 <ax+0x1>
     6fc:	80 93 28 0b 	sts	0x0B28, r24	; 0x800b28 <ax+0x2>
     700:	90 93 29 0b 	sts	0x0B29, r25	; 0x800b29 <ax+0x3>
			ay = (float)accelCount[1]*aRes; // - accelBias[1]; 
     704:	f8 01       	movw	r30, r16
     706:	62 81       	ldd	r22, Z+2	; 0x02
     708:	73 81       	ldd	r23, Z+3	; 0x03
     70a:	07 2e       	mov	r0, r23
     70c:	00 0c       	add	r0, r0
     70e:	88 0b       	sbc	r24, r24
     710:	99 0b       	sbc	r25, r25
     712:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     716:	a7 01       	movw	r20, r14
     718:	96 01       	movw	r18, r12
     71a:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     71e:	60 93 4a 0b 	sts	0x0B4A, r22	; 0x800b4a <ay>
     722:	70 93 4b 0b 	sts	0x0B4B, r23	; 0x800b4b <ay+0x1>
     726:	80 93 4c 0b 	sts	0x0B4C, r24	; 0x800b4c <ay+0x2>
     72a:	90 93 4d 0b 	sts	0x0B4D, r25	; 0x800b4d <ay+0x3>
			az = (float)accelCount[2]*aRes; // - accelBias[2];
     72e:	f8 01       	movw	r30, r16
     730:	64 81       	ldd	r22, Z+4	; 0x04
     732:	75 81       	ldd	r23, Z+5	; 0x05
     734:	07 2e       	mov	r0, r23
     736:	00 0c       	add	r0, r0
     738:	88 0b       	sbc	r24, r24
     73a:	99 0b       	sbc	r25, r25
     73c:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     740:	a7 01       	movw	r20, r14
     742:	96 01       	movw	r18, r12
     744:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     748:	60 93 14 0b 	sts	0x0B14, r22	; 0x800b14 <az>
     74c:	70 93 15 0b 	sts	0x0B15, r23	; 0x800b15 <az+0x1>
     750:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <az+0x2>
     754:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <az+0x3>
			
			readGyroData(gyroCount);  // Read the x/y/z adc values
     758:	8c e1       	ldi	r24, 0x1C	; 28
     75a:	9b e0       	ldi	r25, 0x0B	; 11
     75c:	fc d2       	rcall	.+1528   	; 0xd56 <readGyroData>
			getGres();
     75e:	0f d2       	rcall	.+1054   	; 0xb7e <getGres>
     760:	c0 90 34 0b 	lds	r12, 0x0B34	; 0x800b34 <gRes>
			// Calculate the gyro value into actual degrees per second
			gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
     764:	d0 90 35 0b 	lds	r13, 0x0B35	; 0x800b35 <gRes+0x1>
     768:	e0 90 36 0b 	lds	r14, 0x0B36	; 0x800b36 <gRes+0x2>
     76c:	f0 90 37 0b 	lds	r15, 0x0B37	; 0x800b37 <gRes+0x3>
     770:	0c e1       	ldi	r16, 0x1C	; 28
     772:	1b e0       	ldi	r17, 0x0B	; 11
     774:	f8 01       	movw	r30, r16
     776:	60 81       	ld	r22, Z
     778:	71 81       	ldd	r23, Z+1	; 0x01
     77a:	07 2e       	mov	r0, r23
     77c:	00 0c       	add	r0, r0
     77e:	88 0b       	sbc	r24, r24
     780:	99 0b       	sbc	r25, r25
     782:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     786:	a7 01       	movw	r20, r14
     788:	96 01       	movw	r18, r12
     78a:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     78e:	60 93 46 0b 	sts	0x0B46, r22	; 0x800b46 <gx>
     792:	70 93 47 0b 	sts	0x0B47, r23	; 0x800b47 <gx+0x1>
     796:	80 93 48 0b 	sts	0x0B48, r24	; 0x800b48 <gx+0x2>
     79a:	90 93 49 0b 	sts	0x0B49, r25	; 0x800b49 <gx+0x3>
     79e:	f8 01       	movw	r30, r16
   			gy = (float)gyroCount[1]*gRes;
     7a0:	62 81       	ldd	r22, Z+2	; 0x02
     7a2:	73 81       	ldd	r23, Z+3	; 0x03
     7a4:	07 2e       	mov	r0, r23
     7a6:	00 0c       	add	r0, r0
     7a8:	88 0b       	sbc	r24, r24
     7aa:	99 0b       	sbc	r25, r25
     7ac:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     7b0:	a7 01       	movw	r20, r14
     7b2:	96 01       	movw	r18, r12
     7b4:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     7b8:	60 93 10 0b 	sts	0x0B10, r22	; 0x800b10 <gy>
     7bc:	70 93 11 0b 	sts	0x0B11, r23	; 0x800b11 <gy+0x1>
     7c0:	80 93 12 0b 	sts	0x0B12, r24	; 0x800b12 <gy+0x2>
     7c4:	90 93 13 0b 	sts	0x0B13, r25	; 0x800b13 <gy+0x3>
     7c8:	f8 01       	movw	r30, r16
   			gz = (float)gyroCount[2]*gRes;
     7ca:	64 81       	ldd	r22, Z+4	; 0x04
     7cc:	75 81       	ldd	r23, Z+5	; 0x05
     7ce:	07 2e       	mov	r0, r23
     7d0:	00 0c       	add	r0, r0
     7d2:	88 0b       	sbc	r24, r24
     7d4:	99 0b       	sbc	r25, r25
     7d6:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     7da:	a7 01       	movw	r20, r14
     7dc:	96 01       	movw	r18, r12
     7de:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     7e2:	60 93 30 0b 	sts	0x0B30, r22	; 0x800b30 <gz>
     7e6:	70 93 31 0b 	sts	0x0B31, r23	; 0x800b31 <gz+0x1>
     7ea:	80 93 32 0b 	sts	0x0B32, r24	; 0x800b32 <gz+0x2>
     7ee:	90 93 33 0b 	sts	0x0B33, r25	; 0x800b33 <gz+0x3>

   			readMagData(magCount);  // Read the x/y/z adc values
     7f2:	8c e3       	ldi	r24, 0x3C	; 60
     7f4:	9b e0       	ldi	r25, 0x0B	; 11
     7f6:	33 d7       	rcall	.+3686   	; 0x165e <readMagData>
   			getMres();
     7f8:	a1 d1       	rcall	.+834    	; 0xb3c <getMres>
     7fa:	c0 90 42 0b 	lds	r12, 0x0B42	; 0x800b42 <mRes>
   			mx = (float)magCount[0]*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
     7fe:	d0 90 43 0b 	lds	r13, 0x0B43	; 0x800b43 <mRes+0x1>
     802:	e0 90 44 0b 	lds	r14, 0x0B44	; 0x800b44 <mRes+0x2>
     806:	f0 90 45 0b 	lds	r15, 0x0B45	; 0x800b45 <mRes+0x3>
     80a:	0c e3       	ldi	r16, 0x3C	; 60
     80c:	1b e0       	ldi	r17, 0x0B	; 11
     80e:	f8 01       	movw	r30, r16
     810:	60 81       	ld	r22, Z
     812:	71 81       	ldd	r23, Z+1	; 0x01
     814:	07 2e       	mov	r0, r23
     816:	00 0c       	add	r0, r0
     818:	88 0b       	sbc	r24, r24
     81a:	99 0b       	sbc	r25, r25
     81c:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     820:	a7 01       	movw	r20, r14
     822:	96 01       	movw	r18, r12
     824:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     828:	e8 e4       	ldi	r30, 0x48	; 72
     82a:	f9 e0       	ldi	r31, 0x09	; 9
     82c:	20 81       	ld	r18, Z
     82e:	31 81       	ldd	r19, Z+1	; 0x01
     830:	42 81       	ldd	r20, Z+2	; 0x02
     832:	53 81       	ldd	r21, Z+3	; 0x03
     834:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     838:	ec e3       	ldi	r30, 0x3C	; 60
     83a:	f9 e0       	ldi	r31, 0x09	; 9
     83c:	20 81       	ld	r18, Z
     83e:	31 81       	ldd	r19, Z+1	; 0x01
     840:	42 81       	ldd	r20, Z+2	; 0x02
     842:	53 81       	ldd	r21, Z+3	; 0x03
     844:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__subsf3>
     848:	2b 01       	movw	r4, r22
     84a:	3c 01       	movw	r6, r24
     84c:	60 93 4e 0b 	sts	0x0B4E, r22	; 0x800b4e <mx>
     850:	70 93 4f 0b 	sts	0x0B4F, r23	; 0x800b4f <mx+0x1>
     854:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <mx+0x2>
     858:	90 93 51 0b 	sts	0x0B51, r25	; 0x800b51 <mx+0x3>
     85c:	f8 01       	movw	r30, r16
   			my = (float)magCount[1]*mRes*magCalibration[1] - magBias[1];
     85e:	62 81       	ldd	r22, Z+2	; 0x02
     860:	73 81       	ldd	r23, Z+3	; 0x03
     862:	07 2e       	mov	r0, r23
     864:	00 0c       	add	r0, r0
     866:	88 0b       	sbc	r24, r24
     868:	99 0b       	sbc	r25, r25
     86a:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     86e:	a7 01       	movw	r20, r14
     870:	96 01       	movw	r18, r12
     872:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     876:	20 91 4c 09 	lds	r18, 0x094C	; 0x80094c <magCalibration+0x4>
     87a:	30 91 4d 09 	lds	r19, 0x094D	; 0x80094d <magCalibration+0x5>
     87e:	40 91 4e 09 	lds	r20, 0x094E	; 0x80094e <magCalibration+0x6>
     882:	50 91 4f 09 	lds	r21, 0x094F	; 0x80094f <magCalibration+0x7>
     886:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     88a:	20 91 40 09 	lds	r18, 0x0940	; 0x800940 <magBias+0x4>
     88e:	30 91 41 09 	lds	r19, 0x0941	; 0x800941 <magBias+0x5>
     892:	40 91 42 09 	lds	r20, 0x0942	; 0x800942 <magBias+0x6>
     896:	50 91 43 09 	lds	r21, 0x0943	; 0x800943 <magBias+0x7>
     89a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__subsf3>
     89e:	4b 01       	movw	r8, r22
     8a0:	5c 01       	movw	r10, r24
     8a2:	60 93 22 0b 	sts	0x0B22, r22	; 0x800b22 <my>
     8a6:	70 93 23 0b 	sts	0x0B23, r23	; 0x800b23 <my+0x1>
     8aa:	80 93 24 0b 	sts	0x0B24, r24	; 0x800b24 <my+0x2>
     8ae:	90 93 25 0b 	sts	0x0B25, r25	; 0x800b25 <my+0x3>
     8b2:	f8 01       	movw	r30, r16
   			mz = (float)magCount[2]*mRes*magCalibration[2] - magBias[2];
     8b4:	64 81       	ldd	r22, Z+4	; 0x04
     8b6:	75 81       	ldd	r23, Z+5	; 0x05
     8b8:	07 2e       	mov	r0, r23
     8ba:	00 0c       	add	r0, r0
     8bc:	88 0b       	sbc	r24, r24
     8be:	99 0b       	sbc	r25, r25
     8c0:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     8c4:	a7 01       	movw	r20, r14
     8c6:	96 01       	movw	r18, r12
     8c8:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     8cc:	20 91 50 09 	lds	r18, 0x0950	; 0x800950 <magCalibration+0x8>
     8d0:	30 91 51 09 	lds	r19, 0x0951	; 0x800951 <magCalibration+0x9>
     8d4:	40 91 52 09 	lds	r20, 0x0952	; 0x800952 <magCalibration+0xa>
     8d8:	50 91 53 09 	lds	r21, 0x0953	; 0x800953 <magCalibration+0xb>
     8dc:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     8e0:	20 91 44 09 	lds	r18, 0x0944	; 0x800944 <magBias+0x8>
     8e4:	30 91 45 09 	lds	r19, 0x0945	; 0x800945 <magBias+0x9>
     8e8:	40 91 46 09 	lds	r20, 0x0946	; 0x800946 <magBias+0xa>
     8ec:	50 91 47 09 	lds	r21, 0x0947	; 0x800947 <magBias+0xb>
     8f0:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__subsf3>
     8f4:	60 93 38 0b 	sts	0x0B38, r22	; 0x800b38 <mz>
     8f8:	70 93 39 0b 	sts	0x0B39, r23	; 0x800b39 <mz+0x1>
     8fc:	80 93 3a 0b 	sts	0x0B3A, r24	; 0x800b3a <mz+0x2>
     900:	90 93 3b 0b 	sts	0x0B3B, r25	; 0x800b3b <mz+0x3>
     904:	a3 01       	movw	r20, r6

			float heading = (atan2(my, mx)*180.0/3.141592)+90;
     906:	92 01       	movw	r18, r4
     908:	c5 01       	movw	r24, r10
     90a:	b4 01       	movw	r22, r8
     90c:	0e 94 ef 18 	call	0x31de	; 0x31de <atan2>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	44 e3       	ldi	r20, 0x34	; 52
     916:	53 e4       	ldi	r21, 0x43	; 67
     918:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     91c:	28 ed       	ldi	r18, 0xD8	; 216
     91e:	3f e0       	ldi	r19, 0x0F	; 15
     920:	49 e4       	ldi	r20, 0x49	; 73
     922:	50 e4       	ldi	r21, 0x40	; 64
     924:	0e 94 46 19 	call	0x328c	; 0x328c <__divsf3>
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	44 eb       	ldi	r20, 0xB4	; 180
     92e:	52 e4       	ldi	r21, 0x42	; 66
     930:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__addsf3>
     934:	6b 01       	movw	r12, r22
     936:	7c 01       	movw	r14, r24
     938:	20 e0       	ldi	r18, 0x00	; 0
			if (heading < 0.0) heading = heading+360.0;
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	a9 01       	movw	r20, r18
     93e:	0e 94 42 19 	call	0x3284	; 0x3284 <__cmpsf2>
     942:	88 23       	and	r24, r24
     944:	54 f4       	brge	.+20     	; 0x95a <main+0x306>
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	44 eb       	ldi	r20, 0xB4	; 180
     94c:	53 e4       	ldi	r21, 0x43	; 67
     94e:	c7 01       	movw	r24, r14
     950:	b6 01       	movw	r22, r12
     952:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__addsf3>
     956:	6b 01       	movw	r12, r22
     958:	7c 01       	movw	r14, r24
//			printf("mx, my, mz = %f, %f, %f\n", mx, my, mz);
//			printf("heading: %f\n", heading);
			UART0_IMU_send(heading);
     95a:	c7 01       	movw	r24, r14
     95c:	b6 01       	movw	r22, r12
     95e:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <UART0_IMU_send>
//				my = 0.0;
//				mz = 0.0;
//				count =0;
//			}
		}
		if(GPS_parsing(s)==1 && Timer0_flag(500)==1){
     962:	ce 01       	movw	r24, r28
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	06 de       	rcall	.-1012   	; 0x574 <GPS_parsing>
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	51 f4       	brne	.+20     	; 0x980 <main+0x32c>
     96c:	84 ef       	ldi	r24, 0xF4	; 244
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	0e 94 09 13 	call	0x2612	; 0x2612 <Timer0_flag>
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	21 f4       	brne	.+8      	; 0x980 <main+0x32c>
     978:	ce 01       	movw	r24, r28
			UART0_GPS_send(s);
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	0e 94 d7 15 	call	0x2bae	; 0x2bae <UART0_GPS_send>
     980:	ce 01       	movw	r24, r28
		}
		switch(UART0_parsing(s)){
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART0_parsing>
     988:	81 30       	cpi	r24, 0x01	; 1
     98a:	59 f0       	breq	.+22     	; 0x9a2 <main+0x34e>
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	09 f0       	breq	.+2      	; 0x992 <main+0x33e>
     990:	8a ce       	rjmp	.-748    	; 0x6a6 <main+0x52>
     992:	1c 81       	ldd	r17, Y+4	; 0x04
			case 2:
			{
				unsigned char comma_idx = 0;
				float L_speed = 0;
				float R_speed = 0;
				for(unsigned char i=3; s[i]!= ','; i++){
     994:	1c 32       	cpi	r17, 0x2C	; 44
     996:	41 f5       	brne	.+80     	; 0x9e8 <main+0x394>
     998:	c1 2c       	mov	r12, r1
     99a:	d1 2c       	mov	r13, r1
     99c:	76 01       	movw	r14, r12
     99e:	00 e0       	ldi	r16, 0x00	; 0
     9a0:	62 c0       	rjmp	.+196    	; 0xa66 <main+0x412>
     9a2:	4c 81       	ldd	r20, Y+4	; 0x04
			UART0_GPS_send(s);
		}
		switch(UART0_parsing(s)){
			case 1:
			{
				printf("%d\n", s[3]*100+s[4]*10+s[5]);
     9a4:	2d 81       	ldd	r18, Y+5	; 0x05
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	c9 01       	movw	r24, r18
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	22 0f       	add	r18, r18
     9b0:	33 1f       	adc	r19, r19
     9b2:	22 0f       	add	r18, r18
     9b4:	33 1f       	adc	r19, r19
     9b6:	22 0f       	add	r18, r18
     9b8:	33 1f       	adc	r19, r19
     9ba:	82 0f       	add	r24, r18
     9bc:	93 1f       	adc	r25, r19
     9be:	f4 e6       	ldi	r31, 0x64	; 100
     9c0:	f4 9f       	mul	r31, r20
     9c2:	80 0d       	add	r24, r0
     9c4:	91 1d       	adc	r25, r1
     9c6:	11 24       	eor	r1, r1
     9c8:	2e 81       	ldd	r18, Y+6	; 0x06
     9ca:	82 0f       	add	r24, r18
     9cc:	91 1d       	adc	r25, r1
     9ce:	9f 93       	push	r25
     9d0:	8f 93       	push	r24
     9d2:	80 e4       	ldi	r24, 0x40	; 64
     9d4:	94 e0       	ldi	r25, 0x04	; 4
     9d6:	9f 93       	push	r25
     9d8:	8f 93       	push	r24
     9da:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
     9de:	0f 90       	pop	r0
				break;
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	5f ce       	rjmp	.-834    	; 0x6a6 <main+0x52>
     9e8:	63 e0       	ldi	r22, 0x03	; 3
			case 2:
			{
				unsigned char comma_idx = 0;
				float L_speed = 0;
				float R_speed = 0;
				for(unsigned char i=3; s[i]!= ','; i++){
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	03 e0       	ldi	r16, 0x03	; 3
     9ee:	c1 2c       	mov	r12, r1
     9f0:	d1 2c       	mov	r13, r1
     9f2:	76 01       	movw	r14, r12
     9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <main+0x3a4>
     9f6:	08 2f       	mov	r16, r24
     9f8:	63 50       	subi	r22, 0x03	; 3
					L_speed += (s[i]-'0')*round(pow(10.0, (float)(i-3)));
     9fa:	71 09       	sbc	r23, r1
     9fc:	07 2e       	mov	r0, r23
     9fe:	00 0c       	add	r0, r0
     a00:	88 0b       	sbc	r24, r24
     a02:	99 0b       	sbc	r25, r25
     a04:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     a08:	9b 01       	movw	r18, r22
     a0a:	ac 01       	movw	r20, r24
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	80 e2       	ldi	r24, 0x20	; 32
     a12:	91 e4       	ldi	r25, 0x41	; 65
     a14:	0e 94 20 1b 	call	0x3640	; 0x3640 <pow>
     a18:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <round>
     a1c:	4b 01       	movw	r8, r22
     a1e:	5c 01       	movw	r10, r24
     a20:	61 2f       	mov	r22, r17
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	60 53       	subi	r22, 0x30	; 48
     a26:	71 09       	sbc	r23, r1
     a28:	07 2e       	mov	r0, r23
     a2a:	00 0c       	add	r0, r0
     a2c:	88 0b       	sbc	r24, r24
     a2e:	99 0b       	sbc	r25, r25
     a30:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     a34:	a5 01       	movw	r20, r10
     a36:	94 01       	movw	r18, r8
     a38:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     a3c:	9b 01       	movw	r18, r22
     a3e:	ac 01       	movw	r20, r24
     a40:	c7 01       	movw	r24, r14
     a42:	b6 01       	movw	r22, r12
     a44:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__addsf3>
     a48:	6b 01       	movw	r12, r22
     a4a:	7c 01       	movw	r14, r24
     a4c:	81 e0       	ldi	r24, 0x01	; 1
			case 2:
			{
				unsigned char comma_idx = 0;
				float L_speed = 0;
				float R_speed = 0;
				for(unsigned char i=3; s[i]!= ','; i++){
     a4e:	80 0f       	add	r24, r16
     a50:	68 2f       	mov	r22, r24
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	e1 e0       	ldi	r30, 0x01	; 1
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	ec 0f       	add	r30, r28
     a5a:	fd 1f       	adc	r31, r29
     a5c:	e6 0f       	add	r30, r22
     a5e:	f7 1f       	adc	r31, r23
     a60:	10 81       	ld	r17, Z
     a62:	1c 32       	cpi	r17, 0x2C	; 44
     a64:	41 f6       	brne	.-112    	; 0x9f6 <main+0x3a2>
     a66:	68 94       	set
					L_speed += (s[i]-'0')*round(pow(10.0, (float)(i-3)));
					comma_idx = i;
				}
				for(unsigned char i=comma_idx+2; s[i]!= '*'; i++){
     a68:	22 24       	eor	r2, r2
     a6a:	21 f8       	bld	r2, 1
     a6c:	20 0e       	add	r2, r16
     a6e:	62 2d       	mov	r22, r2
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	e1 e0       	ldi	r30, 0x01	; 1
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	ec 0f       	add	r30, r28
     a78:	fd 1f       	adc	r31, r29
     a7a:	e6 0f       	add	r30, r22
     a7c:	f7 1f       	adc	r31, r23
     a7e:	30 80       	ld	r3, Z
     a80:	fa e2       	ldi	r31, 0x2A	; 42
     a82:	3f 16       	cp	r3, r31
     a84:	f1 f1       	breq	.+124    	; 0xb02 <main+0x4ae>
     a86:	81 2c       	mov	r8, r1
     a88:	91 2c       	mov	r9, r1
     a8a:	54 01       	movw	r10, r8
     a8c:	10 e0       	ldi	r17, 0x00	; 0
					R_speed += (s[i]-'0')*round(pow(10.0, (float)(i-(comma_idx+2))));
     a8e:	0e 5f       	subi	r16, 0xFE	; 254
     a90:	1f 4f       	sbci	r17, 0xFF	; 255
     a92:	60 1b       	sub	r22, r16
     a94:	71 0b       	sbc	r23, r17
     a96:	07 2e       	mov	r0, r23
     a98:	00 0c       	add	r0, r0
     a9a:	88 0b       	sbc	r24, r24
     a9c:	99 0b       	sbc	r25, r25
     a9e:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     aa2:	9b 01       	movw	r18, r22
     aa4:	ac 01       	movw	r20, r24
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	80 e2       	ldi	r24, 0x20	; 32
     aac:	91 e4       	ldi	r25, 0x41	; 65
     aae:	0e 94 20 1b 	call	0x3640	; 0x3640 <pow>
     ab2:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <round>
     ab6:	2b 01       	movw	r4, r22
     ab8:	3c 01       	movw	r6, r24
     aba:	63 2d       	mov	r22, r3
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	60 53       	subi	r22, 0x30	; 48
     ac0:	71 09       	sbc	r23, r1
     ac2:	07 2e       	mov	r0, r23
     ac4:	00 0c       	add	r0, r0
     ac6:	88 0b       	sbc	r24, r24
     ac8:	99 0b       	sbc	r25, r25
     aca:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     ace:	a3 01       	movw	r20, r6
     ad0:	92 01       	movw	r18, r4
     ad2:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     ad6:	9b 01       	movw	r18, r22
     ad8:	ac 01       	movw	r20, r24
     ada:	c5 01       	movw	r24, r10
     adc:	b4 01       	movw	r22, r8
     ade:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__addsf3>
     ae2:	4b 01       	movw	r8, r22
     ae4:	5c 01       	movw	r10, r24
     ae6:	23 94       	inc	r2
				float R_speed = 0;
				for(unsigned char i=3; s[i]!= ','; i++){
					L_speed += (s[i]-'0')*round(pow(10.0, (float)(i-3)));
					comma_idx = i;
				}
				for(unsigned char i=comma_idx+2; s[i]!= '*'; i++){
     ae8:	62 2d       	mov	r22, r2
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	e1 e0       	ldi	r30, 0x01	; 1
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	ec 0f       	add	r30, r28
     af2:	fd 1f       	adc	r31, r29
     af4:	e6 0f       	add	r30, r22
     af6:	f7 1f       	adc	r31, r23
     af8:	30 80       	ld	r3, Z
     afa:	2a e2       	ldi	r18, 0x2A	; 42
     afc:	32 12       	cpse	r3, r18
     afe:	c9 cf       	rjmp	.-110    	; 0xa92 <main+0x43e>
     b00:	03 c0       	rjmp	.+6      	; 0xb08 <main+0x4b4>
     b02:	81 2c       	mov	r8, r1
			}
			case 2:
			{
				unsigned char comma_idx = 0;
				float L_speed = 0;
				float R_speed = 0;
     b04:	91 2c       	mov	r9, r1
     b06:	54 01       	movw	r10, r8
     b08:	c5 01       	movw	r24, r10
					comma_idx = i;
				}
				for(unsigned char i=comma_idx+2; s[i]!= '*'; i++){
					R_speed += (s[i]-'0')*round(pow(10.0, (float)(i-(comma_idx+2))));
				}
				xm430_Goal_velocity_action(0x01, 0x02, (int)L_speed-1024, (int)R_speed-1024);
     b0a:	b4 01       	movw	r22, r8
     b0c:	0e 94 ae 19 	call	0x335c	; 0x335c <__fixsfsi>
     b10:	74 50       	subi	r23, 0x04	; 4
     b12:	4b 01       	movw	r8, r22
     b14:	77 0f       	add	r23, r23
     b16:	aa 08       	sbc	r10, r10
     b18:	bb 08       	sbc	r11, r11
     b1a:	c7 01       	movw	r24, r14
     b1c:	b6 01       	movw	r22, r12
     b1e:	0e 94 ae 19 	call	0x335c	; 0x335c <__fixsfsi>
     b22:	9b 01       	movw	r18, r22
     b24:	34 50       	subi	r19, 0x04	; 4
     b26:	03 2e       	mov	r0, r19
     b28:	00 0c       	add	r0, r0
     b2a:	44 0b       	sbc	r20, r20
     b2c:	55 0b       	sbc	r21, r21
     b2e:	85 01       	movw	r16, r10
     b30:	74 01       	movw	r14, r8
     b32:	62 e0       	ldi	r22, 0x02	; 2
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	0e 94 5d 18 	call	0x30ba	; 0x30ba <xm430_Goal_velocity_action>
     b3a:	b5 cd       	rjmp	.-1174   	; 0x6a6 <main+0x52>

00000b3c <getMres>:
//				printf("%d, %d\n", (int)L_speed-1024, (int)R_speed-1024);
				break;				
			}
		}
	}
     b3c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <Mscale>
int16_t readTempData()
{
	uint8_t rawData[2];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS, TEMP_OUT_H, 2, &rawData[0]);  // Read the two raw data registers sequentially into data array
	return ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a 16-bit value
}
     b40:	88 23       	and	r24, r24
     b42:	19 f0       	breq	.+6      	; 0xb4a <getMres+0xe>
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	71 f0       	breq	.+28     	; 0xb64 <getMres+0x28>
     b48:	08 95       	ret
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	9b ee       	ldi	r25, 0xEB	; 235
     b4e:	af eb       	ldi	r26, 0xBF	; 191
     b50:	b0 e4       	ldi	r27, 0x40	; 64
     b52:	80 93 42 0b 	sts	0x0B42, r24	; 0x800b42 <mRes>
     b56:	90 93 43 0b 	sts	0x0B43, r25	; 0x800b43 <mRes+0x1>
     b5a:	a0 93 44 0b 	sts	0x0B44, r26	; 0x800b44 <mRes+0x2>
     b5e:	b0 93 45 0b 	sts	0x0B45, r27	; 0x800b45 <mRes+0x3>
     b62:	08 95       	ret
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	9b ee       	ldi	r25, 0xEB	; 235
     b68:	af eb       	ldi	r26, 0xBF	; 191
     b6a:	bf e3       	ldi	r27, 0x3F	; 63
     b6c:	80 93 42 0b 	sts	0x0B42, r24	; 0x800b42 <mRes>
     b70:	90 93 43 0b 	sts	0x0B43, r25	; 0x800b43 <mRes+0x1>
     b74:	a0 93 44 0b 	sts	0x0B44, r26	; 0x800b44 <mRes+0x2>
     b78:	b0 93 45 0b 	sts	0x0B45, r27	; 0x800b45 <mRes+0x3>
     b7c:	08 95       	ret

00000b7e <getGres>:
     b7e:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <Gscale>
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	99 f0       	breq	.+38     	; 0xbac <getGres+0x2e>
     b86:	28 f0       	brcs	.+10     	; 0xb92 <getGres+0x14>
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	e9 f0       	breq	.+58     	; 0xbc6 <getGres+0x48>
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	41 f1       	breq	.+80     	; 0xbe0 <getGres+0x62>
     b90:	08 95       	ret
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	aa ef       	ldi	r26, 0xFA	; 250
     b98:	bb e3       	ldi	r27, 0x3B	; 59
     b9a:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <gRes>
     b9e:	90 93 35 0b 	sts	0x0B35, r25	; 0x800b35 <gRes+0x1>
     ba2:	a0 93 36 0b 	sts	0x0B36, r26	; 0x800b36 <gRes+0x2>
     ba6:	b0 93 37 0b 	sts	0x0B37, r27	; 0x800b37 <gRes+0x3>
     baa:	08 95       	ret
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	aa e7       	ldi	r26, 0x7A	; 122
     bb2:	bc e3       	ldi	r27, 0x3C	; 60
     bb4:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <gRes>
     bb8:	90 93 35 0b 	sts	0x0B35, r25	; 0x800b35 <gRes+0x1>
     bbc:	a0 93 36 0b 	sts	0x0B36, r26	; 0x800b36 <gRes+0x2>
     bc0:	b0 93 37 0b 	sts	0x0B37, r27	; 0x800b37 <gRes+0x3>
     bc4:	08 95       	ret
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	aa ef       	ldi	r26, 0xFA	; 250
     bcc:	bc e3       	ldi	r27, 0x3C	; 60
     bce:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <gRes>
     bd2:	90 93 35 0b 	sts	0x0B35, r25	; 0x800b35 <gRes+0x1>
     bd6:	a0 93 36 0b 	sts	0x0B36, r26	; 0x800b36 <gRes+0x2>
     bda:	b0 93 37 0b 	sts	0x0B37, r27	; 0x800b37 <gRes+0x3>
     bde:	08 95       	ret
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	aa e7       	ldi	r26, 0x7A	; 122
     be6:	bd e3       	ldi	r27, 0x3D	; 61
     be8:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <gRes>
     bec:	90 93 35 0b 	sts	0x0B35, r25	; 0x800b35 <gRes+0x1>
     bf0:	a0 93 36 0b 	sts	0x0B36, r26	; 0x800b36 <gRes+0x2>
     bf4:	b0 93 37 0b 	sts	0x0B37, r27	; 0x800b37 <gRes+0x3>
     bf8:	08 95       	ret

00000bfa <getAres>:
     bfa:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <Ascale>
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	99 f0       	breq	.+38     	; 0xc28 <getAres+0x2e>
     c02:	28 f0       	brcs	.+10     	; 0xc0e <getAres+0x14>
     c04:	82 30       	cpi	r24, 0x02	; 2
     c06:	e9 f0       	breq	.+58     	; 0xc42 <getAres+0x48>
     c08:	83 30       	cpi	r24, 0x03	; 3
     c0a:	41 f1       	breq	.+80     	; 0xc5c <getAres+0x62>
     c0c:	08 95       	ret
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	a0 e8       	ldi	r26, 0x80	; 128
     c14:	b8 e3       	ldi	r27, 0x38	; 56
     c16:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <aRes>
     c1a:	90 93 2b 0b 	sts	0x0B2B, r25	; 0x800b2b <aRes+0x1>
     c1e:	a0 93 2c 0b 	sts	0x0B2C, r26	; 0x800b2c <aRes+0x2>
     c22:	b0 93 2d 0b 	sts	0x0B2D, r27	; 0x800b2d <aRes+0x3>
     c26:	08 95       	ret
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b9 e3       	ldi	r27, 0x39	; 57
     c30:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <aRes>
     c34:	90 93 2b 0b 	sts	0x0B2B, r25	; 0x800b2b <aRes+0x1>
     c38:	a0 93 2c 0b 	sts	0x0B2C, r26	; 0x800b2c <aRes+0x2>
     c3c:	b0 93 2d 0b 	sts	0x0B2D, r27	; 0x800b2d <aRes+0x3>
     c40:	08 95       	ret
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	a0 e8       	ldi	r26, 0x80	; 128
     c48:	b9 e3       	ldi	r27, 0x39	; 57
     c4a:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <aRes>
     c4e:	90 93 2b 0b 	sts	0x0B2B, r25	; 0x800b2b <aRes+0x1>
     c52:	a0 93 2c 0b 	sts	0x0B2C, r26	; 0x800b2c <aRes+0x2>
     c56:	b0 93 2d 0b 	sts	0x0B2D, r27	; 0x800b2d <aRes+0x3>
     c5a:	08 95       	ret
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	ba e3       	ldi	r27, 0x3A	; 58
     c64:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <aRes>
     c68:	90 93 2b 0b 	sts	0x0B2B, r25	; 0x800b2b <aRes+0x1>
     c6c:	a0 93 2c 0b 	sts	0x0B2C, r26	; 0x800b2c <aRes+0x2>
     c70:	b0 93 2d 0b 	sts	0x0B2D, r27	; 0x800b2d <aRes+0x3>
     c74:	08 95       	ret

00000c76 <writeByte>:
     c76:	0f 93       	push	r16
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	1f 92       	push	r1
     c7e:	1f 92       	push	r1
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	69 83       	std	Y+1, r22	; 0x01
     c86:	4a 83       	std	Y+2, r20	; 0x02
     c88:	01 e0       	ldi	r16, 0x01	; 1
     c8a:	21 e0       	ldi	r18, 0x01	; 1
     c8c:	42 e0       	ldi	r20, 0x02	; 2
     c8e:	be 01       	movw	r22, r28
     c90:	6f 5f       	subi	r22, 0xFF	; 255
     c92:	7f 4f       	sbci	r23, 0xFF	; 255
     c94:	0e 94 cc 13 	call	0x2798	; 0x2798 <twi_writeTo>
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	0f 91       	pop	r16
     ca2:	08 95       	ret

00000ca4 <readBytes>:
     ca4:	df 92       	push	r13
     ca6:	ef 92       	push	r14
     ca8:	ff 92       	push	r15
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	1f 92       	push	r1
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	18 2f       	mov	r17, r24
     cba:	69 83       	std	Y+1, r22	; 0x01
     cbc:	d4 2e       	mov	r13, r20
     cbe:	79 01       	movw	r14, r18
     cc0:	00 e0       	ldi	r16, 0x00	; 0
     cc2:	21 e0       	ldi	r18, 0x01	; 1
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	be 01       	movw	r22, r28
     cc8:	6f 5f       	subi	r22, 0xFF	; 255
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
     ccc:	0e 94 cc 13 	call	0x2798	; 0x2798 <twi_writeTo>
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	4d 2d       	mov	r20, r13
     cd4:	b7 01       	movw	r22, r14
     cd6:	81 2f       	mov	r24, r17
     cd8:	0e 94 7e 13 	call	0x26fc	; 0x26fc <twi_readFrom>
     cdc:	0f 90       	pop	r0
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	df 90       	pop	r13
     cec:	08 95       	ret

00000cee <readAccelData>:
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <readAccelData+0xa>
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <readAccelData+0xc>
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	8c 01       	movw	r16, r24
     d00:	9e 01       	movw	r18, r28
     d02:	2f 5f       	subi	r18, 0xFF	; 255
     d04:	3f 4f       	sbci	r19, 0xFF	; 255
     d06:	46 e0       	ldi	r20, 0x06	; 6
     d08:	6b e3       	ldi	r22, 0x3B	; 59
     d0a:	88 e6       	ldi	r24, 0x68	; 104
     d0c:	cb df       	rcall	.-106    	; 0xca4 <readBytes>
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	98 2f       	mov	r25, r24
     d14:	88 27       	eor	r24, r24
     d16:	2a 81       	ldd	r18, Y+2	; 0x02
     d18:	82 2b       	or	r24, r18
     d1a:	f8 01       	movw	r30, r16
     d1c:	91 83       	std	Z+1, r25	; 0x01
     d1e:	80 83       	st	Z, r24
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	98 2f       	mov	r25, r24
     d26:	88 27       	eor	r24, r24
     d28:	2c 81       	ldd	r18, Y+4	; 0x04
     d2a:	82 2b       	or	r24, r18
     d2c:	93 83       	std	Z+3, r25	; 0x03
     d2e:	82 83       	std	Z+2, r24	; 0x02
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	98 2f       	mov	r25, r24
     d36:	88 27       	eor	r24, r24
     d38:	2e 81       	ldd	r18, Y+6	; 0x06
     d3a:	82 2b       	or	r24, r18
     d3c:	95 83       	std	Z+5, r25	; 0x05
     d3e:	84 83       	std	Z+4, r24	; 0x04
     d40:	26 96       	adiw	r28, 0x06	; 6
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	08 95       	ret

00000d56 <readGyroData>:
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <readGyroData+0xa>
     d60:	00 d0       	rcall	.+0      	; 0xd62 <readGyroData+0xc>
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	8c 01       	movw	r16, r24
     d68:	9e 01       	movw	r18, r28
     d6a:	2f 5f       	subi	r18, 0xFF	; 255
     d6c:	3f 4f       	sbci	r19, 0xFF	; 255
     d6e:	46 e0       	ldi	r20, 0x06	; 6
     d70:	63 e4       	ldi	r22, 0x43	; 67
     d72:	88 e6       	ldi	r24, 0x68	; 104
     d74:	97 df       	rcall	.-210    	; 0xca4 <readBytes>
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	98 2f       	mov	r25, r24
     d7c:	88 27       	eor	r24, r24
     d7e:	2a 81       	ldd	r18, Y+2	; 0x02
     d80:	82 2b       	or	r24, r18
     d82:	f8 01       	movw	r30, r16
     d84:	91 83       	std	Z+1, r25	; 0x01
     d86:	80 83       	st	Z, r24
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	98 2f       	mov	r25, r24
     d8e:	88 27       	eor	r24, r24
     d90:	2c 81       	ldd	r18, Y+4	; 0x04
     d92:	82 2b       	or	r24, r18
     d94:	93 83       	std	Z+3, r25	; 0x03
     d96:	82 83       	std	Z+2, r24	; 0x02
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	98 2f       	mov	r25, r24
     d9e:	88 27       	eor	r24, r24
     da0:	2e 81       	ldd	r18, Y+6	; 0x06
     da2:	82 2b       	or	r24, r18
     da4:	95 83       	std	Z+5, r25	; 0x05
     da6:	84 83       	std	Z+4, r24	; 0x04
     da8:	26 96       	adiw	r28, 0x06	; 6
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	08 95       	ret

00000dbe <initAK8963>:

void initAK8963(float * destination)
{
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <initAK8963+0xa>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	8c 01       	movw	r16, r24
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	6a e0       	ldi	r22, 0x0A	; 10
     dd2:	8c e0       	ldi	r24, 0x0C	; 12
     dd4:	50 df       	rcall	.-352    	; 0xc76 <writeByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dd6:	83 ec       	ldi	r24, 0xC3	; 195
     dd8:	99 e0       	ldi	r25, 0x09	; 9
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <initAK8963+0x1c>
     dde:	00 c0       	rjmp	.+0      	; 0xde0 <initAK8963+0x22>
     de0:	00 00       	nop
	_delay_ms(10);
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
     de2:	4f e0       	ldi	r20, 0x0F	; 15
     de4:	6a e0       	ldi	r22, 0x0A	; 10
     de6:	8c e0       	ldi	r24, 0x0C	; 12
     de8:	46 df       	rcall	.-372    	; 0xc76 <writeByte>
     dea:	e3 ec       	ldi	r30, 0xC3	; 195
     dec:	f9 e0       	ldi	r31, 0x09	; 9
     dee:	31 97       	sbiw	r30, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <initAK8963+0x30>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <initAK8963+0x36>
     df4:	00 00       	nop
	_delay_ms(10);
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
     df6:	9e 01       	movw	r18, r28
     df8:	2f 5f       	subi	r18, 0xFF	; 255
     dfa:	3f 4f       	sbci	r19, 0xFF	; 255
     dfc:	43 e0       	ldi	r20, 0x03	; 3
     dfe:	60 e1       	ldi	r22, 0x10	; 16
     e00:	8c e0       	ldi	r24, 0x0C	; 12
     e02:	50 df       	rcall	.-352    	; 0xca4 <readBytes>
	destination[0] =  (float)(rawData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
     e04:	69 81       	ldd	r22, Y+1	; 0x01
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	60 58       	subi	r22, 0x80	; 128
     e0a:	71 09       	sbc	r23, r1
     e0c:	07 2e       	mov	r0, r23
     e0e:	00 0c       	add	r0, r0
     e10:	88 0b       	sbc	r24, r24
     e12:	99 0b       	sbc	r25, r25
     e14:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e8       	ldi	r20, 0x80	; 128
     e1e:	5b e3       	ldi	r21, 0x3B	; 59
     e20:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e8       	ldi	r20, 0x80	; 128
     e2a:	5f e3       	ldi	r21, 0x3F	; 63
     e2c:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__addsf3>
     e30:	f8 01       	movw	r30, r16
     e32:	60 83       	st	Z, r22
     e34:	71 83       	std	Z+1, r23	; 0x01
     e36:	82 83       	std	Z+2, r24	; 0x02
     e38:	93 83       	std	Z+3, r25	; 0x03
	destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
     e3a:	6a 81       	ldd	r22, Y+2	; 0x02
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	60 58       	subi	r22, 0x80	; 128
     e40:	71 09       	sbc	r23, r1
     e42:	07 2e       	mov	r0, r23
     e44:	00 0c       	add	r0, r0
     e46:	88 0b       	sbc	r24, r24
     e48:	99 0b       	sbc	r25, r25
     e4a:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e8       	ldi	r20, 0x80	; 128
     e54:	5b e3       	ldi	r21, 0x3B	; 59
     e56:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e8       	ldi	r20, 0x80	; 128
     e60:	5f e3       	ldi	r21, 0x3F	; 63
     e62:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__addsf3>
     e66:	f8 01       	movw	r30, r16
     e68:	64 83       	std	Z+4, r22	; 0x04
     e6a:	75 83       	std	Z+5, r23	; 0x05
     e6c:	86 83       	std	Z+6, r24	; 0x06
     e6e:	97 83       	std	Z+7, r25	; 0x07
	destination[2] =  (float)(rawData[2] - 128)/256. + 1.;
     e70:	6b 81       	ldd	r22, Y+3	; 0x03
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	60 58       	subi	r22, 0x80	; 128
     e76:	71 09       	sbc	r23, r1
     e78:	07 2e       	mov	r0, r23
     e7a:	00 0c       	add	r0, r0
     e7c:	88 0b       	sbc	r24, r24
     e7e:	99 0b       	sbc	r25, r25
     e80:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	5b e3       	ldi	r21, 0x3B	; 59
     e8c:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	40 e8       	ldi	r20, 0x80	; 128
     e96:	5f e3       	ldi	r21, 0x3F	; 63
     e98:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__addsf3>
     e9c:	f8 01       	movw	r30, r16
     e9e:	60 87       	std	Z+8, r22	; 0x08
     ea0:	71 87       	std	Z+9, r23	; 0x09
     ea2:	82 87       	std	Z+10, r24	; 0x0a
     ea4:	93 87       	std	Z+11, r25	; 0x0b
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	6a e0       	ldi	r22, 0x0A	; 10
     eaa:	8c e0       	ldi	r24, 0x0C	; 12
     eac:	e4 de       	rcall	.-568    	; 0xc76 <writeByte>
     eae:	83 ec       	ldi	r24, 0xC3	; 195
     eb0:	99 e0       	ldi	r25, 0x09	; 9
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <initAK8963+0xf4>
     eb6:	00 c0       	rjmp	.+0      	; 0xeb8 <initAK8963+0xfa>
     eb8:	00 00       	nop
	_delay_ms(10);
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
     eba:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <Mscale>
     ebe:	e0 e1       	ldi	r30, 0x10	; 16
     ec0:	8e 9f       	mul	r24, r30
     ec2:	c0 01       	movw	r24, r0
     ec4:	11 24       	eor	r1, r1
     ec6:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <Mmode>
     eca:	48 2b       	or	r20, r24
     ecc:	6a e0       	ldi	r22, 0x0A	; 10
     ece:	8c e0       	ldi	r24, 0x0C	; 12
     ed0:	d2 de       	rcall	.-604    	; 0xc76 <writeByte>
     ed2:	83 ec       	ldi	r24, 0xC3	; 195
     ed4:	99 e0       	ldi	r25, 0x09	; 9
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <initAK8963+0x118>
     eda:	00 c0       	rjmp	.+0      	; 0xedc <initAK8963+0x11e>
     edc:	00 00       	nop
	_delay_ms(10);
}
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	08 95       	ret

00000eee <calibrateMPU9250>:
}

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2)
{
     eee:	2f 92       	push	r2
     ef0:	3f 92       	push	r3
     ef2:	4f 92       	push	r4
     ef4:	5f 92       	push	r5
     ef6:	6f 92       	push	r6
     ef8:	7f 92       	push	r7
     efa:	8f 92       	push	r8
     efc:	9f 92       	push	r9
     efe:	af 92       	push	r10
     f00:	bf 92       	push	r11
     f02:	cf 92       	push	r12
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	ef 97       	sbiw	r28, 0x3f	; 63
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	9d ab       	std	Y+53, r25	; 0x35
     f24:	8c ab       	std	Y+52, r24	; 0x34
     f26:	7f ab       	std	Y+55, r23	; 0x37
     f28:	6e ab       	std	Y+54, r22	; 0x36
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
	
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
     f2a:	40 e8       	ldi	r20, 0x80	; 128
     f2c:	6b e6       	ldi	r22, 0x6B	; 107
     f2e:	88 e6       	ldi	r24, 0x68	; 104
     f30:	a2 de       	rcall	.-700    	; 0xc76 <writeByte>
     f32:	87 ea       	ldi	r24, 0xA7	; 167
     f34:	91 e6       	ldi	r25, 0x61	; 97
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <calibrateMPU9250+0x48>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <calibrateMPU9250+0x4e>
     f3c:	00 00       	nop
	_delay_ms(100);
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	6b e6       	ldi	r22, 0x6B	; 107
     f42:	88 e6       	ldi	r24, 0x68	; 104
     f44:	98 de       	rcall	.-720    	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	6c e6       	ldi	r22, 0x6C	; 108
     f4a:	88 e6       	ldi	r24, 0x68	; 104
     f4c:	94 de       	rcall	.-728    	; 0xc76 <writeByte>
     f4e:	af e4       	ldi	r26, 0x4F	; 79
     f50:	b3 ec       	ldi	r27, 0xC3	; 195
     f52:	11 97       	sbiw	r26, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <calibrateMPU9250+0x64>
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <calibrateMPU9250+0x6a>
     f58:	00 00       	nop
	_delay_ms(200);

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	68 e3       	ldi	r22, 0x38	; 56
     f5e:	88 e6       	ldi	r24, 0x68	; 104
     f60:	8a de       	rcall	.-748    	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	63 e2       	ldi	r22, 0x23	; 35
     f66:	88 e6       	ldi	r24, 0x68	; 104
     f68:	86 de       	rcall	.-756    	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	6b e6       	ldi	r22, 0x6B	; 107
     f6e:	88 e6       	ldi	r24, 0x68	; 104
     f70:	82 de       	rcall	.-764    	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	64 e2       	ldi	r22, 0x24	; 36
     f76:	88 e6       	ldi	r24, 0x68	; 104
     f78:	7e de       	rcall	.-772    	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	6a e6       	ldi	r22, 0x6A	; 106
     f7e:	88 e6       	ldi	r24, 0x68	; 104
     f80:	7a de       	rcall	.-780    	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
     f82:	4c e0       	ldi	r20, 0x0C	; 12
     f84:	6a e6       	ldi	r22, 0x6A	; 106
     f86:	88 e6       	ldi	r24, 0x68	; 104
     f88:	76 de       	rcall	.-788    	; 0xc76 <writeByte>
     f8a:	e5 ea       	ldi	r30, 0xA5	; 165
     f8c:	fe e0       	ldi	r31, 0x0E	; 14
     f8e:	31 97       	sbiw	r30, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <calibrateMPU9250+0xa0>
     f92:	00 c0       	rjmp	.+0      	; 0xf94 <calibrateMPU9250+0xa6>
	_delay_ms(15);
	
	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
     f94:	00 00       	nop
     f96:	41 e0       	ldi	r20, 0x01	; 1
     f98:	6a e1       	ldi	r22, 0x1A	; 26
     f9a:	88 e6       	ldi	r24, 0x68	; 104
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
     f9c:	6c de       	rcall	.-808    	; 0xc76 <writeByte>
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	69 e1       	ldi	r22, 0x19	; 25
     fa2:	88 e6       	ldi	r24, 0x68	; 104
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
     fa4:	68 de       	rcall	.-816    	; 0xc76 <writeByte>
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	6b e1       	ldi	r22, 0x1B	; 27
     faa:	88 e6       	ldi	r24, 0x68	; 104
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
     fac:	64 de       	rcall	.-824    	; 0xc76 <writeByte>
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	6c e1       	ldi	r22, 0x1C	; 28
     fb2:	88 e6       	ldi	r24, 0x68	; 104
     fb4:	60 de       	rcall	.-832    	; 0xc76 <writeByte>
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
     fb6:	40 e4       	ldi	r20, 0x40	; 64
     fb8:	6a e6       	ldi	r22, 0x6A	; 106
     fba:	88 e6       	ldi	r24, 0x68	; 104
     fbc:	5c de       	rcall	.-840    	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
     fbe:	48 e7       	ldi	r20, 0x78	; 120
     fc0:	63 e2       	ldi	r22, 0x23	; 35
     fc2:	88 e6       	ldi	r24, 0x68	; 104
     fc4:	58 de       	rcall	.-848    	; 0xc76 <writeByte>
     fc6:	8f e0       	ldi	r24, 0x0F	; 15
     fc8:	97 e2       	ldi	r25, 0x27	; 39
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <calibrateMPU9250+0xdc>
     fce:	00 c0       	rjmp	.+0      	; 0xfd0 <calibrateMPU9250+0xe2>
     fd0:	00 00       	nop
	_delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	63 e2       	ldi	r22, 0x23	; 35
     fd6:	88 e6       	ldi	r24, 0x68	; 104
     fd8:	4e de       	rcall	.-868    	; 0xc76 <writeByte>
     fda:	9e 01       	movw	r18, r28
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
     fdc:	2f 5f       	subi	r18, 0xFF	; 255
     fde:	3f 4f       	sbci	r19, 0xFF	; 255
     fe0:	42 e0       	ldi	r20, 0x02	; 2
     fe2:	62 e7       	ldi	r22, 0x72	; 114
     fe4:	88 e6       	ldi	r24, 0x68	; 104
     fe6:	5e de       	rcall	.-836    	; 0xca4 <readBytes>
     fe8:	29 81       	ldd	r18, Y+1	; 0x01
     fea:	30 e0       	ldi	r19, 0x00	; 0
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
     fec:	32 2f       	mov	r19, r18
     fee:	22 27       	eor	r18, r18
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2b       	or	r18, r24
     ff4:	ab ea       	ldi	r26, 0xAB	; 171
     ff6:	ba ea       	ldi	r27, 0xAA	; 170
     ff8:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__umulhisi3>
     ffc:	1c 01       	movw	r2, r24
     ffe:	36 94       	lsr	r3
    1000:	27 94       	ror	r2
    1002:	36 94       	lsr	r3
    1004:	27 94       	ror	r2
    1006:	36 94       	lsr	r3
    1008:	27 94       	ror	r2
    100a:	21 14       	cp	r2, r1
    100c:	31 04       	cpc	r3, r1
	
	for (ii = 0; ii < packet_count; ii++) {
    100e:	09 f4       	brne	.+2      	; 0x1012 <calibrateMPU9250+0x124>
    1010:	91 c0       	rjmp	.+290    	; 0x1134 <calibrateMPU9250+0x246>
    1012:	1c 8e       	std	Y+28, r1	; 0x1c
    1014:	1d 8e       	std	Y+29, r1	; 0x1d
    1016:	1e 8e       	std	Y+30, r1	; 0x1e
    1018:	1f 8e       	std	Y+31, r1	; 0x1f
    101a:	18 a2       	std	Y+32, r1	; 0x20
    101c:	19 a2       	std	Y+33, r1	; 0x21
    101e:	1a a2       	std	Y+34, r1	; 0x22
    1020:	1b a2       	std	Y+35, r1	; 0x23
    1022:	1c a2       	std	Y+36, r1	; 0x24
    1024:	1d a2       	std	Y+37, r1	; 0x25
    1026:	1e a2       	std	Y+38, r1	; 0x26
    1028:	1f a2       	std	Y+39, r1	; 0x27
    102a:	41 2c       	mov	r4, r1
    102c:	51 2c       	mov	r5, r1
    102e:	32 01       	movw	r6, r4
    1030:	81 2c       	mov	r8, r1
    1032:	91 2c       	mov	r9, r1
    1034:	54 01       	movw	r10, r8
    1036:	c1 2c       	mov	r12, r1
    1038:	d1 2c       	mov	r13, r1
    103a:	76 01       	movw	r14, r12
    103c:	00 e0       	ldi	r16, 0x00	; 0
    103e:	10 e0       	ldi	r17, 0x00	; 0
    1040:	9e 01       	movw	r18, r28
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
		readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
    1042:	2f 5f       	subi	r18, 0xFF	; 255
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
    1046:	4c e0       	ldi	r20, 0x0C	; 12
    1048:	64 e7       	ldi	r22, 0x74	; 116
    104a:	88 e6       	ldi	r24, 0x68	; 104
    104c:	2b de       	rcall	.-938    	; 0xca4 <readBytes>
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	90 e0       	ldi	r25, 0x00	; 0
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
    1052:	98 2f       	mov	r25, r24
    1054:	88 27       	eor	r24, r24
    1056:	2a 81       	ldd	r18, Y+2	; 0x02
    1058:	82 2b       	or	r24, r18
    105a:	09 2e       	mov	r0, r25
    105c:	00 0c       	add	r0, r0
    105e:	aa 0b       	sbc	r26, r26
    1060:	bb 0b       	sbc	r27, r27
    1062:	48 0e       	add	r4, r24
    1064:	59 1e       	adc	r5, r25
    1066:	6a 1e       	adc	r6, r26
    1068:	7b 1e       	adc	r7, r27
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	90 e0       	ldi	r25, 0x00	; 0
		accel_bias[1] += (int32_t) accel_temp[1];
    106e:	98 2f       	mov	r25, r24
    1070:	88 27       	eor	r24, r24
    1072:	2c 81       	ldd	r18, Y+4	; 0x04
    1074:	82 2b       	or	r24, r18
    1076:	09 2e       	mov	r0, r25
    1078:	00 0c       	add	r0, r0
    107a:	aa 0b       	sbc	r26, r26
    107c:	bb 0b       	sbc	r27, r27
    107e:	88 0e       	add	r8, r24
    1080:	99 1e       	adc	r9, r25
    1082:	aa 1e       	adc	r10, r26
    1084:	bb 1e       	adc	r11, r27
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	90 e0       	ldi	r25, 0x00	; 0
		accel_bias[2] += (int32_t) accel_temp[2];
    108a:	98 2f       	mov	r25, r24
    108c:	88 27       	eor	r24, r24
    108e:	2e 81       	ldd	r18, Y+6	; 0x06
    1090:	82 2b       	or	r24, r18
    1092:	09 2e       	mov	r0, r25
    1094:	00 0c       	add	r0, r0
    1096:	aa 0b       	sbc	r26, r26
    1098:	bb 0b       	sbc	r27, r27
    109a:	c8 0e       	add	r12, r24
    109c:	d9 1e       	adc	r13, r25
    109e:	ea 1e       	adc	r14, r26
    10a0:	fb 1e       	adc	r15, r27
    10a2:	8f 81       	ldd	r24, Y+7	; 0x07
    10a4:	90 e0       	ldi	r25, 0x00	; 0
		gyro_bias[0]  += (int32_t) gyro_temp[0];
    10a6:	98 2f       	mov	r25, r24
    10a8:	88 27       	eor	r24, r24
    10aa:	28 85       	ldd	r18, Y+8	; 0x08
    10ac:	82 2b       	or	r24, r18
    10ae:	09 2e       	mov	r0, r25
    10b0:	00 0c       	add	r0, r0
    10b2:	aa 0b       	sbc	r26, r26
    10b4:	bb 0b       	sbc	r27, r27
    10b6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    10b8:	3d 8d       	ldd	r19, Y+29	; 0x1d
    10ba:	4e 8d       	ldd	r20, Y+30	; 0x1e
    10bc:	5f 8d       	ldd	r21, Y+31	; 0x1f
    10be:	28 0f       	add	r18, r24
    10c0:	39 1f       	adc	r19, r25
    10c2:	4a 1f       	adc	r20, r26
    10c4:	5b 1f       	adc	r21, r27
    10c6:	2c 8f       	std	Y+28, r18	; 0x1c
    10c8:	3d 8f       	std	Y+29, r19	; 0x1d
    10ca:	4e 8f       	std	Y+30, r20	; 0x1e
    10cc:	5f 8f       	std	Y+31, r21	; 0x1f
    10ce:	89 85       	ldd	r24, Y+9	; 0x09
    10d0:	90 e0       	ldi	r25, 0x00	; 0
		gyro_bias[1]  += (int32_t) gyro_temp[1];
    10d2:	98 2f       	mov	r25, r24
    10d4:	88 27       	eor	r24, r24
    10d6:	2a 85       	ldd	r18, Y+10	; 0x0a
    10d8:	82 2b       	or	r24, r18
    10da:	09 2e       	mov	r0, r25
    10dc:	00 0c       	add	r0, r0
    10de:	aa 0b       	sbc	r26, r26
    10e0:	bb 0b       	sbc	r27, r27
    10e2:	28 a1       	ldd	r18, Y+32	; 0x20
    10e4:	39 a1       	ldd	r19, Y+33	; 0x21
    10e6:	4a a1       	ldd	r20, Y+34	; 0x22
    10e8:	5b a1       	ldd	r21, Y+35	; 0x23
    10ea:	28 0f       	add	r18, r24
    10ec:	39 1f       	adc	r19, r25
    10ee:	4a 1f       	adc	r20, r26
    10f0:	5b 1f       	adc	r21, r27
    10f2:	28 a3       	std	Y+32, r18	; 0x20
    10f4:	39 a3       	std	Y+33, r19	; 0x21
    10f6:	4a a3       	std	Y+34, r20	; 0x22
    10f8:	5b a3       	std	Y+35, r21	; 0x23
    10fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    10fc:	90 e0       	ldi	r25, 0x00	; 0
		gyro_bias[2]  += (int32_t) gyro_temp[2];
    10fe:	98 2f       	mov	r25, r24
    1100:	88 27       	eor	r24, r24
    1102:	2c 85       	ldd	r18, Y+12	; 0x0c
    1104:	82 2b       	or	r24, r18
    1106:	09 2e       	mov	r0, r25
    1108:	00 0c       	add	r0, r0
    110a:	aa 0b       	sbc	r26, r26
    110c:	bb 0b       	sbc	r27, r27
    110e:	2c a1       	ldd	r18, Y+36	; 0x24
    1110:	3d a1       	ldd	r19, Y+37	; 0x25
    1112:	4e a1       	ldd	r20, Y+38	; 0x26
    1114:	5f a1       	ldd	r21, Y+39	; 0x27
    1116:	28 0f       	add	r18, r24
    1118:	39 1f       	adc	r19, r25
    111a:	4a 1f       	adc	r20, r26
    111c:	5b 1f       	adc	r21, r27
    111e:	2c a3       	std	Y+36, r18	; 0x24
    1120:	3d a3       	std	Y+37, r19	; 0x25
    1122:	4e a3       	std	Y+38, r20	; 0x26
    1124:	5f a3       	std	Y+39, r21	; 0x27
    1126:	0f 5f       	subi	r16, 0xFF	; 255
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
    112a:	20 16       	cp	r2, r16
    112c:	31 06       	cpc	r3, r17
    112e:	09 f0       	breq	.+2      	; 0x1132 <calibrateMPU9250+0x244>
    1130:	87 cf       	rjmp	.-242    	; 0x1040 <calibrateMPU9250+0x152>
    1132:	15 c0       	rjmp	.+42     	; 0x115e <calibrateMPU9250+0x270>
    1134:	1c 8e       	std	Y+28, r1	; 0x1c
    1136:	1d 8e       	std	Y+29, r1	; 0x1d
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
    1138:	1e 8e       	std	Y+30, r1	; 0x1e
    113a:	1f 8e       	std	Y+31, r1	; 0x1f
    113c:	18 a2       	std	Y+32, r1	; 0x20
    113e:	19 a2       	std	Y+33, r1	; 0x21
    1140:	1a a2       	std	Y+34, r1	; 0x22
    1142:	1b a2       	std	Y+35, r1	; 0x23
    1144:	1c a2       	std	Y+36, r1	; 0x24
    1146:	1d a2       	std	Y+37, r1	; 0x25
    1148:	1e a2       	std	Y+38, r1	; 0x26
    114a:	1f a2       	std	Y+39, r1	; 0x27
    114c:	41 2c       	mov	r4, r1
    114e:	51 2c       	mov	r5, r1
    1150:	32 01       	movw	r6, r4
    1152:	81 2c       	mov	r8, r1
    1154:	91 2c       	mov	r9, r1
    1156:	54 01       	movw	r10, r8
    1158:	c1 2c       	mov	r12, r1
    115a:	d1 2c       	mov	r13, r1
    115c:	76 01       	movw	r14, r12
    115e:	81 01       	movw	r16, r2
    1160:	20 e0       	ldi	r18, 0x00	; 0
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	08 a7       	std	Y+40, r16	; 0x28
    1166:	19 a7       	std	Y+41, r17	; 0x29
    1168:	2a a7       	std	Y+42, r18	; 0x2a
    116a:	3b a7       	std	Y+43, r19	; 0x2b
    116c:	c3 01       	movw	r24, r6
    116e:	b2 01       	movw	r22, r4
    1170:	a9 01       	movw	r20, r18
    1172:	98 01       	movw	r18, r16
    1174:	0e 94 55 20 	call	0x40aa	; 0x40aa <__divmodsi4>
    1178:	2c a7       	std	Y+44, r18	; 0x2c
    117a:	3d a7       	std	Y+45, r19	; 0x2d
    117c:	4e a7       	std	Y+46, r20	; 0x2e
    117e:	5f a7       	std	Y+47, r21	; 0x2f
    1180:	28 af       	std	Y+56, r18	; 0x38
    1182:	39 af       	std	Y+57, r19	; 0x39
    1184:	4a af       	std	Y+58, r20	; 0x3a
    1186:	5b af       	std	Y+59, r21	; 0x3b
    1188:	c5 01       	movw	r24, r10
    118a:	b4 01       	movw	r22, r8
	accel_bias[1] /= (int32_t) packet_count;
    118c:	28 a5       	ldd	r18, Y+40	; 0x28
    118e:	39 a5       	ldd	r19, Y+41	; 0x29
    1190:	4a a5       	ldd	r20, Y+42	; 0x2a
    1192:	5b a5       	ldd	r21, Y+43	; 0x2b
    1194:	0e 94 55 20 	call	0x40aa	; 0x40aa <__divmodsi4>
    1198:	28 ab       	std	Y+48, r18	; 0x30
    119a:	39 ab       	std	Y+49, r19	; 0x31
    119c:	4a ab       	std	Y+50, r20	; 0x32
    119e:	5b ab       	std	Y+51, r21	; 0x33
    11a0:	2c af       	std	Y+60, r18	; 0x3c
    11a2:	3d af       	std	Y+61, r19	; 0x3d
    11a4:	4e af       	std	Y+62, r20	; 0x3e
    11a6:	5f af       	std	Y+63, r21	; 0x3f
    11a8:	c7 01       	movw	r24, r14
    11aa:	b6 01       	movw	r22, r12
	accel_bias[2] /= (int32_t) packet_count;
    11ac:	28 a5       	ldd	r18, Y+40	; 0x28
    11ae:	39 a5       	ldd	r19, Y+41	; 0x29
    11b0:	4a a5       	ldd	r20, Y+42	; 0x2a
    11b2:	5b a5       	ldd	r21, Y+43	; 0x2b
    11b4:	0e 94 55 20 	call	0x40aa	; 0x40aa <__divmodsi4>
    11b8:	69 01       	movw	r12, r18
    11ba:	7a 01       	movw	r14, r20
    11bc:	6c 8d       	ldd	r22, Y+28	; 0x1c
    11be:	7d 8d       	ldd	r23, Y+29	; 0x1d
	gyro_bias[0]  /= (int32_t) packet_count;
    11c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11c4:	28 a5       	ldd	r18, Y+40	; 0x28
    11c6:	39 a5       	ldd	r19, Y+41	; 0x29
    11c8:	4a a5       	ldd	r20, Y+42	; 0x2a
    11ca:	5b a5       	ldd	r21, Y+43	; 0x2b
    11cc:	0e 94 55 20 	call	0x40aa	; 0x40aa <__divmodsi4>
    11d0:	49 01       	movw	r8, r18
    11d2:	5a 01       	movw	r10, r20
    11d4:	68 a1       	ldd	r22, Y+32	; 0x20
    11d6:	79 a1       	ldd	r23, Y+33	; 0x21
	gyro_bias[1]  /= (int32_t) packet_count;
    11d8:	8a a1       	ldd	r24, Y+34	; 0x22
    11da:	9b a1       	ldd	r25, Y+35	; 0x23
    11dc:	28 a5       	ldd	r18, Y+40	; 0x28
    11de:	39 a5       	ldd	r19, Y+41	; 0x29
    11e0:	4a a5       	ldd	r20, Y+42	; 0x2a
    11e2:	5b a5       	ldd	r21, Y+43	; 0x2b
    11e4:	0e 94 55 20 	call	0x40aa	; 0x40aa <__divmodsi4>
    11e8:	29 01       	movw	r4, r18
    11ea:	3a 01       	movw	r6, r20
    11ec:	6c a1       	ldd	r22, Y+36	; 0x24
    11ee:	7d a1       	ldd	r23, Y+37	; 0x25
	gyro_bias[2]  /= (int32_t) packet_count;
    11f0:	8e a1       	ldd	r24, Y+38	; 0x26
    11f2:	9f a1       	ldd	r25, Y+39	; 0x27
    11f4:	28 a5       	ldd	r18, Y+40	; 0x28
    11f6:	39 a5       	ldd	r19, Y+41	; 0x29
    11f8:	4a a5       	ldd	r20, Y+42	; 0x2a
    11fa:	5b a5       	ldd	r21, Y+43	; 0x2b
    11fc:	0e 94 55 20 	call	0x40aa	; 0x40aa <__divmodsi4>
    1200:	2c 8f       	std	Y+28, r18	; 0x1c
    1202:	3d 8f       	std	Y+29, r19	; 0x1d
    1204:	4e 8f       	std	Y+30, r20	; 0x1e
    1206:	5f 8f       	std	Y+31, r21	; 0x1f
    1208:	1c 14       	cp	r1, r12
    120a:	1d 04       	cpc	r1, r13
	
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
    120c:	1e 04       	cpc	r1, r14
    120e:	1f 04       	cpc	r1, r15
    1210:	2c f4       	brge	.+10     	; 0x121c <calibrateMPU9250+0x32e>
    1212:	10 e4       	ldi	r17, 0x40	; 64
    1214:	d1 1a       	sub	r13, r17
    1216:	e1 08       	sbc	r14, r1
    1218:	f1 08       	sbc	r15, r1
    121a:	04 c0       	rjmp	.+8      	; 0x1224 <calibrateMPU9250+0x336>
    121c:	20 e4       	ldi	r18, 0x40	; 64
    121e:	d2 0e       	add	r13, r18
	else {accel_bias[2] += (int32_t) accelsensitivity;}
    1220:	e1 1c       	adc	r14, r1
    1222:	f1 1c       	adc	r15, r1
    1224:	88 27       	eor	r24, r24
    1226:	99 27       	eor	r25, r25
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
    1228:	dc 01       	movw	r26, r24
    122a:	88 19       	sub	r24, r8
    122c:	99 09       	sbc	r25, r9
    122e:	aa 09       	sbc	r26, r10
    1230:	bb 09       	sbc	r27, r11
    1232:	1a f4       	brpl	.+6      	; 0x123a <calibrateMPU9250+0x34c>
    1234:	03 96       	adiw	r24, 0x03	; 3
    1236:	a1 1d       	adc	r26, r1
    1238:	b1 1d       	adc	r27, r1
    123a:	b5 95       	asr	r27
    123c:	a7 95       	ror	r26
    123e:	97 95       	ror	r25
    1240:	87 95       	ror	r24
    1242:	b5 95       	asr	r27
    1244:	a7 95       	ror	r26
    1246:	97 95       	ror	r25
    1248:	87 95       	ror	r24
    124a:	49 2f       	mov	r20, r25
    124c:	5a 2f       	mov	r21, r26
    124e:	6b 2f       	mov	r22, r27
    1250:	77 27       	eor	r23, r23
    1252:	67 fd       	sbrc	r22, 7
    1254:	7a 95       	dec	r23
    1256:	49 83       	std	Y+1, r20	; 0x01
    1258:	8a 83       	std	Y+2, r24	; 0x02
    125a:	88 27       	eor	r24, r24
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
    125c:	99 27       	eor	r25, r25
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
    125e:	dc 01       	movw	r26, r24
    1260:	84 19       	sub	r24, r4
    1262:	95 09       	sbc	r25, r5
    1264:	a6 09       	sbc	r26, r6
    1266:	b7 09       	sbc	r27, r7
    1268:	1a f4       	brpl	.+6      	; 0x1270 <calibrateMPU9250+0x382>
    126a:	03 96       	adiw	r24, 0x03	; 3
    126c:	a1 1d       	adc	r26, r1
    126e:	b1 1d       	adc	r27, r1
    1270:	b5 95       	asr	r27
    1272:	a7 95       	ror	r26
    1274:	97 95       	ror	r25
    1276:	87 95       	ror	r24
    1278:	b5 95       	asr	r27
    127a:	a7 95       	ror	r26
    127c:	97 95       	ror	r25
    127e:	87 95       	ror	r24
    1280:	9b 83       	std	Y+3, r25	; 0x03
    1282:	8c 83       	std	Y+4, r24	; 0x04
    1284:	8c 8d       	ldd	r24, Y+28	; 0x1c
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
    1286:	9d 8d       	ldd	r25, Y+29	; 0x1d
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
    1288:	ae 8d       	ldd	r26, Y+30	; 0x1e
    128a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    128c:	b0 95       	com	r27
    128e:	a0 95       	com	r26
    1290:	90 95       	com	r25
    1292:	81 95       	neg	r24
    1294:	9f 4f       	sbci	r25, 0xFF	; 255
    1296:	af 4f       	sbci	r26, 0xFF	; 255
    1298:	bf 4f       	sbci	r27, 0xFF	; 255
    129a:	1a f4       	brpl	.+6      	; 0x12a2 <calibrateMPU9250+0x3b4>
    129c:	03 96       	adiw	r24, 0x03	; 3
    129e:	a1 1d       	adc	r26, r1
    12a0:	b1 1d       	adc	r27, r1
    12a2:	b5 95       	asr	r27
    12a4:	a7 95       	ror	r26
    12a6:	97 95       	ror	r25
    12a8:	87 95       	ror	r24
    12aa:	b5 95       	asr	r27
    12ac:	a7 95       	ror	r26
    12ae:	97 95       	ror	r25
    12b0:	87 95       	ror	r24
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
    12b2:	9d 83       	std	Y+5, r25	; 0x05
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
    12b4:	8e 83       	std	Y+6, r24	; 0x06
    12b6:	63 e1       	ldi	r22, 0x13	; 19
    12b8:	88 e6       	ldi	r24, 0x68	; 104
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
    12ba:	dd dc       	rcall	.-1606   	; 0xc76 <writeByte>
    12bc:	4a 81       	ldd	r20, Y+2	; 0x02
    12be:	64 e1       	ldi	r22, 0x14	; 20
    12c0:	88 e6       	ldi	r24, 0x68	; 104
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
    12c2:	d9 dc       	rcall	.-1614   	; 0xc76 <writeByte>
    12c4:	4b 81       	ldd	r20, Y+3	; 0x03
    12c6:	65 e1       	ldi	r22, 0x15	; 21
    12c8:	88 e6       	ldi	r24, 0x68	; 104
    12ca:	d5 dc       	rcall	.-1622   	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
    12cc:	4c 81       	ldd	r20, Y+4	; 0x04
    12ce:	66 e1       	ldi	r22, 0x16	; 22
    12d0:	88 e6       	ldi	r24, 0x68	; 104
    12d2:	d1 dc       	rcall	.-1630   	; 0xc76 <writeByte>
    12d4:	4d 81       	ldd	r20, Y+5	; 0x05
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
    12d6:	67 e1       	ldi	r22, 0x17	; 23
    12d8:	88 e6       	ldi	r24, 0x68	; 104
    12da:	cd dc       	rcall	.-1638   	; 0xc76 <writeByte>
    12dc:	4e 81       	ldd	r20, Y+6	; 0x06
    12de:	68 e1       	ldi	r22, 0x18	; 24
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
    12e0:	88 e6       	ldi	r24, 0x68	; 104
    12e2:	c9 dc       	rcall	.-1646   	; 0xc76 <writeByte>
    12e4:	c5 01       	movw	r24, r10
    12e6:	b4 01       	movw	r22, r8
    12e8:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	43 e0       	ldi	r20, 0x03	; 3
    12f2:	53 e4       	ldi	r21, 0x43	; 67
    12f4:	0e 94 46 19 	call	0x328c	; 0x328c <__divsf3>
    12f8:	ac a9       	ldd	r26, Y+52	; 0x34
    12fa:	bd a9       	ldd	r27, Y+53	; 0x35
    12fc:	6d 93       	st	X+, r22
    12fe:	7d 93       	st	X+, r23
    1300:	8d 93       	st	X+, r24
    1302:	9c 93       	st	X, r25
    1304:	13 97       	sbiw	r26, 0x03	; 3
    1306:	c3 01       	movw	r24, r6
    1308:	b2 01       	movw	r22, r4
    130a:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	43 e0       	ldi	r20, 0x03	; 3
    1314:	53 e4       	ldi	r21, 0x43	; 67
    1316:	0e 94 46 19 	call	0x328c	; 0x328c <__divsf3>
    131a:	ec a9       	ldd	r30, Y+52	; 0x34
    131c:	fd a9       	ldd	r31, Y+53	; 0x35
    131e:	64 83       	std	Z+4, r22	; 0x04
    1320:	75 83       	std	Z+5, r23	; 0x05
    1322:	86 83       	std	Z+6, r24	; 0x06
    1324:	97 83       	std	Z+7, r25	; 0x07
    1326:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1328:	7d 8d       	ldd	r23, Y+29	; 0x1d
    132a:	8e 8d       	ldd	r24, Y+30	; 0x1e
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
    132c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    132e:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	43 e0       	ldi	r20, 0x03	; 3
    1338:	53 e4       	ldi	r21, 0x43	; 67
    133a:	0e 94 46 19 	call	0x328c	; 0x328c <__divsf3>
    133e:	ac a9       	ldd	r26, Y+52	; 0x34
    1340:	bd a9       	ldd	r27, Y+53	; 0x35
    1342:	18 96       	adiw	r26, 0x08	; 8
    1344:	6d 93       	st	X+, r22
    1346:	7d 93       	st	X+, r23
    1348:	8d 93       	st	X+, r24
    134a:	9c 93       	st	X, r25
    134c:	1b 97       	sbiw	r26, 0x0b	; 11
    134e:	9e 01       	movw	r18, r28
    1350:	2f 5f       	subi	r18, 0xFF	; 255
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	42 e0       	ldi	r20, 0x02	; 2
    1356:	67 e7       	ldi	r22, 0x77	; 119
    1358:	88 e6       	ldi	r24, 0x68	; 104
    135a:	a4 dc       	rcall	.-1720   	; 0xca4 <readBytes>
    135c:	49 80       	ldd	r4, Y+1	; 0x01
    135e:	51 2c       	mov	r5, r1
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
    1360:	54 2c       	mov	r5, r4
    1362:	44 24       	eor	r4, r4
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	48 2a       	or	r4, r24
    1368:	05 2c       	mov	r0, r5
    136a:	00 0c       	add	r0, r0
    136c:	66 08       	sbc	r6, r6
    136e:	77 08       	sbc	r7, r7
    1370:	4d 86       	std	Y+13, r4	; 0x0d
    1372:	5e 86       	std	Y+14, r5	; 0x0e
    1374:	6f 86       	std	Y+15, r6	; 0x0f
    1376:	78 8a       	std	Y+16, r7	; 0x10
    1378:	9e 01       	movw	r18, r28
    137a:	2f 5f       	subi	r18, 0xFF	; 255
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
    137c:	3f 4f       	sbci	r19, 0xFF	; 255
    137e:	42 e0       	ldi	r20, 0x02	; 2
    1380:	6a e7       	ldi	r22, 0x7A	; 122
    1382:	88 e6       	ldi	r24, 0x68	; 104
    1384:	8f dc       	rcall	.-1762   	; 0xca4 <readBytes>
    1386:	89 80       	ldd	r8, Y+1	; 0x01
    1388:	91 2c       	mov	r9, r1
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
    138a:	98 2c       	mov	r9, r8
    138c:	88 24       	eor	r8, r8
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	88 2a       	or	r8, r24
    1392:	09 2c       	mov	r0, r9
    1394:	00 0c       	add	r0, r0
    1396:	aa 08       	sbc	r10, r10
    1398:	bb 08       	sbc	r11, r11
    139a:	89 8a       	std	Y+17, r8	; 0x11
    139c:	9a 8a       	std	Y+18, r9	; 0x12
    139e:	ab 8a       	std	Y+19, r10	; 0x13
    13a0:	bc 8a       	std	Y+20, r11	; 0x14
    13a2:	9e 01       	movw	r18, r28
    13a4:	2f 5f       	subi	r18, 0xFF	; 255
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
    13a6:	3f 4f       	sbci	r19, 0xFF	; 255
    13a8:	42 e0       	ldi	r20, 0x02	; 2
    13aa:	6d e7       	ldi	r22, 0x7D	; 125
    13ac:	88 e6       	ldi	r24, 0x68	; 104
    13ae:	7a dc       	rcall	.-1804   	; 0xca4 <readBytes>
    13b0:	49 81       	ldd	r20, Y+1	; 0x01
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	54 2f       	mov	r21, r20
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
    13b6:	44 27       	eor	r20, r20
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	48 2b       	or	r20, r24
    13bc:	05 2e       	mov	r0, r21
    13be:	00 0c       	add	r0, r0
    13c0:	66 0b       	sbc	r22, r22
    13c2:	77 0b       	sbc	r23, r23
    13c4:	4d 8b       	std	Y+21, r20	; 0x15
    13c6:	5e 8b       	std	Y+22, r21	; 0x16
    13c8:	6f 8b       	std	Y+23, r22	; 0x17
    13ca:	78 8f       	std	Y+24, r23	; 0x18
    13cc:	19 8e       	std	Y+25, r1	; 0x19
    13ce:	1a 8e       	std	Y+26, r1	; 0x1a
    13d0:	1b 8e       	std	Y+27, r1	; 0x1b
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
    13d2:	fe 01       	movw	r30, r28
    13d4:	3d 96       	adiw	r30, 0x0d	; 13
    13d6:	de 01       	movw	r26, r28
    13d8:	59 96       	adiw	r26, 0x19	; 25
    13da:	cd 01       	movw	r24, r26
    13dc:	33 24       	eor	r3, r3
    13de:	33 94       	inc	r3
    13e0:	01 91       	ld	r16, Z+
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
    13e2:	11 91       	ld	r17, Z+
    13e4:	21 91       	ld	r18, Z+
    13e6:	31 91       	ld	r19, Z+
    13e8:	00 fd       	sbrc	r16, 0
    13ea:	3c 92       	st	X, r3
    13ec:	11 96       	adiw	r26, 0x01	; 1
    13ee:	e8 17       	cp	r30, r24
    13f0:	f9 07       	cpc	r31, r25
    13f2:	b1 f7       	brne	.-20     	; 0x13e0 <calibrateMPU9250+0x4f2>
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
    13f4:	8c a5       	ldd	r24, Y+44	; 0x2c
    13f6:	9d a5       	ldd	r25, Y+45	; 0x2d
    13f8:	ae a5       	ldd	r26, Y+46	; 0x2e
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
    13fa:	bf a5       	ldd	r27, Y+47	; 0x2f
    13fc:	08 ad       	ldd	r16, Y+56	; 0x38
    13fe:	19 ad       	ldd	r17, Y+57	; 0x39
    1400:	2a ad       	ldd	r18, Y+58	; 0x3a
    1402:	3b ad       	ldd	r19, Y+59	; 0x3b
    1404:	33 23       	and	r19, r19
    1406:	1c f4       	brge	.+6      	; 0x140e <calibrateMPU9250+0x520>
    1408:	07 96       	adiw	r24, 0x07	; 7
    140a:	a1 1d       	adc	r26, r1
    140c:	b1 1d       	adc	r27, r1
    140e:	68 94       	set
    1410:	12 f8       	bld	r1, 2
    1412:	b5 95       	asr	r27
    1414:	a7 95       	ror	r26
    1416:	97 95       	ror	r25
    1418:	87 95       	ror	r24
    141a:	16 94       	lsr	r1
    141c:	d1 f7       	brne	.-12     	; 0x1412 <calibrateMPU9250+0x524>
    141e:	48 1a       	sub	r4, r24
    1420:	59 0a       	sbc	r5, r25
    1422:	6a 0a       	sbc	r6, r26
    1424:	7b 0a       	sbc	r7, r27
    1426:	88 a9       	ldd	r24, Y+48	; 0x30
    1428:	99 a9       	ldd	r25, Y+49	; 0x31
    142a:	aa a9       	ldd	r26, Y+50	; 0x32
	accel_bias_reg[1] -= (accel_bias[1]/8);
    142c:	bb a9       	ldd	r27, Y+51	; 0x33
    142e:	0c ad       	ldd	r16, Y+60	; 0x3c
    1430:	1d ad       	ldd	r17, Y+61	; 0x3d
    1432:	2e ad       	ldd	r18, Y+62	; 0x3e
    1434:	3f ad       	ldd	r19, Y+63	; 0x3f
    1436:	33 23       	and	r19, r19
    1438:	1c f4       	brge	.+6      	; 0x1440 <calibrateMPU9250+0x552>
    143a:	07 96       	adiw	r24, 0x07	; 7
    143c:	a1 1d       	adc	r26, r1
    143e:	b1 1d       	adc	r27, r1
    1440:	68 94       	set
    1442:	12 f8       	bld	r1, 2
    1444:	b5 95       	asr	r27
    1446:	a7 95       	ror	r26
    1448:	97 95       	ror	r25
    144a:	87 95       	ror	r24
    144c:	16 94       	lsr	r1
    144e:	d1 f7       	brne	.-12     	; 0x1444 <calibrateMPU9250+0x556>
    1450:	88 1a       	sub	r8, r24
    1452:	99 0a       	sbc	r9, r25
    1454:	aa 0a       	sbc	r10, r26
    1456:	bb 0a       	sbc	r11, r27
    1458:	d7 01       	movw	r26, r14
    145a:	c6 01       	movw	r24, r12
    145c:	ff 20       	and	r15, r15
	accel_bias_reg[2] -= (accel_bias[2]/8);
    145e:	1c f4       	brge	.+6      	; 0x1466 <calibrateMPU9250+0x578>
    1460:	07 96       	adiw	r24, 0x07	; 7
    1462:	a1 1d       	adc	r26, r1
    1464:	b1 1d       	adc	r27, r1
    1466:	68 94       	set
    1468:	12 f8       	bld	r1, 2
    146a:	b5 95       	asr	r27
    146c:	a7 95       	ror	r26
    146e:	97 95       	ror	r25
    1470:	87 95       	ror	r24
    1472:	16 94       	lsr	r1
    1474:	d1 f7       	brne	.-12     	; 0x146a <calibrateMPU9250+0x57c>
    1476:	8a 01       	movw	r16, r20
    1478:	9b 01       	movw	r18, r22
    147a:	08 1b       	sub	r16, r24
    147c:	19 0b       	sbc	r17, r25
    147e:	2a 0b       	sbc	r18, r26
    1480:	3b 0b       	sbc	r19, r27
    1482:	d9 01       	movw	r26, r18
    1484:	c8 01       	movw	r24, r16
    1486:	77 27       	eor	r23, r23
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
    1488:	77 fc       	sbrc	r7, 7
    148a:	7a 95       	dec	r23
    148c:	67 2d       	mov	r22, r7
    148e:	56 2d       	mov	r21, r6
    1490:	45 2d       	mov	r20, r5
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
    1492:	49 83       	std	Y+1, r20	; 0x01
    1494:	29 8d       	ldd	r18, Y+25	; 0x19
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
    1496:	42 2a       	or	r4, r18
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
    1498:	4a 82       	std	Y+2, r4	; 0x02
    149a:	9b 82       	std	Y+3, r9	; 0x03
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
    149c:	2a 8d       	ldd	r18, Y+26	; 0x1a
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
    149e:	82 2a       	or	r8, r18
    14a0:	8c 82       	std	Y+4, r8	; 0x04
    14a2:	9d 83       	std	Y+5, r25	; 0x05
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
    14a4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    14a6:	82 2b       	or	r24, r18
    14a8:	8e 83       	std	Y+6, r24	; 0x06
    14aa:	67 e7       	ldi	r22, 0x77	; 119
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
    14ac:	88 e6       	ldi	r24, 0x68	; 104
    14ae:	e3 db       	rcall	.-2106   	; 0xc76 <writeByte>
    14b0:	4a 81       	ldd	r20, Y+2	; 0x02
    14b2:	68 e7       	ldi	r22, 0x78	; 120
    14b4:	88 e6       	ldi	r24, 0x68	; 104
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
    14b6:	df db       	rcall	.-2114   	; 0xc76 <writeByte>
    14b8:	4b 81       	ldd	r20, Y+3	; 0x03
    14ba:	6a e7       	ldi	r22, 0x7A	; 122
    14bc:	88 e6       	ldi	r24, 0x68	; 104
    14be:	db db       	rcall	.-2122   	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
    14c0:	4c 81       	ldd	r20, Y+4	; 0x04
    14c2:	6b e7       	ldi	r22, 0x7B	; 123
    14c4:	88 e6       	ldi	r24, 0x68	; 104
    14c6:	d7 db       	rcall	.-2130   	; 0xc76 <writeByte>
    14c8:	4d 81       	ldd	r20, Y+5	; 0x05
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
    14ca:	6d e7       	ldi	r22, 0x7D	; 125
    14cc:	88 e6       	ldi	r24, 0x68	; 104
    14ce:	d3 db       	rcall	.-2138   	; 0xc76 <writeByte>
    14d0:	4e 81       	ldd	r20, Y+6	; 0x06
    14d2:	6e e7       	ldi	r22, 0x7E	; 126
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
    14d4:	88 e6       	ldi	r24, 0x68	; 104
    14d6:	cf db       	rcall	.-2146   	; 0xc76 <writeByte>
    14d8:	6c a5       	ldd	r22, Y+44	; 0x2c
    14da:	7d a5       	ldd	r23, Y+45	; 0x2d
    14dc:	8e a5       	ldd	r24, Y+46	; 0x2e

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
    14de:	9f a5       	ldd	r25, Y+47	; 0x2f
    14e0:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	58 e3       	ldi	r21, 0x38	; 56
    14ec:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    14f0:	ae a9       	ldd	r26, Y+54	; 0x36
    14f2:	bf a9       	ldd	r27, Y+55	; 0x37
    14f4:	6d 93       	st	X+, r22
    14f6:	7d 93       	st	X+, r23
    14f8:	8d 93       	st	X+, r24
    14fa:	9c 93       	st	X, r25
    14fc:	13 97       	sbiw	r26, 0x03	; 3
    14fe:	68 a9       	ldd	r22, Y+48	; 0x30
    1500:	79 a9       	ldd	r23, Y+49	; 0x31
    1502:	8a a9       	ldd	r24, Y+50	; 0x32
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
    1504:	9b a9       	ldd	r25, Y+51	; 0x33
    1506:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e8       	ldi	r20, 0x80	; 128
    1510:	58 e3       	ldi	r21, 0x38	; 56
    1512:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1516:	ee a9       	ldd	r30, Y+54	; 0x36
    1518:	ff a9       	ldd	r31, Y+55	; 0x37
    151a:	64 83       	std	Z+4, r22	; 0x04
    151c:	75 83       	std	Z+5, r23	; 0x05
    151e:	86 83       	std	Z+6, r24	; 0x06
    1520:	97 83       	std	Z+7, r25	; 0x07
    1522:	c7 01       	movw	r24, r14
    1524:	b6 01       	movw	r22, r12
    1526:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e8       	ldi	r20, 0x80	; 128
    1530:	58 e3       	ldi	r21, 0x38	; 56
    1532:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1536:	ae a9       	ldd	r26, Y+54	; 0x36
    1538:	bf a9       	ldd	r27, Y+55	; 0x37
    153a:	18 96       	adiw	r26, 0x08	; 8
    153c:	6d 93       	st	X+, r22
    153e:	7d 93       	st	X+, r23
    1540:	8d 93       	st	X+, r24
    1542:	9c 93       	st	X, r25
    1544:	1b 97       	sbiw	r26, 0x0b	; 11
    1546:	ef 96       	adiw	r28, 0x3f	; 63
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
	

}
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	df 90       	pop	r13
    1560:	cf 90       	pop	r12
    1562:	bf 90       	pop	r11
    1564:	af 90       	pop	r10
    1566:	9f 90       	pop	r9
    1568:	8f 90       	pop	r8
    156a:	7f 90       	pop	r7
    156c:	6f 90       	pop	r6
    156e:	5f 90       	pop	r5
    1570:	4f 90       	pop	r4
    1572:	3f 90       	pop	r3
    1574:	2f 90       	pop	r2
    1576:	08 95       	ret

00001578 <readByte>:
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	1f 92       	push	r1


/*+++++++++++++++++++++++++++++++++++++++++ READ from Device ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

uint8_t readByte(uint8_t address, uint8_t subAddress)
{
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	#ifdef byteWrite_DEBUG
	printf("Begin of readByte()\n\r");
	#endif
	uint8_t ui8_data; // `data` will store the register data

	readBytes(address, subAddress, 1, &ui8_data);
    1582:	9e 01       	movw	r18, r28
    1584:	2f 5f       	subi	r18, 0xFF	; 255
    1586:	3f 4f       	sbci	r19, 0xFF	; 255
    1588:	41 e0       	ldi	r20, 0x01	; 1
    158a:	8c db       	rcall	.-2280   	; 0xca4 <readBytes>

	return ui8_data;                             // Return data read from slave register
}
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	0f 90       	pop	r0
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	08 95       	ret

00001596 <initMPU9250>:
	_delay_ms(10);
}


void initMPU9250()
{
    1596:	cf 93       	push	r28
	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	6b e6       	ldi	r22, 0x6B	; 107
    159c:	88 e6       	ldi	r24, 0x68	; 104
    159e:	6b db       	rcall	.-2346   	; 0xc76 <writeByte>
    15a0:	87 ea       	ldi	r24, 0xA7	; 167
    15a2:	91 e6       	ldi	r25, 0x61	; 97
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <initMPU9250+0xe>
    15a8:	00 c0       	rjmp	.+0      	; 0x15aa <initMPU9250+0x14>
    15aa:	00 00       	nop
	_delay_ms(100); // Wait for all registers to reset

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
    15ac:	41 e0       	ldi	r20, 0x01	; 1
    15ae:	6b e6       	ldi	r22, 0x6B	; 107
    15b0:	88 e6       	ldi	r24, 0x68	; 104
    15b2:	61 db       	rcall	.-2366   	; 0xc76 <writeByte>
    15b4:	8f e4       	ldi	r24, 0x4F	; 79
    15b6:	93 ec       	ldi	r25, 0xC3	; 195
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	f1 f7       	brne	.-4      	; 0x15b8 <initMPU9250+0x22>
    15bc:	00 c0       	rjmp	.+0      	; 0x15be <initMPU9250+0x28>
    15be:	00 00       	nop
	// Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively;
	// minimum _delay_ms time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
    15c0:	43 e0       	ldi	r20, 0x03	; 3
    15c2:	6a e1       	ldi	r22, 0x1A	; 26
    15c4:	88 e6       	ldi	r24, 0x68	; 104
    15c6:	57 db       	rcall	.-2386   	; 0xc76 <writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; a rate consistent with the filter update rate
    15c8:	44 e0       	ldi	r20, 0x04	; 4
    15ca:	69 e1       	ldi	r22, 0x19	; 25
    15cc:	88 e6       	ldi	r24, 0x68	; 104
	// determined inset in CONFIG above
	
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG);
    15ce:	53 db       	rcall	.-2394   	; 0xc76 <writeByte>
    15d0:	6b e1       	ldi	r22, 0x1B	; 27
    15d2:	88 e6       	ldi	r24, 0x68	; 104
    15d4:	d1 df       	rcall	.-94     	; 0x1578 <readByte>
	//  writeRegister(GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c & ~0x02); // Clear Fchoice bits [1:0]
    15d6:	c8 2f       	mov	r28, r24
    15d8:	48 2f       	mov	r20, r24
    15da:	4d 7f       	andi	r20, 0xFD	; 253
    15dc:	6b e1       	ldi	r22, 0x1B	; 27
    15de:	88 e6       	ldi	r24, 0x68	; 104
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
    15e0:	4a db       	rcall	.-2412   	; 0xc76 <writeByte>
    15e2:	4c 2f       	mov	r20, r28
    15e4:	47 7e       	andi	r20, 0xE7	; 231
    15e6:	6b e1       	ldi	r22, 0x1B	; 27
    15e8:	88 e6       	ldi	r24, 0x68	; 104
    15ea:	45 db       	rcall	.-2422   	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
    15ec:	40 91 6d 09 	lds	r20, 0x096D	; 0x80096d <Gscale>
    15f0:	44 0f       	add	r20, r20
    15f2:	44 0f       	add	r20, r20
    15f4:	44 0f       	add	r20, r20
    15f6:	4c 2b       	or	r20, r28
    15f8:	6b e1       	ldi	r22, 0x1B	; 27
    15fa:	88 e6       	ldi	r24, 0x68	; 104
	// writeRegister(GYRO_CONFIG, c | 0x00); // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	
	// Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG);
    15fc:	3c db       	rcall	.-2440   	; 0xc76 <writeByte>
    15fe:	6c e1       	ldi	r22, 0x1C	; 28
    1600:	88 e6       	ldi	r24, 0x68	; 104
    1602:	ba df       	rcall	.-140    	; 0x1578 <readByte>
	//  writeRegister(ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
    1604:	c8 2f       	mov	r28, r24
    1606:	48 2f       	mov	r20, r24
    1608:	47 7e       	andi	r20, 0xE7	; 231
    160a:	6c e1       	ldi	r22, 0x1C	; 28
    160c:	88 e6       	ldi	r24, 0x68	; 104
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
    160e:	33 db       	rcall	.-2458   	; 0xc76 <writeByte>
    1610:	40 91 6c 09 	lds	r20, 0x096C	; 0x80096c <Ascale>
    1614:	44 0f       	add	r20, r20
    1616:	44 0f       	add	r20, r20
    1618:	44 0f       	add	r20, r20
    161a:	4c 2b       	or	r20, r28
    161c:	6c e1       	ldi	r22, 0x1C	; 28

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2);
    161e:	88 e6       	ldi	r24, 0x68	; 104
    1620:	2a db       	rcall	.-2476   	; 0xc76 <writeByte>
    1622:	6d e1       	ldi	r22, 0x1D	; 29
    1624:	88 e6       	ldi	r24, 0x68	; 104
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
    1626:	a8 df       	rcall	.-176    	; 0x1578 <readByte>
    1628:	c8 2f       	mov	r28, r24
    162a:	48 2f       	mov	r20, r24
    162c:	40 7f       	andi	r20, 0xF0	; 240
    162e:	6d e1       	ldi	r22, 0x1D	; 29
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
    1630:	88 e6       	ldi	r24, 0x68	; 104
    1632:	21 db       	rcall	.-2494   	; 0xc76 <writeByte>
    1634:	4c 2f       	mov	r20, r28
    1636:	43 60       	ori	r20, 0x03	; 3
    1638:	6d e1       	ldi	r22, 0x1D	; 29
    163a:	88 e6       	ldi	r24, 0x68	; 104

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
	// clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
    163c:	1c db       	rcall	.-2504   	; 0xc76 <writeByte>
    163e:	42 e2       	ldi	r20, 0x22	; 34
    1640:	67 e3       	ldi	r22, 0x37	; 55
    1642:	88 e6       	ldi	r24, 0x68	; 104
    1644:	18 db       	rcall	.-2512   	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
    1646:	41 e0       	ldi	r20, 0x01	; 1
    1648:	68 e3       	ldi	r22, 0x38	; 56
    164a:	88 e6       	ldi	r24, 0x68	; 104
    164c:	14 db       	rcall	.-2520   	; 0xc76 <writeByte>
    164e:	87 ea       	ldi	r24, 0xA7	; 167
    1650:	91 e6       	ldi	r25, 0x61	; 97
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <initMPU9250+0xbc>
    1656:	00 c0       	rjmp	.+0      	; 0x1658 <initMPU9250+0xc2>
    1658:	00 00       	nop
    165a:	cf 91       	pop	r28
	_delay_ms(100);
}
    165c:	08 95       	ret

0000165e <readMagData>:
    165e:	0f 93       	push	r16
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
}

void readMagData(int16_t * destination)
{
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	27 97       	sbiw	r28, 0x07	; 7
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	8c 01       	movw	r16, r24
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	//if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
	while(!(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01))
    1678:	62 e0       	ldi	r22, 0x02	; 2
    167a:	8c e0       	ldi	r24, 0x0C	; 12
    167c:	7d df       	rcall	.-262    	; 0x1578 <readByte>
    167e:	80 ff       	sbrs	r24, 0
    1680:	fb cf       	rjmp	.-10     	; 0x1678 <readMagData+0x1a>
		printf("End of readBytes()\n\r");
		#endif
	}
	
	//{ // wait for magnetometer data ready bit to be set
	readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
    1682:	9e 01       	movw	r18, r28
    1684:	2f 5f       	subi	r18, 0xFF	; 255
    1686:	3f 4f       	sbci	r19, 0xFF	; 255
    1688:	47 e0       	ldi	r20, 0x07	; 7
    168a:	63 e0       	ldi	r22, 0x03	; 3
    168c:	8c e0       	ldi	r24, 0x0C	; 12
    168e:	0a db       	rcall	.-2540   	; 0xca4 <readBytes>
	
	uint8_t c = rawData[6]; // End data read by reading ST2 register
	if(!(c & 0x08))
    1690:	8f 81       	ldd	r24, Y+7	; 0x07
    1692:	83 fd       	sbrc	r24, 3
    1694:	19 c0       	rjmp	.+50     	; 0x16c8 <readMagData+0x6a>
	{ // Check if magnetic sensor overflow set, if not then report data
		destination[0] = ((int16_t)rawData[1] << 8) | rawData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	98 2f       	mov	r25, r24
    169c:	88 27       	eor	r24, r24
    169e:	29 81       	ldd	r18, Y+1	; 0x01
    16a0:	82 2b       	or	r24, r18
    16a2:	f8 01       	movw	r30, r16
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	80 83       	st	Z, r24
		destination[1] = ((int16_t)rawData[3] << 8) | rawData[2] ;  // Data stored as little Endian
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	98 2f       	mov	r25, r24
    16ae:	88 27       	eor	r24, r24
    16b0:	2b 81       	ldd	r18, Y+3	; 0x03
    16b2:	82 2b       	or	r24, r18
    16b4:	93 83       	std	Z+3, r25	; 0x03
    16b6:	82 83       	std	Z+2, r24	; 0x02
		destination[2] = ((int16_t)rawData[5] << 8) | rawData[4] ;
    16b8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	98 2f       	mov	r25, r24
    16be:	88 27       	eor	r24, r24
    16c0:	2d 81       	ldd	r18, Y+5	; 0x05
    16c2:	82 2b       	or	r24, r18
    16c4:	95 83       	std	Z+5, r25	; 0x05
    16c6:	84 83       	std	Z+4, r24	; 0x04
	}
	//}
}
    16c8:	27 96       	adiw	r28, 0x07	; 7
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	08 95       	ret

000016de <MPU9250SelfTest>:
}


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
    16de:	2f 92       	push	r2
    16e0:	3f 92       	push	r3
    16e2:	4f 92       	push	r4
    16e4:	5f 92       	push	r5
    16e6:	6f 92       	push	r6
    16e8:	7f 92       	push	r7
    16ea:	8f 92       	push	r8
    16ec:	9f 92       	push	r9
    16ee:	af 92       	push	r10
    16f0:	bf 92       	push	r11
    16f2:	cf 92       	push	r12
    16f4:	df 92       	push	r13
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	c0 54       	subi	r28, 0x40	; 64
    1708:	d1 09       	sbc	r29, r1
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	78 2e       	mov	r7, r24
    1716:	69 2e       	mov	r6, r25
	uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
    1718:	fe 01       	movw	r30, r28
    171a:	31 96       	adiw	r30, 0x01	; 1
    171c:	86 e0       	ldi	r24, 0x06	; 6
    171e:	df 01       	movw	r26, r30
    1720:	1d 92       	st	X+, r1
    1722:	8a 95       	dec	r24
    1724:	e9 f7       	brne	.-6      	; 0x1720 <MPU9250SelfTest+0x42>
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);    // Set gyro sample rate to 1 kHz
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	69 e1       	ldi	r22, 0x19	; 25
    172a:	88 e6       	ldi	r24, 0x68	; 104
    172c:	a4 da       	rcall	.-2744   	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
    172e:	42 e0       	ldi	r20, 0x02	; 2
    1730:	6a e1       	ldi	r22, 0x1A	; 26
    1732:	88 e6       	ldi	r24, 0x68	; 104
    1734:	a0 da       	rcall	.-2752   	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 1<<FS);  // Set full scale range for the gyro to 250 dps
    1736:	41 e0       	ldi	r20, 0x01	; 1
    1738:	6b e1       	ldi	r22, 0x1B	; 27
    173a:	88 e6       	ldi	r24, 0x68	; 104
    173c:	9c da       	rcall	.-2760   	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
    173e:	42 e0       	ldi	r20, 0x02	; 2
    1740:	6d e1       	ldi	r22, 0x1D	; 29
    1742:	88 e6       	ldi	r24, 0x68	; 104
    1744:	98 da       	rcall	.-2768   	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1<<FS); // Set full scale range for the accelerometer to 2 g
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	6c e1       	ldi	r22, 0x1C	; 28
    174a:	88 e6       	ldi	r24, 0x68	; 104
    174c:	94 da       	rcall	.-2776   	; 0xc76 <writeByte>
    174e:	08 ec       	ldi	r16, 0xC8	; 200
    1750:	10 e0       	ldi	r17, 0x00	; 0
    1752:	9e 01       	movw	r18, r28

	for( int ii = 0; ii < 200; ii++)
	{  // get average current values of gyro and acclerometer
		
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    1754:	2f 5f       	subi	r18, 0xFF	; 255
    1756:	3f 4f       	sbci	r19, 0xFF	; 255
    1758:	46 e0       	ldi	r20, 0x06	; 6
    175a:	6b e3       	ldi	r22, 0x3B	; 59
    175c:	88 e6       	ldi	r24, 0x68	; 104
    175e:	a2 da       	rcall	.-2748   	; 0xca4 <readBytes>
    1760:	89 81       	ldd	r24, Y+1	; 0x01
		aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	98 2f       	mov	r25, r24
    1766:	88 27       	eor	r24, r24
    1768:	2a 81       	ldd	r18, Y+2	; 0x02
    176a:	82 2b       	or	r24, r18
    176c:	2b 89       	ldd	r18, Y+19	; 0x13
    176e:	3c 89       	ldd	r19, Y+20	; 0x14
    1770:	82 0f       	add	r24, r18
    1772:	93 1f       	adc	r25, r19
    1774:	9c 8b       	std	Y+20, r25	; 0x14
    1776:	8b 8b       	std	Y+19, r24	; 0x13
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
		aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	98 2f       	mov	r25, r24
    177e:	88 27       	eor	r24, r24
    1780:	2c 81       	ldd	r18, Y+4	; 0x04
    1782:	82 2b       	or	r24, r18
    1784:	2d 89       	ldd	r18, Y+21	; 0x15
    1786:	3e 89       	ldd	r19, Y+22	; 0x16
    1788:	82 0f       	add	r24, r18
    178a:	93 1f       	adc	r25, r19
    178c:	9e 8b       	std	Y+22, r25	; 0x16
    178e:	8d 8b       	std	Y+21, r24	; 0x15
    1790:	8d 81       	ldd	r24, Y+5	; 0x05
		aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	98 2f       	mov	r25, r24
    1796:	88 27       	eor	r24, r24
    1798:	2e 81       	ldd	r18, Y+6	; 0x06
    179a:	82 2b       	or	r24, r18
    179c:	2f 89       	ldd	r18, Y+23	; 0x17
    179e:	38 8d       	ldd	r19, Y+24	; 0x18
    17a0:	82 0f       	add	r24, r18
    17a2:	93 1f       	adc	r25, r19
    17a4:	98 8f       	std	Y+24, r25	; 0x18
    17a6:	8f 8b       	std	Y+23, r24	; 0x17
    17a8:	9e 01       	movw	r18, r28
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    17aa:	2f 5f       	subi	r18, 0xFF	; 255
    17ac:	3f 4f       	sbci	r19, 0xFF	; 255
    17ae:	46 e0       	ldi	r20, 0x06	; 6
    17b0:	63 e4       	ldi	r22, 0x43	; 67
    17b2:	88 e6       	ldi	r24, 0x68	; 104
    17b4:	77 da       	rcall	.-2834   	; 0xca4 <readBytes>
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
		gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	98 2f       	mov	r25, r24
    17bc:	88 27       	eor	r24, r24
    17be:	2a 81       	ldd	r18, Y+2	; 0x02
    17c0:	82 2b       	or	r24, r18
    17c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    17c4:	3e 85       	ldd	r19, Y+14	; 0x0e
    17c6:	82 0f       	add	r24, r18
    17c8:	93 1f       	adc	r25, r19
    17ca:	9e 87       	std	Y+14, r25	; 0x0e
    17cc:	8d 87       	std	Y+13, r24	; 0x0d
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
		gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	98 2f       	mov	r25, r24
    17d4:	88 27       	eor	r24, r24
    17d6:	2c 81       	ldd	r18, Y+4	; 0x04
    17d8:	82 2b       	or	r24, r18
    17da:	2f 85       	ldd	r18, Y+15	; 0x0f
    17dc:	38 89       	ldd	r19, Y+16	; 0x10
    17de:	82 0f       	add	r24, r18
    17e0:	93 1f       	adc	r25, r19
    17e2:	98 8b       	std	Y+16, r25	; 0x10
    17e4:	8f 87       	std	Y+15, r24	; 0x0f
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
		gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	98 2f       	mov	r25, r24
    17ec:	88 27       	eor	r24, r24
    17ee:	2e 81       	ldd	r18, Y+6	; 0x06
    17f0:	82 2b       	or	r24, r18
    17f2:	29 89       	ldd	r18, Y+17	; 0x11
    17f4:	3a 89       	ldd	r19, Y+18	; 0x12
    17f6:	82 0f       	add	r24, r18
    17f8:	93 1f       	adc	r25, r19
    17fa:	9a 8b       	std	Y+18, r25	; 0x12
    17fc:	89 8b       	std	Y+17, r24	; 0x11
    17fe:	01 50       	subi	r16, 0x01	; 1
    1800:	11 09       	sbc	r17, r1
    1802:	09 f0       	breq	.+2      	; 0x1806 <MPU9250SelfTest+0x128>
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 1<<FS);  // Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1<<FS); // Set full scale range for the accelerometer to 2 g

	for( int ii = 0; ii < 200; ii++)
    1804:	a6 cf       	rjmp	.-180    	; 0x1752 <MPU9250SelfTest+0x74>
    1806:	6e 01       	movw	r12, r28
    1808:	b3 e1       	ldi	r27, 0x13	; 19
    180a:	cb 0e       	add	r12, r27
    180c:	d1 1c       	adc	r13, r1
    180e:	4e 01       	movw	r8, r28
    1810:	ed e0       	ldi	r30, 0x0D	; 13
    1812:	8e 0e       	add	r8, r30
    1814:	91 1c       	adc	r9, r1
    1816:	7e 01       	movw	r14, r28
    1818:	f9 e1       	ldi	r31, 0x19	; 25
    181a:	ef 0e       	add	r14, r31
    181c:	f1 1c       	adc	r15, r1
    181e:	94 01       	movw	r18, r8
    1820:	f6 01       	movw	r30, r12
    1822:	08 ec       	ldi	r16, 0xC8	; 200
		gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
	}
	
	for (int ii =0; ii < 3; ii++)
	{  // Get average of 200 values and store as average current readings
		aAvg[ii] /= 200;
    1824:	10 e0       	ldi	r17, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	91 81       	ldd	r25, Z+1	; 0x01
    182a:	b8 01       	movw	r22, r16
    182c:	0e 94 20 20 	call	0x4040	; 0x4040 <__divmodhi4>
    1830:	61 93       	st	Z+, r22
    1832:	71 93       	st	Z+, r23
    1834:	d9 01       	movw	r26, r18
		gAvg[ii] /= 200;
    1836:	8d 91       	ld	r24, X+
    1838:	9c 91       	ld	r25, X
    183a:	b8 01       	movw	r22, r16
    183c:	0e 94 20 20 	call	0x4040	; 0x4040 <__divmodhi4>
    1840:	d9 01       	movw	r26, r18
    1842:	6d 93       	st	X+, r22
    1844:	7d 93       	st	X+, r23
    1846:	9d 01       	movw	r18, r26
		gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
		gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
	}
	
	for (int ii =0; ii < 3; ii++)
    1848:	ee 15       	cp	r30, r14
    184a:	ff 05       	cpc	r31, r15
    184c:	61 f7       	brne	.-40     	; 0x1826 <MPU9250SelfTest+0x148>
		aAvg[ii] /= 200;
		gAvg[ii] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
    184e:	40 ee       	ldi	r20, 0xE0	; 224
    1850:	6c e1       	ldi	r22, 0x1C	; 28
    1852:	88 e6       	ldi	r24, 0x68	; 104
    1854:	10 da       	rcall	.-3040   	; 0xc76 <writeByte>
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
    1856:	40 ee       	ldi	r20, 0xE0	; 224
    1858:	6b e1       	ldi	r22, 0x1B	; 27
    185a:	88 e6       	ldi	r24, 0x68	; 104
    185c:	0c da       	rcall	.-3048   	; 0xc76 <writeByte>
    185e:	e9 e6       	ldi	r30, 0x69	; 105
    1860:	f8 e1       	ldi	r31, 0x18	; 24
    1862:	31 97       	sbiw	r30, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <MPU9250SelfTest+0x184>
    1866:	00 c0       	rjmp	.+0      	; 0x1868 <MPU9250SelfTest+0x18a>
    1868:	00 00       	nop
    186a:	08 ec       	ldi	r16, 0xC8	; 200
    186c:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(25);  // Delay a while to let the device stabilize

	for( int ii = 0; ii < 200; ii++)
	{  // get average self-test values of gyro and acclerometer
		
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
    186e:	9e 01       	movw	r18, r28
    1870:	2f 5f       	subi	r18, 0xFF	; 255
    1872:	3f 4f       	sbci	r19, 0xFF	; 255
    1874:	46 e0       	ldi	r20, 0x06	; 6
    1876:	6b e3       	ldi	r22, 0x3B	; 59
    1878:	88 e6       	ldi	r24, 0x68	; 104
    187a:	14 da       	rcall	.-3032   	; 0xca4 <readBytes>
    187c:	89 81       	ldd	r24, Y+1	; 0x01
		aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	98 2f       	mov	r25, r24
    1882:	88 27       	eor	r24, r24
    1884:	2a 81       	ldd	r18, Y+2	; 0x02
    1886:	82 2b       	or	r24, r18
    1888:	29 8d       	ldd	r18, Y+25	; 0x19
    188a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    188c:	82 0f       	add	r24, r18
    188e:	93 1f       	adc	r25, r19
    1890:	9a 8f       	std	Y+26, r25	; 0x1a
    1892:	89 8f       	std	Y+25, r24	; 0x19
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
		aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	98 2f       	mov	r25, r24
    189a:	88 27       	eor	r24, r24
    189c:	2c 81       	ldd	r18, Y+4	; 0x04
    189e:	82 2b       	or	r24, r18
    18a0:	2b 8d       	ldd	r18, Y+27	; 0x1b
    18a2:	3c 8d       	ldd	r19, Y+28	; 0x1c
    18a4:	82 0f       	add	r24, r18
    18a6:	93 1f       	adc	r25, r19
    18a8:	9c 8f       	std	Y+28, r25	; 0x1c
    18aa:	8b 8f       	std	Y+27, r24	; 0x1b
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
		aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	98 2f       	mov	r25, r24
    18b2:	88 27       	eor	r24, r24
    18b4:	2e 81       	ldd	r18, Y+6	; 0x06
    18b6:	82 2b       	or	r24, r18
    18b8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    18ba:	3e 8d       	ldd	r19, Y+30	; 0x1e
    18bc:	82 0f       	add	r24, r18
    18be:	93 1f       	adc	r25, r19
    18c0:	9e 8f       	std	Y+30, r25	; 0x1e
    18c2:	8d 8f       	std	Y+29, r24	; 0x1d
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
    18c4:	9e 01       	movw	r18, r28
    18c6:	2f 5f       	subi	r18, 0xFF	; 255
    18c8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ca:	46 e0       	ldi	r20, 0x06	; 6
    18cc:	63 e4       	ldi	r22, 0x43	; 67
    18ce:	88 e6       	ldi	r24, 0x68	; 104
    18d0:	e9 d9       	rcall	.-3118   	; 0xca4 <readBytes>
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
		gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	98 2f       	mov	r25, r24
    18d8:	88 27       	eor	r24, r24
    18da:	2a 81       	ldd	r18, Y+2	; 0x02
    18dc:	82 2b       	or	r24, r18
    18de:	2f 8d       	ldd	r18, Y+31	; 0x1f
    18e0:	38 a1       	ldd	r19, Y+32	; 0x20
    18e2:	82 0f       	add	r24, r18
    18e4:	93 1f       	adc	r25, r19
    18e6:	98 a3       	std	Y+32, r25	; 0x20
    18e8:	8f 8f       	std	Y+31, r24	; 0x1f
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
		gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	98 2f       	mov	r25, r24
    18f0:	88 27       	eor	r24, r24
    18f2:	2c 81       	ldd	r18, Y+4	; 0x04
    18f4:	82 2b       	or	r24, r18
    18f6:	29 a1       	ldd	r18, Y+33	; 0x21
    18f8:	3a a1       	ldd	r19, Y+34	; 0x22
    18fa:	82 0f       	add	r24, r18
    18fc:	93 1f       	adc	r25, r19
    18fe:	9a a3       	std	Y+34, r25	; 0x22
    1900:	89 a3       	std	Y+33, r24	; 0x21
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
		gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	98 2f       	mov	r25, r24
    1908:	88 27       	eor	r24, r24
    190a:	2e 81       	ldd	r18, Y+6	; 0x06
    190c:	82 2b       	or	r24, r18
    190e:	2b a1       	ldd	r18, Y+35	; 0x23
    1910:	3c a1       	ldd	r19, Y+36	; 0x24
    1912:	82 0f       	add	r24, r18
    1914:	93 1f       	adc	r25, r19
    1916:	9c a3       	std	Y+36, r25	; 0x24
    1918:	8b a3       	std	Y+35, r24	; 0x23
    191a:	01 50       	subi	r16, 0x01	; 1
    191c:	11 09       	sbc	r17, r1
    191e:	09 f0       	breq	.+2      	; 0x1922 <MPU9250SelfTest+0x244>
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	_delay_ms(25);  // Delay a while to let the device stabilize

	for( int ii = 0; ii < 200; ii++)
    1920:	a6 cf       	rjmp	.-180    	; 0x186e <MPU9250SelfTest+0x190>
    1922:	5e 01       	movw	r10, r28
    1924:	f9 e1       	ldi	r31, 0x19	; 25
    1926:	af 0e       	add	r10, r31
    1928:	b1 1c       	adc	r11, r1
    192a:	1e 01       	movw	r2, r28
    192c:	8f e1       	ldi	r24, 0x1F	; 31
    192e:	28 0e       	add	r2, r24
    1930:	31 1c       	adc	r3, r1
    1932:	71 01       	movw	r14, r2
    1934:	91 01       	movw	r18, r2
    1936:	f5 01       	movw	r30, r10
    1938:	08 ec       	ldi	r16, 0xC8	; 200
		gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
	}
	
	for (int ii =0; ii < 3; ii++)
	{  // Get average of 200 values and store as average self-test readings
		aSTAvg[ii] /= 200;
    193a:	10 e0       	ldi	r17, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	91 81       	ldd	r25, Z+1	; 0x01
    1940:	b8 01       	movw	r22, r16
    1942:	0e 94 20 20 	call	0x4040	; 0x4040 <__divmodhi4>
    1946:	61 93       	st	Z+, r22
    1948:	71 93       	st	Z+, r23
    194a:	d9 01       	movw	r26, r18
		gSTAvg[ii] /= 200;
    194c:	8d 91       	ld	r24, X+
    194e:	9c 91       	ld	r25, X
    1950:	b8 01       	movw	r22, r16
    1952:	0e 94 20 20 	call	0x4040	; 0x4040 <__divmodhi4>
    1956:	d9 01       	movw	r26, r18
    1958:	6d 93       	st	X+, r22
    195a:	7d 93       	st	X+, r23
    195c:	9d 01       	movw	r18, r26
		gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
		gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
	}
	
	for (int ii =0; ii < 3; ii++)
    195e:	ee 15       	cp	r30, r14
    1960:	ff 05       	cpc	r31, r15
    1962:	61 f7       	brne	.-40     	; 0x193c <MPU9250SelfTest+0x25e>
		aSTAvg[ii] /= 200;
		gSTAvg[ii] /= 200;
	}
	
	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	6c e1       	ldi	r22, 0x1C	; 28
    1968:	88 e6       	ldi	r24, 0x68	; 104
    196a:	85 d9       	rcall	.-3318   	; 0xc76 <writeByte>
    196c:	40 e0       	ldi	r20, 0x00	; 0
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
    196e:	6b e1       	ldi	r22, 0x1B	; 27
    1970:	88 e6       	ldi	r24, 0x68	; 104
    1972:	81 d9       	rcall	.-3326   	; 0xc76 <writeByte>
    1974:	e9 e6       	ldi	r30, 0x69	; 105
    1976:	f8 e1       	ldi	r31, 0x18	; 24
    1978:	31 97       	sbiw	r30, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <MPU9250SelfTest+0x29a>
    197c:	00 c0       	rjmp	.+0      	; 0x197e <MPU9250SelfTest+0x2a0>
    197e:	00 00       	nop
    1980:	9e 01       	movw	r18, r28
	_delay_ms(25);  // Delay a while to let the device stabilize
	
	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	
	readBytes(MPU9250_ADDRESS, SELF_TEST_X_ACCEL , 1 , &selfTest[0]); // X-axis accel self-test results
    1982:	29 5f       	subi	r18, 0xF9	; 249
    1984:	3f 4f       	sbci	r19, 0xFF	; 255
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	6d e0       	ldi	r22, 0x0D	; 13
    198a:	88 e6       	ldi	r24, 0x68	; 104
    198c:	8b d9       	rcall	.-3306   	; 0xca4 <readBytes>
	readBytes(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1 , &selfTest[1]); // Y-axis accel self-test results
    198e:	9e 01       	movw	r18, r28
    1990:	28 5f       	subi	r18, 0xF8	; 248
    1992:	3f 4f       	sbci	r19, 0xFF	; 255
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	6e e0       	ldi	r22, 0x0E	; 14
    1998:	88 e6       	ldi	r24, 0x68	; 104
    199a:	84 d9       	rcall	.-3320   	; 0xca4 <readBytes>
	selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
    199c:	6f e0       	ldi	r22, 0x0F	; 15
    199e:	88 e6       	ldi	r24, 0x68	; 104
    19a0:	eb dd       	rcall	.-1066   	; 0x1578 <readByte>
    19a2:	89 87       	std	Y+9, r24	; 0x09
    19a4:	60 e0       	ldi	r22, 0x00	; 0
	selfTest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
    19a6:	88 e6       	ldi	r24, 0x68	; 104
    19a8:	e7 dd       	rcall	.-1074   	; 0x1578 <readByte>
    19aa:	8a 87       	std	Y+10, r24	; 0x0a
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	88 e6       	ldi	r24, 0x68	; 104
	selfTest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
    19b0:	e3 dd       	rcall	.-1082   	; 0x1578 <readByte>
    19b2:	8b 87       	std	Y+11, r24	; 0x0b
    19b4:	62 e0       	ldi	r22, 0x02	; 2
    19b6:	88 e6       	ldi	r24, 0x68	; 104
    19b8:	df dd       	rcall	.-1090   	; 0x1578 <readByte>
	selfTest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
    19ba:	18 2f       	mov	r17, r24
    19bc:	6f 81       	ldd	r22, Y+7	; 0x07
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
    19c4:	0e 94 df 19 	call	0x33be	; 0x33be <__floatunsisf>
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5f e3       	ldi	r21, 0x3F	; 63
    19d0:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__subsf3>
    19d4:	9b 01       	movw	r18, r22
    19d6:	ac 01       	movw	r20, r24
    19d8:	6e ea       	ldi	r22, 0xAE	; 174
    19da:	77 e4       	ldi	r23, 0x47	; 71
    19dc:	81 e8       	ldi	r24, 0x81	; 129
    19de:	9f e3       	ldi	r25, 0x3F	; 63
    19e0:	0e 94 20 1b 	call	0x3640	; 0x3640 <pow>
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 ec       	ldi	r19, 0xC0	; 192
    19e8:	43 e2       	ldi	r20, 0x23	; 35
    19ea:	55 e4       	ldi	r21, 0x45	; 69
    19ec:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    19f0:	6d a3       	std	Y+37, r22	; 0x25
    19f2:	7e a3       	std	Y+38, r23	; 0x26
    19f4:	8f a3       	std	Y+39, r24	; 0x27
    19f6:	98 a7       	std	Y+40, r25	; 0x28
    19f8:	68 85       	ldd	r22, Y+8	; 0x08
    19fa:	70 e0       	ldi	r23, 0x00	; 0
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
    1a00:	0e 94 df 19 	call	0x33be	; 0x33be <__floatunsisf>
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e8       	ldi	r20, 0x80	; 128
    1a0a:	5f e3       	ldi	r21, 0x3F	; 63
    1a0c:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__subsf3>
    1a10:	9b 01       	movw	r18, r22
    1a12:	ac 01       	movw	r20, r24
    1a14:	6e ea       	ldi	r22, 0xAE	; 174
    1a16:	77 e4       	ldi	r23, 0x47	; 71
    1a18:	81 e8       	ldi	r24, 0x81	; 129
    1a1a:	9f e3       	ldi	r25, 0x3F	; 63
    1a1c:	0e 94 20 1b 	call	0x3640	; 0x3640 <pow>
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 ec       	ldi	r19, 0xC0	; 192
    1a24:	43 e2       	ldi	r20, 0x23	; 35
    1a26:	55 e4       	ldi	r21, 0x45	; 69
    1a28:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1a2c:	69 a7       	std	Y+41, r22	; 0x29
    1a2e:	7a a7       	std	Y+42, r23	; 0x2a
    1a30:	8b a7       	std	Y+43, r24	; 0x2b
    1a32:	9c a7       	std	Y+44, r25	; 0x2c
    1a34:	69 85       	ldd	r22, Y+9	; 0x09
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
    1a3c:	0e 94 df 19 	call	0x33be	; 0x33be <__floatunsisf>
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__subsf3>
    1a4c:	9b 01       	movw	r18, r22
    1a4e:	ac 01       	movw	r20, r24
    1a50:	6e ea       	ldi	r22, 0xAE	; 174
    1a52:	77 e4       	ldi	r23, 0x47	; 71
    1a54:	81 e8       	ldi	r24, 0x81	; 129
    1a56:	9f e3       	ldi	r25, 0x3F	; 63
    1a58:	0e 94 20 1b 	call	0x3640	; 0x3640 <pow>
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 ec       	ldi	r19, 0xC0	; 192
    1a60:	43 e2       	ldi	r20, 0x23	; 35
    1a62:	55 e4       	ldi	r21, 0x45	; 69
    1a64:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1a68:	6d a7       	std	Y+45, r22	; 0x2d
    1a6a:	7e a7       	std	Y+46, r23	; 0x2e
    1a6c:	8f a7       	std	Y+47, r24	; 0x2f
    1a6e:	98 ab       	std	Y+48, r25	; 0x30
    1a70:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
    1a78:	0e 94 df 19 	call	0x33be	; 0x33be <__floatunsisf>
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e8       	ldi	r20, 0x80	; 128
    1a82:	5f e3       	ldi	r21, 0x3F	; 63
    1a84:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__subsf3>
    1a88:	9b 01       	movw	r18, r22
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	6e ea       	ldi	r22, 0xAE	; 174
    1a8e:	77 e4       	ldi	r23, 0x47	; 71
    1a90:	81 e8       	ldi	r24, 0x81	; 129
    1a92:	9f e3       	ldi	r25, 0x3F	; 63
    1a94:	0e 94 20 1b 	call	0x3640	; 0x3640 <pow>
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 ec       	ldi	r19, 0xC0	; 192
    1a9c:	43 e2       	ldi	r20, 0x23	; 35
    1a9e:	55 e4       	ldi	r21, 0x45	; 69
    1aa0:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1aa4:	69 ab       	std	Y+49, r22	; 0x31
    1aa6:	7a ab       	std	Y+50, r23	; 0x32
    1aa8:	8b ab       	std	Y+51, r24	; 0x33
    1aaa:	9c ab       	std	Y+52, r25	; 0x34
    1aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
    1ab4:	0e 94 df 19 	call	0x33be	; 0x33be <__floatunsisf>
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	5f e3       	ldi	r21, 0x3F	; 63
    1ac0:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__subsf3>
    1ac4:	9b 01       	movw	r18, r22
    1ac6:	ac 01       	movw	r20, r24
    1ac8:	6e ea       	ldi	r22, 0xAE	; 174
    1aca:	77 e4       	ldi	r23, 0x47	; 71
    1acc:	81 e8       	ldi	r24, 0x81	; 129
    1ace:	9f e3       	ldi	r25, 0x3F	; 63
    1ad0:	0e 94 20 1b 	call	0x3640	; 0x3640 <pow>
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 ec       	ldi	r19, 0xC0	; 192
    1ad8:	43 e2       	ldi	r20, 0x23	; 35
    1ada:	55 e4       	ldi	r21, 0x45	; 69
    1adc:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1ae0:	6d ab       	std	Y+53, r22	; 0x35
    1ae2:	7e ab       	std	Y+54, r23	; 0x36
    1ae4:	8f ab       	std	Y+55, r24	; 0x37
    1ae6:	98 af       	std	Y+56, r25	; 0x38
    1ae8:	61 2f       	mov	r22, r17
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
    1af0:	0e 94 df 19 	call	0x33be	; 0x33be <__floatunsisf>
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__subsf3>
    1b00:	9b 01       	movw	r18, r22
    1b02:	ac 01       	movw	r20, r24
    1b04:	6e ea       	ldi	r22, 0xAE	; 174
    1b06:	77 e4       	ldi	r23, 0x47	; 71
    1b08:	81 e8       	ldi	r24, 0x81	; 129
    1b0a:	9f e3       	ldi	r25, 0x3F	; 63
    1b0c:	0e 94 20 1b 	call	0x3640	; 0x3640 <pow>
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 ec       	ldi	r19, 0xC0	; 192
    1b14:	43 e2       	ldi	r20, 0x23	; 35
    1b16:	55 e4       	ldi	r21, 0x45	; 69
    1b18:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1b1c:	69 af       	std	Y+57, r22	; 0x39
    1b1e:	7a af       	std	Y+58, r23	; 0x3a
    1b20:	8b af       	std	Y+59, r24	; 0x3b
    1b22:	9c af       	std	Y+60, r25	; 0x3c
    1b24:	ce 01       	movw	r24, r28
    1b26:	85 96       	adiw	r24, 0x25	; 37
    1b28:	9e af       	std	Y+62, r25	; 0x3e
    1b2a:	8d af       	std	Y+61, r24	; 0x3d
    1b2c:	07 2d       	mov	r16, r7
    1b2e:	16 2d       	mov	r17, r6
    1b30:	de 01       	movw	r26, r28
    1b32:	d1 96       	adiw	r26, 0x31	; 49
    1b34:	21 96       	adiw	r28, 0x01	; 1
    1b36:	bf af       	std	Y+63, r27	; 0x3f
    1b38:	ae af       	std	Y+62, r26	; 0x3e
    1b3a:	21 97       	sbiw	r28, 0x01	; 1
    1b3c:	e1 2c       	mov	r14, r1
    1b3e:	f1 2c       	mov	r15, r1
    1b40:	f5 01       	movw	r30, r10
    1b42:	61 91       	ld	r22, Z+
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++)
    1b44:	71 91       	ld	r23, Z+
    1b46:	5f 01       	movw	r10, r30
	{
		destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i];   // Report percent differences
    1b48:	d6 01       	movw	r26, r12
    1b4a:	8d 91       	ld	r24, X+
    1b4c:	9d 91       	ld	r25, X+
    1b4e:	6d 01       	movw	r12, r26
    1b50:	ed ad       	ldd	r30, Y+61	; 0x3d
    1b52:	fe ad       	ldd	r31, Y+62	; 0x3e
    1b54:	41 90       	ld	r4, Z+
    1b56:	51 90       	ld	r5, Z+
    1b58:	61 90       	ld	r6, Z+
    1b5a:	71 90       	ld	r7, Z+
    1b5c:	fe af       	std	Y+62, r31	; 0x3e
    1b5e:	ed af       	std	Y+61, r30	; 0x3d
    1b60:	68 1b       	sub	r22, r24
    1b62:	79 0b       	sbc	r23, r25
    1b64:	07 2e       	mov	r0, r23
    1b66:	00 0c       	add	r0, r0
    1b68:	88 0b       	sbc	r24, r24
    1b6a:	99 0b       	sbc	r25, r25
    1b6c:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	48 ec       	ldi	r20, 0xC8	; 200
    1b76:	52 e4       	ldi	r21, 0x42	; 66
    1b78:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1b7c:	a3 01       	movw	r20, r6
    1b7e:	92 01       	movw	r18, r4
    1b80:	0e 94 46 19 	call	0x328c	; 0x328c <__divsf3>
    1b84:	d8 01       	movw	r26, r16
    1b86:	6d 93       	st	X+, r22
    1b88:	7d 93       	st	X+, r23
    1b8a:	8d 93       	st	X+, r24
    1b8c:	9c 93       	st	X, r25
    1b8e:	13 97       	sbiw	r26, 0x03	; 3
    1b90:	f1 01       	movw	r30, r2
    1b92:	61 91       	ld	r22, Z+
    1b94:	71 91       	ld	r23, Z+
    1b96:	1f 01       	movw	r2, r30
		destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]; // Report percent differences
    1b98:	d4 01       	movw	r26, r8
    1b9a:	8d 91       	ld	r24, X+
    1b9c:	9d 91       	ld	r25, X+
    1b9e:	4d 01       	movw	r8, r26
    1ba0:	21 96       	adiw	r28, 0x01	; 1
    1ba2:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ba4:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ba6:	21 97       	sbiw	r28, 0x01	; 1
    1ba8:	41 90       	ld	r4, Z+
    1baa:	51 90       	ld	r5, Z+
    1bac:	61 90       	ld	r6, Z+
    1bae:	71 90       	ld	r7, Z+
    1bb0:	21 96       	adiw	r28, 0x01	; 1
    1bb2:	ff af       	std	Y+63, r31	; 0x3f
    1bb4:	ee af       	std	Y+62, r30	; 0x3e
    1bb6:	21 97       	sbiw	r28, 0x01	; 1
    1bb8:	68 1b       	sub	r22, r24
    1bba:	79 0b       	sbc	r23, r25
    1bbc:	07 2e       	mov	r0, r23
    1bbe:	00 0c       	add	r0, r0
    1bc0:	88 0b       	sbc	r24, r24
    1bc2:	99 0b       	sbc	r25, r25
    1bc4:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	48 ec       	ldi	r20, 0xC8	; 200
    1bce:	52 e4       	ldi	r21, 0x42	; 66
    1bd0:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1bd4:	a3 01       	movw	r20, r6
    1bd6:	92 01       	movw	r18, r4
    1bd8:	0e 94 46 19 	call	0x328c	; 0x328c <__divsf3>
    1bdc:	d8 01       	movw	r26, r16
    1bde:	1c 96       	adiw	r26, 0x0c	; 12
    1be0:	6d 93       	st	X+, r22
    1be2:	7d 93       	st	X+, r23
    1be4:	8d 93       	st	X+, r24
    1be6:	9c 93       	st	X, r25
    1be8:	1f 97       	sbiw	r26, 0x0f	; 15
    1bea:	bf ef       	ldi	r27, 0xFF	; 255
    1bec:	eb 1a       	sub	r14, r27
    1bee:	fb 0a       	sbc	r15, r27
    1bf0:	0c 5f       	subi	r16, 0xFC	; 252
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++)
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	e3 e0       	ldi	r30, 0x03	; 3
    1bf6:	ee 16       	cp	r14, r30
    1bf8:	f1 04       	cpc	r15, r1
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <MPU9250SelfTest+0x520>
    1bfc:	a1 cf       	rjmp	.-190    	; 0x1b40 <MPU9250SelfTest+0x462>
    1bfe:	c0 5c       	subi	r28, 0xC0	; 192
    1c00:	df 4f       	sbci	r29, 0xFF	; 255
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
	{
		destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i];   // Report percent differences
		destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]; // Report percent differences
	}
	
}
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	1f 91       	pop	r17
    1c12:	0f 91       	pop	r16
    1c14:	ff 90       	pop	r15
    1c16:	ef 90       	pop	r14
    1c18:	df 90       	pop	r13
    1c1a:	cf 90       	pop	r12
    1c1c:	bf 90       	pop	r11
    1c1e:	af 90       	pop	r10
    1c20:	9f 90       	pop	r9
    1c22:	8f 90       	pop	r8
    1c24:	7f 90       	pop	r7
    1c26:	6f 90       	pop	r6
    1c28:	5f 90       	pop	r5
    1c2a:	4f 90       	pop	r4
    1c2c:	3f 90       	pop	r3
    1c2e:	2f 90       	pop	r2
    1c30:	08 95       	ret

00001c32 <readBytes_Debug>:
    1c32:	cf 92       	push	r12
    1c34:	df 92       	push	r13
    1c36:	ff 92       	push	r15
    1c38:	0f 93       	push	r16

	return ui8_data;                             // Return data read from slave register
}

void readBytes_Debug(uint8_t address, uint8_t subAddress, uint8_t byteCount, uint8_t * destinationBuffer)
{
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	1f 92       	push	r1
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	18 2f       	mov	r17, r24
    1c48:	69 83       	std	Y+1, r22	; 0x01
    1c4a:	f4 2e       	mov	r15, r20
    1c4c:	69 01       	movw	r12, r18
	printf("Begin of readBytes()\n\r");
    1c4e:	84 e4       	ldi	r24, 0x44	; 68
    1c50:	94 e0       	ldi	r25, 0x04	; 4
    1c52:	9f 93       	push	r25
    1c54:	8f 93       	push	r24
    1c56:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
	uint8_t ui8_return = 0;

	//Wire.beginTransmission(address);         // Initialize the Tx buffer
	printf("Address is %x\n\r" , address);
    1c5a:	1f 92       	push	r1
    1c5c:	1f 93       	push	r17
    1c5e:	8b e5       	ldi	r24, 0x5B	; 91
    1c60:	94 e0       	ldi	r25, 0x04	; 4
    1c62:	9f 93       	push	r25
    1c64:	8f 93       	push	r24
    1c66:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
	//i2c_start_wait(address+I2C_WRITE);
	//Wire.write(subAddress);	                 // Put slave register address in Tx buffer
	//ui8_return = i2c_write(subAddress);
	printf("SubAddress to send is %x\n\r" , subAddress);
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	1f 92       	push	r1
    1c6e:	8f 93       	push	r24
    1c70:	8b e6       	ldi	r24, 0x6B	; 107
    1c72:	94 e0       	ldi	r25, 0x04	; 4
    1c74:	9f 93       	push	r25
    1c76:	8f 93       	push	r24
    1c78:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>

	//Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
	//ui8_return = i2c_rep_start(address + I2C_READ);
	ui8_return = twi_writeTo(address , &subAddress , 1 , 1 ,(uint8_t) false); // Send to address content of *subAddress
    1c7c:	00 e0       	ldi	r16, 0x00	; 0
    1c7e:	21 e0       	ldi	r18, 0x01	; 1
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	be 01       	movw	r22, r28
    1c84:	6f 5f       	subi	r22, 0xFF	; 255
    1c86:	7f 4f       	sbci	r23, 0xFF	; 255
    1c88:	81 2f       	mov	r24, r17
    1c8a:	86 d5       	rcall	.+2828   	; 0x2798 <twi_writeTo>
	//with length 1 , wait for end of transmit and
	//don't send a stop-condition
	if(ui8_return == 0)
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	81 11       	cpse	r24, r1
    1c98:	12 c0       	rjmp	.+36     	; 0x1cbe <readBytes_Debug+0x8c>
	{
		printf("Send subAddress %x to address %x\n\r" , subAddress , address);
    1c9a:	1f 92       	push	r1
    1c9c:	1f 93       	push	r17
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	1f 92       	push	r1
    1ca2:	8f 93       	push	r24
    1ca4:	86 e8       	ldi	r24, 0x86	; 134
    1ca6:	94 e0       	ldi	r25, 0x04	; 4
    1ca8:	9f 93       	push	r25
    1caa:	8f 93       	push	r24
    1cac:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	22 c0       	rjmp	.+68     	; 0x1d02 <readBytes_Debug+0xd0>
	}
	else if(ui8_return == 2)
    1cbe:	82 30       	cpi	r24, 0x02	; 2
    1cc0:	49 f4       	brne	.+18     	; 0x1cd4 <readBytes_Debug+0xa2>
	{
		printf("Address was send received a NACK!\n\r");
    1cc2:	8c ea       	ldi	r24, 0xAC	; 172
    1cc4:	94 e0       	ldi	r25, 0x04	; 4
    1cc6:	9f 93       	push	r25
    1cc8:	8f 93       	push	r24
    1cca:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	17 c0       	rjmp	.+46     	; 0x1d02 <readBytes_Debug+0xd0>
	}
	else if(ui8_return == 3)
    1cd4:	83 30       	cpi	r24, 0x03	; 3
    1cd6:	49 f4       	brne	.+18     	; 0x1cea <readBytes_Debug+0xb8>
	{
		printf("subAddress was send received a NACK!\n\r");
    1cd8:	89 ea       	ldi	r24, 0xA9	; 169
    1cda:	94 e0       	ldi	r25, 0x04	; 4
    1cdc:	9f 93       	push	r25
    1cde:	8f 93       	push	r24
    1ce0:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0c c0       	rjmp	.+24     	; 0x1d02 <readBytes_Debug+0xd0>
	}
	else
	{
		printf("ERROR! Status-Code: %x!\n\r" , ui8_return);
    1cea:	1f 92       	push	r1
    1cec:	8f 93       	push	r24
    1cee:	80 ed       	ldi	r24, 0xD0	; 208
    1cf0:	94 e0       	ldi	r25, 0x04	; 4
    1cf2:	9f 93       	push	r25
    1cf4:	8f 93       	push	r24
    1cf6:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
	}
	//Wire.requestFrom(address, count);  // Read bytes from slave register address
	ui8_return = twi_readFrom(address, destinationBuffer, byteCount, (uint8_t)true); //Read byteCount-Bytes from
    1d02:	21 e0       	ldi	r18, 0x01	; 1
    1d04:	4f 2d       	mov	r20, r15
    1d06:	b6 01       	movw	r22, r12
    1d08:	81 2f       	mov	r24, r17
    1d0a:	f8 d4       	rcall	.+2544   	; 0x26fc <twi_readFrom>
	//address an put it into the
	//destinationBuffer then send a
	//stop-condition
	if(ui8_return != byteCount)
    1d0c:	f8 16       	cp	r15, r24
    1d0e:	81 f0       	breq	.+32     	; 0x1d30 <readBytes_Debug+0xfe>
	{
		printf("Whoopsie read 0x%x Bytes instead of 0x%x Byte...\n\r" , ui8_return , byteCount);
    1d10:	1f 92       	push	r1
    1d12:	ff 92       	push	r15
    1d14:	1f 92       	push	r1
    1d16:	8f 93       	push	r24
    1d18:	8a ee       	ldi	r24, 0xEA	; 234
    1d1a:	94 e0       	ldi	r25, 0x04	; 4
    1d1c:	9f 93       	push	r25
    1d1e:	8f 93       	push	r24
    1d20:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
	//					TWI Write directly into the memory region because we dont use a
	//					system buffer

	//i2c_stop();	//Free the bus for other operations <- This happens automatically at the end of twi_readFrom
	//		  				       because of the "true" as last parameter
	printf("End of readBytes()\n\r");
    1d30:	8d e1       	ldi	r24, 0x1D	; 29
    1d32:	95 e0       	ldi	r25, 0x05	; 5
    1d34:	9f 93       	push	r25
    1d36:	8f 93       	push	r24
    1d38:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
}
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	ff 90       	pop	r15
    1d4c:	df 90       	pop	r13
    1d4e:	cf 90       	pop	r12
    1d50:	08 95       	ret

00001d52 <readByte_Debug>:
}

/*---------------------------------- Debug --------------------------------------------------------------------------------*/

uint8_t readByte_Debug(uint8_t address, uint8_t subAddress)
{
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	1f 92       	push	r1
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	18 2f       	mov	r17, r24
    1d62:	06 2f       	mov	r16, r22
	printf("Begin of readByte()\n\r");
    1d64:	82 e3       	ldi	r24, 0x32	; 50
    1d66:	95 e0       	ldi	r25, 0x05	; 5
    1d68:	9f 93       	push	r25
    1d6a:	8f 93       	push	r24
    1d6c:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
	uint8_t ui8_data; // `data` will store the register data

	readBytes_Debug(address, subAddress, 1, &ui8_data);
    1d70:	9e 01       	movw	r18, r28
    1d72:	2f 5f       	subi	r18, 0xFF	; 255
    1d74:	3f 4f       	sbci	r19, 0xFF	; 255
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	60 2f       	mov	r22, r16
    1d7a:	81 2f       	mov	r24, r17
    1d7c:	5a df       	rcall	.-332    	; 0x1c32 <readBytes_Debug>

	return ui8_data;                             // Return data read from slave register
}
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	08 95       	ret

00001d90 <magcalMPU9250>:

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/


void magcalMPU9250(float * dest1, float * dest2)
{
    1d90:	2f 92       	push	r2
    1d92:	3f 92       	push	r3
    1d94:	4f 92       	push	r4
    1d96:	5f 92       	push	r5
    1d98:	6f 92       	push	r6
    1d9a:	7f 92       	push	r7
    1d9c:	8f 92       	push	r8
    1d9e:	9f 92       	push	r9
    1da0:	af 92       	push	r10
    1da2:	bf 92       	push	r11
    1da4:	cf 92       	push	r12
    1da6:	df 92       	push	r13
    1da8:	ef 92       	push	r14
    1daa:	ff 92       	push	r15
    1dac:	0f 93       	push	r16
    1dae:	1f 93       	push	r17
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	68 97       	sbiw	r28, 0x18	; 24
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	9c 8b       	std	Y+20, r25	; 0x14
    1dc6:	8b 8b       	std	Y+19, r24	; 0x13
    1dc8:	78 8f       	std	Y+24, r23	; 0x18
    1dca:	6f 8b       	std	Y+23, r22	; 0x17
	uint16_t ii = 0, sample_count = 0;
	int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
	int16_t mag_max[3] = {0x8000, 0x8000, 0x8000}, mag_min[3] = {0x7FFF, 0x7FFF, 0x7FFF}, mag_temp[3] = {0, 0, 0};
    1dcc:	86 e0       	ldi	r24, 0x06	; 6
    1dce:	e0 e1       	ldi	r30, 0x10	; 16
    1dd0:	f2 e0       	ldi	r31, 0x02	; 2
    1dd2:	de 01       	movw	r26, r28
    1dd4:	11 96       	adiw	r26, 0x01	; 1
    1dd6:	01 90       	ld	r0, Z+
    1dd8:	0d 92       	st	X+, r0
    1dda:	8a 95       	dec	r24
    1ddc:	e1 f7       	brne	.-8      	; 0x1dd6 <magcalMPU9250+0x46>
    1dde:	86 e0       	ldi	r24, 0x06	; 6
    1de0:	e6 e1       	ldi	r30, 0x16	; 22
    1de2:	f2 e0       	ldi	r31, 0x02	; 2
    1de4:	de 01       	movw	r26, r28
    1de6:	17 96       	adiw	r26, 0x07	; 7
    1de8:	01 90       	ld	r0, Z+
    1dea:	0d 92       	st	X+, r0
    1dec:	8a 95       	dec	r24
    1dee:	e1 f7       	brne	.-8      	; 0x1de8 <magcalMPU9250+0x58>
    1df0:	1e 86       	std	Y+14, r1	; 0x0e
    1df2:	1d 86       	std	Y+13, r1	; 0x0d
    1df4:	18 8a       	std	Y+16, r1	; 0x10
    1df6:	1f 86       	std	Y+15, r1	; 0x0f
    1df8:	1a 8a       	std	Y+18, r1	; 0x12
    1dfa:	19 8a       	std	Y+17, r1	; 0x11

	printf("Mag Calibration: Wave device in a figure eight until done!\n");
    1dfc:	88 e4       	ldi	r24, 0x48	; 72
    1dfe:	95 e0       	ldi	r25, 0x05	; 5
    1e00:	0e 94 12 22 	call	0x4424	; 0x4424 <puts>
    1e04:	2f e7       	ldi	r18, 0x7F	; 127
    1e06:	8a e1       	ldi	r24, 0x1A	; 26
    1e08:	96 e0       	ldi	r25, 0x06	; 6
    1e0a:	21 50       	subi	r18, 0x01	; 1
    1e0c:	80 40       	sbci	r24, 0x00	; 0
    1e0e:	90 40       	sbci	r25, 0x00	; 0
    1e10:	e1 f7       	brne	.-8      	; 0x1e0a <magcalMPU9250+0x7a>
    1e12:	00 c0       	rjmp	.+0      	; 0x1e14 <magcalMPU9250+0x84>
    1e14:	00 00       	nop
    1e16:	00 e8       	ldi	r16, 0x80	; 128
    1e18:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(2000);

	sample_count = 128;
	for(ii = 0; ii < sample_count; ii++) {
		readMagData(mag_temp);  // Read the mag data
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	0d 96       	adiw	r24, 0x0d	; 13
    1e1e:	1f dc       	rcall	.-1986   	; 0x165e <readMagData>
    1e20:	9e 01       	movw	r18, r28
    1e22:	23 5f       	subi	r18, 0xF3	; 243
    1e24:	3f 4f       	sbci	r19, 0xFF	; 255
    1e26:	fe 01       	movw	r30, r28
    1e28:	31 96       	adiw	r30, 0x01	; 1
    1e2a:	7e 01       	movw	r14, r28
    1e2c:	a7 e0       	ldi	r26, 0x07	; 7
    1e2e:	ea 0e       	add	r14, r26
    1e30:	f1 1c       	adc	r15, r1
    1e32:	b7 01       	movw	r22, r14
		for (int jj = 0; jj < 3; jj++) {
			if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
    1e34:	d9 01       	movw	r26, r18
    1e36:	8d 91       	ld	r24, X+
    1e38:	9d 91       	ld	r25, X+
    1e3a:	9d 01       	movw	r18, r26
    1e3c:	40 81       	ld	r20, Z
    1e3e:	51 81       	ldd	r21, Z+1	; 0x01
    1e40:	48 17       	cp	r20, r24
    1e42:	59 07       	cpc	r21, r25
    1e44:	14 f4       	brge	.+4      	; 0x1e4a <magcalMPU9250+0xba>
    1e46:	91 83       	std	Z+1, r25	; 0x01
    1e48:	80 83       	st	Z, r24
			if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
    1e4a:	d7 01       	movw	r26, r14
    1e4c:	4d 91       	ld	r20, X+
    1e4e:	5c 91       	ld	r21, X
    1e50:	11 97       	sbiw	r26, 0x01	; 1
    1e52:	84 17       	cp	r24, r20
    1e54:	95 07       	cpc	r25, r21
    1e56:	14 f4       	brge	.+4      	; 0x1e5c <magcalMPU9250+0xcc>
    1e58:	8d 93       	st	X+, r24
    1e5a:	9c 93       	st	X, r25
    1e5c:	32 96       	adiw	r30, 0x02	; 2
    1e5e:	b2 e0       	ldi	r27, 0x02	; 2
    1e60:	eb 0e       	add	r14, r27
    1e62:	f1 1c       	adc	r15, r1
	_delay_ms(2000);

	sample_count = 128;
	for(ii = 0; ii < sample_count; ii++) {
		readMagData(mag_temp);  // Read the mag data
		for (int jj = 0; jj < 3; jj++) {
    1e64:	e6 17       	cp	r30, r22
    1e66:	f7 07       	cpc	r31, r23
    1e68:	29 f7       	brne	.-54     	; 0x1e34 <magcalMPU9250+0xa4>
    1e6a:	e5 ed       	ldi	r30, 0xD5	; 213
    1e6c:	f3 e8       	ldi	r31, 0x83	; 131
    1e6e:	31 97       	sbiw	r30, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <magcalMPU9250+0xde>
    1e72:	00 c0       	rjmp	.+0      	; 0x1e74 <magcalMPU9250+0xe4>
    1e74:	00 00       	nop
    1e76:	01 50       	subi	r16, 0x01	; 1
    1e78:	11 09       	sbc	r17, r1

	printf("Mag Calibration: Wave device in a figure eight until done!\n");
	_delay_ms(2000);

	sample_count = 128;
	for(ii = 0; ii < sample_count; ii++) {
    1e7a:	79 f6       	brne	.-98     	; 0x1e1a <magcalMPU9250+0x8a>
		}
		_delay_ms(135);  // at 8 Hz ODR, new mag data is available every 125 ms
	}

	// Get hard iron correction
	mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
    1e7c:	a9 80       	ldd	r10, Y+1	; 0x01
    1e7e:	ba 80       	ldd	r11, Y+2	; 0x02
    1e80:	8f 80       	ldd	r8, Y+7	; 0x07
    1e82:	98 84       	ldd	r9, Y+8	; 0x08
	mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
    1e84:	cb 80       	ldd	r12, Y+3	; 0x03
    1e86:	dc 80       	ldd	r13, Y+4	; 0x04
    1e88:	69 84       	ldd	r6, Y+9	; 0x09
    1e8a:	7a 84       	ldd	r7, Y+10	; 0x0a
	mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
    1e8c:	ed 80       	ldd	r14, Y+5	; 0x05
    1e8e:	fe 80       	ldd	r15, Y+6	; 0x06
    1e90:	0b 85       	ldd	r16, Y+11	; 0x0b
    1e92:	1c 85       	ldd	r17, Y+12	; 0x0c

	dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
    1e94:	b5 01       	movw	r22, r10
    1e96:	68 0d       	add	r22, r8
    1e98:	79 1d       	adc	r23, r9
    1e9a:	77 23       	and	r23, r23
    1e9c:	14 f4       	brge	.+4      	; 0x1ea2 <magcalMPU9250+0x112>
    1e9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea2:	75 95       	asr	r23
    1ea4:	67 95       	ror	r22
    1ea6:	07 2e       	mov	r0, r23
    1ea8:	00 0c       	add	r0, r0
    1eaa:	88 0b       	sbc	r24, r24
    1eac:	99 0b       	sbc	r25, r25
    1eae:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
    1eb2:	20 91 42 0b 	lds	r18, 0x0B42	; 0x800b42 <mRes>
    1eb6:	30 91 43 0b 	lds	r19, 0x0B43	; 0x800b43 <mRes+0x1>
    1eba:	40 91 44 0b 	lds	r20, 0x0B44	; 0x800b44 <mRes+0x2>
    1ebe:	50 91 45 0b 	lds	r21, 0x0B45	; 0x800b45 <mRes+0x3>
    1ec2:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1ec6:	20 91 48 09 	lds	r18, 0x0948	; 0x800948 <magCalibration>
    1eca:	30 91 49 09 	lds	r19, 0x0949	; 0x800949 <magCalibration+0x1>
    1ece:	40 91 4a 09 	lds	r20, 0x094A	; 0x80094a <magCalibration+0x2>
    1ed2:	50 91 4b 09 	lds	r21, 0x094B	; 0x80094b <magCalibration+0x3>
    1ed6:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1eda:	ab 89       	ldd	r26, Y+19	; 0x13
    1edc:	bc 89       	ldd	r27, Y+20	; 0x14
    1ede:	6d 93       	st	X+, r22
    1ee0:	7d 93       	st	X+, r23
    1ee2:	8d 93       	st	X+, r24
    1ee4:	9c 93       	st	X, r25
    1ee6:	13 97       	sbiw	r26, 0x03	; 3
	dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
    1ee8:	20 90 42 0b 	lds	r2, 0x0B42	; 0x800b42 <mRes>
    1eec:	30 90 43 0b 	lds	r3, 0x0B43	; 0x800b43 <mRes+0x1>
    1ef0:	40 90 44 0b 	lds	r4, 0x0B44	; 0x800b44 <mRes+0x2>
    1ef4:	50 90 45 0b 	lds	r5, 0x0B45	; 0x800b45 <mRes+0x3>
    1ef8:	b6 01       	movw	r22, r12
    1efa:	66 0d       	add	r22, r6
    1efc:	77 1d       	adc	r23, r7
    1efe:	77 23       	and	r23, r23
    1f00:	14 f4       	brge	.+4      	; 0x1f06 <magcalMPU9250+0x176>
    1f02:	6f 5f       	subi	r22, 0xFF	; 255
    1f04:	7f 4f       	sbci	r23, 0xFF	; 255
    1f06:	75 95       	asr	r23
    1f08:	67 95       	ror	r22
    1f0a:	07 2e       	mov	r0, r23
    1f0c:	00 0c       	add	r0, r0
    1f0e:	88 0b       	sbc	r24, r24
    1f10:	99 0b       	sbc	r25, r25
    1f12:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
    1f16:	a2 01       	movw	r20, r4
    1f18:	91 01       	movw	r18, r2
    1f1a:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1f1e:	20 91 4c 09 	lds	r18, 0x094C	; 0x80094c <magCalibration+0x4>
    1f22:	30 91 4d 09 	lds	r19, 0x094D	; 0x80094d <magCalibration+0x5>
    1f26:	40 91 4e 09 	lds	r20, 0x094E	; 0x80094e <magCalibration+0x6>
    1f2a:	50 91 4f 09 	lds	r21, 0x094F	; 0x80094f <magCalibration+0x7>
    1f2e:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1f32:	eb 89       	ldd	r30, Y+19	; 0x13
    1f34:	fc 89       	ldd	r31, Y+20	; 0x14
    1f36:	64 83       	std	Z+4, r22	; 0x04
    1f38:	75 83       	std	Z+5, r23	; 0x05
    1f3a:	86 83       	std	Z+6, r24	; 0x06
    1f3c:	97 83       	std	Z+7, r25	; 0x07
	dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
    1f3e:	b7 01       	movw	r22, r14
    1f40:	60 0f       	add	r22, r16
    1f42:	71 1f       	adc	r23, r17
    1f44:	77 23       	and	r23, r23
    1f46:	14 f4       	brge	.+4      	; 0x1f4c <magcalMPU9250+0x1bc>
    1f48:	6f 5f       	subi	r22, 0xFF	; 255
    1f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4c:	75 95       	asr	r23
    1f4e:	67 95       	ror	r22
    1f50:	07 2e       	mov	r0, r23
    1f52:	00 0c       	add	r0, r0
    1f54:	88 0b       	sbc	r24, r24
    1f56:	99 0b       	sbc	r25, r25
    1f58:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
    1f5c:	a2 01       	movw	r20, r4
    1f5e:	91 01       	movw	r18, r2
    1f60:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1f64:	20 91 50 09 	lds	r18, 0x0950	; 0x800950 <magCalibration+0x8>
    1f68:	30 91 51 09 	lds	r19, 0x0951	; 0x800951 <magCalibration+0x9>
    1f6c:	40 91 52 09 	lds	r20, 0x0952	; 0x800952 <magCalibration+0xa>
    1f70:	50 91 53 09 	lds	r21, 0x0953	; 0x800953 <magCalibration+0xb>
    1f74:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    1f78:	ab 89       	ldd	r26, Y+19	; 0x13
    1f7a:	bc 89       	ldd	r27, Y+20	; 0x14
    1f7c:	18 96       	adiw	r26, 0x08	; 8
    1f7e:	6d 93       	st	X+, r22
    1f80:	7d 93       	st	X+, r23
    1f82:	8d 93       	st	X+, r24
    1f84:	9c 93       	st	X, r25
    1f86:	1b 97       	sbiw	r26, 0x0b	; 11

	// Get soft iron correction estimate
	mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
    1f88:	a8 18       	sub	r10, r8
    1f8a:	b9 08       	sbc	r11, r9
    1f8c:	45 01       	movw	r8, r10
    1f8e:	1a f4       	brpl	.+6      	; 0x1f96 <magcalMPU9250+0x206>
    1f90:	bf ef       	ldi	r27, 0xFF	; 255
    1f92:	8b 1a       	sub	r8, r27
    1f94:	9b 0a       	sbc	r9, r27
    1f96:	95 94       	asr	r9
    1f98:	87 94       	ror	r8
	mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
    1f9a:	c6 01       	movw	r24, r12
    1f9c:	86 19       	sub	r24, r6
    1f9e:	97 09       	sbc	r25, r7
    1fa0:	6c 01       	movw	r12, r24
    1fa2:	1a f4       	brpl	.+6      	; 0x1faa <magcalMPU9250+0x21a>
    1fa4:	ef ef       	ldi	r30, 0xFF	; 255
    1fa6:	ce 1a       	sub	r12, r30
    1fa8:	de 0a       	sbc	r13, r30
    1faa:	d5 94       	asr	r13
    1fac:	c7 94       	ror	r12
	mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
    1fae:	e0 1a       	sub	r14, r16
    1fb0:	f1 0a       	sbc	r15, r17
    1fb2:	27 01       	movw	r4, r14
    1fb4:	1a f4       	brpl	.+6      	; 0x1fbc <magcalMPU9250+0x22c>
    1fb6:	ff ef       	ldi	r31, 0xFF	; 255
    1fb8:	4f 1a       	sub	r4, r31
    1fba:	5f 0a       	sbc	r5, r31
    1fbc:	55 94       	asr	r5
    1fbe:	47 94       	ror	r4

	float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
    1fc0:	09 2c       	mov	r0, r9
    1fc2:	00 0c       	add	r0, r0
    1fc4:	aa 08       	sbc	r10, r10
    1fc6:	bb 08       	sbc	r11, r11
    1fc8:	0d 2c       	mov	r0, r13
    1fca:	00 0c       	add	r0, r0
    1fcc:	ee 08       	sbc	r14, r14
    1fce:	ff 08       	sbc	r15, r15
    1fd0:	d5 01       	movw	r26, r10
    1fd2:	c4 01       	movw	r24, r8
    1fd4:	8c 0d       	add	r24, r12
    1fd6:	9d 1d       	adc	r25, r13
    1fd8:	ae 1d       	adc	r26, r14
    1fda:	bf 1d       	adc	r27, r15
    1fdc:	05 2c       	mov	r0, r5
    1fde:	00 0c       	add	r0, r0
    1fe0:	66 08       	sbc	r6, r6
    1fe2:	77 08       	sbc	r7, r7
    1fe4:	bc 01       	movw	r22, r24
    1fe6:	cd 01       	movw	r24, r26
    1fe8:	64 0d       	add	r22, r4
    1fea:	75 1d       	adc	r23, r5
    1fec:	86 1d       	adc	r24, r6
    1fee:	97 1d       	adc	r25, r7
    1ff0:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
	avg_rad /= 3.0;
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e4       	ldi	r20, 0x40	; 64
    1ffa:	50 e4       	ldi	r21, 0x40	; 64
    1ffc:	0e 94 46 19 	call	0x328c	; 0x328c <__divsf3>
    2000:	6b 8b       	std	Y+19, r22	; 0x13
    2002:	7c 8b       	std	Y+20, r23	; 0x14
    2004:	8d 8b       	std	Y+21, r24	; 0x15
    2006:	9e 8b       	std	Y+22, r25	; 0x16

	dest2[0] = avg_rad/((float)mag_scale[0]);
    2008:	c5 01       	movw	r24, r10
    200a:	b4 01       	movw	r22, r8
    200c:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
    2010:	9b 01       	movw	r18, r22
    2012:	ac 01       	movw	r20, r24
    2014:	6b 89       	ldd	r22, Y+19	; 0x13
    2016:	7c 89       	ldd	r23, Y+20	; 0x14
    2018:	8d 89       	ldd	r24, Y+21	; 0x15
    201a:	9e 89       	ldd	r25, Y+22	; 0x16
    201c:	0e 94 46 19 	call	0x328c	; 0x328c <__divsf3>
    2020:	af 89       	ldd	r26, Y+23	; 0x17
    2022:	b8 8d       	ldd	r27, Y+24	; 0x18
    2024:	6d 93       	st	X+, r22
    2026:	7d 93       	st	X+, r23
    2028:	8d 93       	st	X+, r24
    202a:	9c 93       	st	X, r25
    202c:	13 97       	sbiw	r26, 0x03	; 3
	dest2[1] = avg_rad/((float)mag_scale[1]);
    202e:	c7 01       	movw	r24, r14
    2030:	b6 01       	movw	r22, r12
    2032:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
    2036:	9b 01       	movw	r18, r22
    2038:	ac 01       	movw	r20, r24
    203a:	6b 89       	ldd	r22, Y+19	; 0x13
    203c:	7c 89       	ldd	r23, Y+20	; 0x14
    203e:	8d 89       	ldd	r24, Y+21	; 0x15
    2040:	9e 89       	ldd	r25, Y+22	; 0x16
    2042:	0e 94 46 19 	call	0x328c	; 0x328c <__divsf3>
    2046:	ef 89       	ldd	r30, Y+23	; 0x17
    2048:	f8 8d       	ldd	r31, Y+24	; 0x18
    204a:	64 83       	std	Z+4, r22	; 0x04
    204c:	75 83       	std	Z+5, r23	; 0x05
    204e:	86 83       	std	Z+6, r24	; 0x06
    2050:	97 83       	std	Z+7, r25	; 0x07
	dest2[2] = avg_rad/((float)mag_scale[2]);
    2052:	c3 01       	movw	r24, r6
    2054:	b2 01       	movw	r22, r4
    2056:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__floatsisf>
    205a:	9b 01       	movw	r18, r22
    205c:	ac 01       	movw	r20, r24
    205e:	6b 89       	ldd	r22, Y+19	; 0x13
    2060:	7c 89       	ldd	r23, Y+20	; 0x14
    2062:	8d 89       	ldd	r24, Y+21	; 0x15
    2064:	9e 89       	ldd	r25, Y+22	; 0x16
    2066:	0e 94 46 19 	call	0x328c	; 0x328c <__divsf3>
    206a:	af 89       	ldd	r26, Y+23	; 0x17
    206c:	b8 8d       	ldd	r27, Y+24	; 0x18
    206e:	18 96       	adiw	r26, 0x08	; 8
    2070:	6d 93       	st	X+, r22
    2072:	7d 93       	st	X+, r23
    2074:	8d 93       	st	X+, r24
    2076:	9c 93       	st	X, r25
    2078:	1b 97       	sbiw	r26, 0x0b	; 11

	printf("Mag Calibration done!\n");
    207a:	83 e8       	ldi	r24, 0x83	; 131
    207c:	95 e0       	ldi	r25, 0x05	; 5
    207e:	0e 94 12 22 	call	0x4424	; 0x4424 <puts>
}
    2082:	68 96       	adiw	r28, 0x18	; 24
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	ff 90       	pop	r15
    2098:	ef 90       	pop	r14
    209a:	df 90       	pop	r13
    209c:	cf 90       	pop	r12
    209e:	bf 90       	pop	r11
    20a0:	af 90       	pop	r10
    20a2:	9f 90       	pop	r9
    20a4:	8f 90       	pop	r8
    20a6:	7f 90       	pop	r7
    20a8:	6f 90       	pop	r6
    20aa:	5f 90       	pop	r5
    20ac:	4f 90       	pop	r4
    20ae:	3f 90       	pop	r3
    20b0:	2f 90       	pop	r2
    20b2:	08 95       	ret

000020b4 <mpu9250_setup>:

float magBias[3] = {0 ,0 ,0}, magScale[3] = {0, 0, 0};


void mpu9250_setup()
{
    20b4:	ef 92       	push	r14
    20b6:	ff 92       	push	r15
    20b8:	1f 93       	push	r17
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
	//  TWBR = 12;  // 400 kbit/sec I2C speed
	// Set up the interrupt pin, its set as active high, push-pull
	//int intPin = 12; -> PIN12 = Pin B4
	//pinMode(intPin, INPUT);
	DDRB |= (1 << 4);
    20be:	24 9a       	sbi	0x04, 4	; 4
	//digitalWrite(intPin, LOW);
	PORTB &= ~(1 << 4);
    20c0:	2c 98       	cbi	0x05, 4	; 5
	//pinMode(myLed, OUTPUT);
	//int myLed = 13; -> Pin13 = Pin B5
	DDRB |= (1 << 5);
    20c2:	25 9a       	sbi	0x04, 5	; 4
	//digitalWrite(myLed, HIGH);
	PORTB |= (1 << 5);
    20c4:	2d 9a       	sbi	0x05, 5	; 5
	
	printf("MPU9250\n\r");
    20c6:	89 e9       	ldi	r24, 0x99	; 153
    20c8:	95 e0       	ldi	r25, 0x05	; 5
    20ca:	9f 93       	push	r25
    20cc:	8f 93       	push	r24
    20ce:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
	printf("9-DOF 16-bit\n\r");
    20d2:	83 ea       	ldi	r24, 0xA3	; 163
    20d4:	95 e0       	ldi	r25, 0x05	; 5
    20d6:	9f 93       	push	r25
    20d8:	8f 93       	push	r24
    20da:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
	printf("motion sensor\n\r");
    20de:	82 eb       	ldi	r24, 0xB2	; 178
    20e0:	95 e0       	ldi	r25, 0x05	; 5
    20e2:	9f 93       	push	r25
    20e4:	8f 93       	push	r24
    20e6:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
	printf("60 ug LSB\n\r");
    20ea:	82 ec       	ldi	r24, 0xC2	; 194
    20ec:	95 e0       	ldi	r25, 0x05	; 5
    20ee:	9f 93       	push	r25
    20f0:	8f 93       	push	r24
    20f2:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
    20f6:	2f ef       	ldi	r18, 0xFF	; 255
    20f8:	80 e7       	ldi	r24, 0x70	; 112
    20fa:	92 e0       	ldi	r25, 0x02	; 2
    20fc:	21 50       	subi	r18, 0x01	; 1
    20fe:	80 40       	sbci	r24, 0x00	; 0
    2100:	90 40       	sbci	r25, 0x00	; 0
    2102:	e1 f7       	brne	.-8      	; 0x20fc <mpu9250_setup+0x48>
    2104:	00 c0       	rjmp	.+0      	; 0x2106 <mpu9250_setup+0x52>
    2106:	00 00       	nop

	// Read the WHO_AM_I register, this is a good test of communication
	//readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
	uint8_t whoami = 0;

	whoami = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);  // Read WHO_AM_I register for MPU-9250
    2108:	65 e7       	ldi	r22, 0x75	; 117
    210a:	88 e6       	ldi	r24, 0x68	; 104
    210c:	35 da       	rcall	.-2966   	; 0x1578 <readByte>
    210e:	c8 2f       	mov	r28, r24
	printf("MPU9250\n\r I AM %x I should be 0x71\n\r" , whoami);
    2110:	1f 92       	push	r1
    2112:	8f 93       	push	r24
    2114:	8e ec       	ldi	r24, 0xCE	; 206
    2116:	95 e0       	ldi	r25, 0x05	; 5
    2118:	9f 93       	push	r25
    211a:	8f 93       	push	r24
    211c:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
    2120:	2f ef       	ldi	r18, 0xFF	; 255
    2122:	80 e7       	ldi	r24, 0x70	; 112
    2124:	92 e0       	ldi	r25, 0x02	; 2
    2126:	21 50       	subi	r18, 0x01	; 1
    2128:	80 40       	sbci	r24, 0x00	; 0
    212a:	90 40       	sbci	r25, 0x00	; 0
    212c:	e1 f7       	brne	.-8      	; 0x2126 <mpu9250_setup+0x72>
    212e:	00 c0       	rjmp	.+0      	; 0x2130 <mpu9250_setup+0x7c>
    2130:	00 00       	nop
	////  display.setCursor(0,40);
	//  UART_Printf(0x71, HEX);
	//  display.display();
	_delay_ms(800);

	if (whoami == 0x71) // WHO_AM_I should always be 0x68
    2132:	8d b7       	in	r24, 0x3d	; 61
    2134:	9e b7       	in	r25, 0x3e	; 62
    2136:	0c 96       	adiw	r24, 0x0c	; 12
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	9e bf       	out	0x3e, r25	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	8d bf       	out	0x3d, r24	; 61
    2142:	c1 37       	cpi	r28, 0x71	; 113
    2144:	09 f0       	breq	.+2      	; 0x2148 <mpu9250_setup+0x94>
    2146:	9d c1       	rjmp	.+826    	; 0x2482 <__stack+0x283>
	{
		printf("MPU9250 is online...\n\r");
    2148:	83 ef       	ldi	r24, 0xF3	; 243
    214a:	95 e0       	ldi	r25, 0x05	; 5
    214c:	9f 93       	push	r25
    214e:	8f 93       	push	r24
    2150:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
		
		MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
    2154:	88 ef       	ldi	r24, 0xF8	; 248
    2156:	9a e0       	ldi	r25, 0x0A	; 10
    2158:	c2 da       	rcall	.-2684   	; 0x16de <MPU9250SelfTest>
		printf("x-axis self test: acceleration trim within : %f % of factory value\n\r" 	, SelfTest[0]);
    215a:	c8 ef       	ldi	r28, 0xF8	; 248
    215c:	da e0       	ldi	r29, 0x0A	; 10
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	8f 93       	push	r24
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	8f 93       	push	r24
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	8f 93       	push	r24
    216a:	88 81       	ld	r24, Y
    216c:	8f 93       	push	r24
    216e:	8a e0       	ldi	r24, 0x0A	; 10
    2170:	96 e0       	ldi	r25, 0x06	; 6
    2172:	9f 93       	push	r25
    2174:	8f 93       	push	r24
    2176:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
		printf("y-axis self test: acceleration trim within : %f % of factory value\n\r" 	, SelfTest[1]);
    217a:	8f 81       	ldd	r24, Y+7	; 0x07
    217c:	8f 93       	push	r24
    217e:	8e 81       	ldd	r24, Y+6	; 0x06
    2180:	8f 93       	push	r24
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	8f 93       	push	r24
    2186:	8c 81       	ldd	r24, Y+4	; 0x04
    2188:	8f 93       	push	r24
    218a:	8f e4       	ldi	r24, 0x4F	; 79
    218c:	96 e0       	ldi	r25, 0x06	; 6
    218e:	9f 93       	push	r25
    2190:	8f 93       	push	r24
    2192:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
		printf("z-axis self test: acceleration trim within : %f % of factory value\n\r" 	, SelfTest[2]);
    2196:	8b 85       	ldd	r24, Y+11	; 0x0b
    2198:	8f 93       	push	r24
    219a:	8a 85       	ldd	r24, Y+10	; 0x0a
    219c:	8f 93       	push	r24
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	8f 93       	push	r24
    21a2:	88 85       	ldd	r24, Y+8	; 0x08
    21a4:	8f 93       	push	r24
    21a6:	84 e9       	ldi	r24, 0x94	; 148
    21a8:	96 e0       	ldi	r25, 0x06	; 6
    21aa:	9f 93       	push	r25
    21ac:	8f 93       	push	r24
    21ae:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
		printf("x-axis self test: gyration trim within : %f % of factory value\n\r" 	, SelfTest[3]);
    21b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b4:	8f 93       	push	r24
    21b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    21b8:	8f 93       	push	r24
    21ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    21bc:	8f 93       	push	r24
    21be:	8c 85       	ldd	r24, Y+12	; 0x0c
    21c0:	8f 93       	push	r24
    21c2:	89 ed       	ldi	r24, 0xD9	; 217
    21c4:	96 e0       	ldi	r25, 0x06	; 6
    21c6:	9f 93       	push	r25
    21c8:	8f 93       	push	r24
    21ca:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
		printf("y-axis self test: gyration trim within : %f % of factory value\n\r"	, SelfTest[4]);
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	8f 93       	push	r24
    21d2:	8a 89       	ldd	r24, Y+18	; 0x12
    21d4:	8f 93       	push	r24
    21d6:	89 89       	ldd	r24, Y+17	; 0x11
    21d8:	8f 93       	push	r24
    21da:	88 89       	ldd	r24, Y+16	; 0x10
    21dc:	8f 93       	push	r24
    21de:	8a e1       	ldi	r24, 0x1A	; 26
    21e0:	97 e0       	ldi	r25, 0x07	; 7
    21e2:	9f 93       	push	r25
    21e4:	8f 93       	push	r24
    21e6:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
		printf("z-axis self test: gyration trim within : %f % of factory value\n\r"	, SelfTest[5]);
    21ea:	8d b7       	in	r24, 0x3d	; 61
    21ec:	9e b7       	in	r25, 0x3e	; 62
    21ee:	80 96       	adiw	r24, 0x20	; 32
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	9e bf       	out	0x3e, r25	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	8d bf       	out	0x3d, r24	; 61
    21fa:	8f 89       	ldd	r24, Y+23	; 0x17
    21fc:	8f 93       	push	r24
    21fe:	8e 89       	ldd	r24, Y+22	; 0x16
    2200:	8f 93       	push	r24
    2202:	8d 89       	ldd	r24, Y+21	; 0x15
    2204:	8f 93       	push	r24
    2206:	8c 89       	ldd	r24, Y+20	; 0x14
    2208:	8f 93       	push	r24
    220a:	8b e5       	ldi	r24, 0x5B	; 91
    220c:	97 e0       	ldi	r25, 0x07	; 7
    220e:	9f 93       	push	r25
    2210:	8f 93       	push	r24
    2212:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
		
		calibrateMPU9250(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
    2216:	64 e5       	ldi	r22, 0x54	; 84
    2218:	79 e0       	ldi	r23, 0x09	; 9
    221a:	80 e6       	ldi	r24, 0x60	; 96
    221c:	99 e0       	ldi	r25, 0x09	; 9
    221e:	0e 94 77 07 	call	0xeee	; 0xeee <calibrateMPU9250>

		printf("MPU9250 bias\n\r");
    2222:	8c e9       	ldi	r24, 0x9C	; 156
    2224:	97 e0       	ldi	r25, 0x07	; 7
    2226:	9f 93       	push	r25
    2228:	8f 93       	push	r24
    222a:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>

		printf(" x   y   z\n\r");
    222e:	8b ea       	ldi	r24, 0xAB	; 171
    2230:	97 e0       	ldi	r25, 0x07	; 7
    2232:	9f 93       	push	r25
    2234:	8f 93       	push	r24
    2236:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>


		printf("%d %d %d mg\n\r" , (int)(1000*accelBias[0]) , (int)(1000*accelBias[1]) , (int)(1000*accelBias[2]));
    223a:	c4 e5       	ldi	r28, 0x54	; 84
    223c:	d9 e0       	ldi	r29, 0x09	; 9
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	4a e7       	ldi	r20, 0x7A	; 122
    2244:	54 e4       	ldi	r21, 0x44	; 68
    2246:	68 85       	ldd	r22, Y+8	; 0x08
    2248:	79 85       	ldd	r23, Y+9	; 0x09
    224a:	8a 85       	ldd	r24, Y+10	; 0x0a
    224c:	9b 85       	ldd	r25, Y+11	; 0x0b
    224e:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    2252:	0e 94 ae 19 	call	0x335c	; 0x335c <__fixsfsi>
    2256:	7f 93       	push	r23
    2258:	6f 93       	push	r22
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	4a e7       	ldi	r20, 0x7A	; 122
    2260:	54 e4       	ldi	r21, 0x44	; 68
    2262:	6c 81       	ldd	r22, Y+4	; 0x04
    2264:	7d 81       	ldd	r23, Y+5	; 0x05
    2266:	8e 81       	ldd	r24, Y+6	; 0x06
    2268:	9f 81       	ldd	r25, Y+7	; 0x07
    226a:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    226e:	0e 94 ae 19 	call	0x335c	; 0x335c <__fixsfsi>
    2272:	7f 93       	push	r23
    2274:	6f 93       	push	r22
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4a e7       	ldi	r20, 0x7A	; 122
    227c:	54 e4       	ldi	r21, 0x44	; 68
    227e:	68 81       	ld	r22, Y
    2280:	79 81       	ldd	r23, Y+1	; 0x01
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	9b 81       	ldd	r25, Y+3	; 0x03
    2286:	0e 94 bd 1a 	call	0x357a	; 0x357a <__mulsf3>
    228a:	0e 94 ae 19 	call	0x335c	; 0x335c <__fixsfsi>
    228e:	7f 93       	push	r23
    2290:	6f 93       	push	r22
    2292:	88 eb       	ldi	r24, 0xB8	; 184
    2294:	97 e0       	ldi	r25, 0x07	; 7
    2296:	9f 93       	push	r25
    2298:	8f 93       	push	r24
    229a:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>

		printf("%f %f %f °\n\r" , gyroBias[0] , gyroBias[1] , gyroBias[2]);
    229e:	e0 e6       	ldi	r30, 0x60	; 96
    22a0:	f9 e0       	ldi	r31, 0x09	; 9
    22a2:	83 85       	ldd	r24, Z+11	; 0x0b
    22a4:	8f 93       	push	r24
    22a6:	82 85       	ldd	r24, Z+10	; 0x0a
    22a8:	8f 93       	push	r24
    22aa:	81 85       	ldd	r24, Z+9	; 0x09
    22ac:	8f 93       	push	r24
    22ae:	80 85       	ldd	r24, Z+8	; 0x08
    22b0:	8f 93       	push	r24
    22b2:	87 81       	ldd	r24, Z+7	; 0x07
    22b4:	8f 93       	push	r24
    22b6:	86 81       	ldd	r24, Z+6	; 0x06
    22b8:	8f 93       	push	r24
    22ba:	85 81       	ldd	r24, Z+5	; 0x05
    22bc:	8f 93       	push	r24
    22be:	84 81       	ldd	r24, Z+4	; 0x04
    22c0:	8f 93       	push	r24
    22c2:	83 81       	ldd	r24, Z+3	; 0x03
    22c4:	8f 93       	push	r24
    22c6:	82 81       	ldd	r24, Z+2	; 0x02
    22c8:	8f 93       	push	r24
    22ca:	81 81       	ldd	r24, Z+1	; 0x01
    22cc:	8f 93       	push	r24
    22ce:	80 81       	ld	r24, Z
    22d0:	8f 93       	push	r24
    22d2:	86 ec       	ldi	r24, 0xC6	; 198
    22d4:	97 e0       	ldi	r25, 0x07	; 7
    22d6:	9f 93       	push	r25
    22d8:	8f 93       	push	r24
    22da:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
    22de:	9f e3       	ldi	r25, 0x3F	; 63
    22e0:	2d e0       	ldi	r18, 0x0D	; 13
    22e2:	83 e0       	ldi	r24, 0x03	; 3
    22e4:	91 50       	subi	r25, 0x01	; 1
    22e6:	20 40       	sbci	r18, 0x00	; 0
    22e8:	80 40       	sbci	r24, 0x00	; 0
    22ea:	e1 f7       	brne	.-8      	; 0x22e4 <__stack+0xe5>
    22ec:	00 c0       	rjmp	.+0      	; 0x22ee <__stack+0xef>
    22ee:	00 00       	nop
		_delay_ms(1000);
		
		initMPU9250();
    22f0:	8d b7       	in	r24, 0x3d	; 61
    22f2:	9e b7       	in	r25, 0x3e	; 62
    22f4:	80 96       	adiw	r24, 0x20	; 32
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	9e bf       	out	0x3e, r25	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	8d bf       	out	0x3d, r24	; 61
    2300:	4a d9       	rcall	.-3436   	; 0x1596 <initMPU9250>
		printf("MPU9250 initialized for active data mode....\n\r"); // Initialize device for active mode read of acclerometer, gyroscope, and temperature
    2302:	84 ed       	ldi	r24, 0xD4	; 212
    2304:	97 e0       	ldi	r25, 0x07	; 7
    2306:	9f 93       	push	r25
    2308:	8f 93       	push	r24
    230a:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
			uint8_t PinCFG = readByte(MPU9250_ADDRESS, INT_PIN_CFG);	//0x22);
			uint8_t MasterDis = readByte(MPU9250_ADDRESS, I2C_MST_CTRL); //0x00); // Disable I2C master
			uint8_t IntEna = readByte(MPU9250_ADDRESS, INT_ENABLE); //0x01); // Disable I2C master
			whoami = 0;
			whoami = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);  // Read WHO_AM_I register for MPU-9250
			printf("PinCFG: %x = 0x22 MasterDisable %x = 0x00 Interrupts %x = 0x01 Whoami %x = 0x71\n\r" , PinCFG, MasterDis, IntEna, whoami);
    2312:	0f 2e       	mov	r0, r31
    2314:	f3 e0       	ldi	r31, 0x03	; 3
    2316:	ef 2e       	mov	r14, r31
    2318:	f8 e0       	ldi	r31, 0x08	; 8
    231a:	ff 2e       	mov	r15, r31
    231c:	f0 2d       	mov	r31, r0

		uint8_t BypassTrue = 0;

		while(BypassTrue == 0)
		{
			writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
    231e:	42 e2       	ldi	r20, 0x22	; 34
    2320:	67 e3       	ldi	r22, 0x37	; 55
    2322:	88 e6       	ldi	r24, 0x68	; 104
    2324:	0e 94 3b 06 	call	0xc76	; 0xc76 <writeByte>
			writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
    2328:	41 e0       	ldi	r20, 0x01	; 1
    232a:	68 e3       	ldi	r22, 0x38	; 56
    232c:	88 e6       	ldi	r24, 0x68	; 104
    232e:	0e 94 3b 06 	call	0xc76	; 0xc76 <writeByte>
			uint8_t PinCFG = readByte(MPU9250_ADDRESS, INT_PIN_CFG);	//0x22);
    2332:	67 e3       	ldi	r22, 0x37	; 55
    2334:	88 e6       	ldi	r24, 0x68	; 104
    2336:	20 d9       	rcall	.-3520   	; 0x1578 <readByte>
			uint8_t MasterDis = readByte(MPU9250_ADDRESS, I2C_MST_CTRL); //0x00); // Disable I2C master
    2338:	c8 2f       	mov	r28, r24
    233a:	64 e2       	ldi	r22, 0x24	; 36
    233c:	88 e6       	ldi	r24, 0x68	; 104
    233e:	1c d9       	rcall	.-3528   	; 0x1578 <readByte>
			uint8_t IntEna = readByte(MPU9250_ADDRESS, INT_ENABLE); //0x01); // Disable I2C master
    2340:	d8 2f       	mov	r29, r24
    2342:	68 e3       	ldi	r22, 0x38	; 56
    2344:	88 e6       	ldi	r24, 0x68	; 104
    2346:	18 d9       	rcall	.-3536   	; 0x1578 <readByte>
			whoami = 0;
			whoami = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);  // Read WHO_AM_I register for MPU-9250
    2348:	18 2f       	mov	r17, r24
    234a:	65 e7       	ldi	r22, 0x75	; 117
    234c:	88 e6       	ldi	r24, 0x68	; 104
    234e:	14 d9       	rcall	.-3544   	; 0x1578 <readByte>
			printf("PinCFG: %x = 0x22 MasterDisable %x = 0x00 Interrupts %x = 0x01 Whoami %x = 0x71\n\r" , PinCFG, MasterDis, IntEna, whoami);
    2350:	1f 92       	push	r1
    2352:	8f 93       	push	r24
    2354:	1f 92       	push	r1
    2356:	1f 93       	push	r17
    2358:	1f 92       	push	r1
    235a:	df 93       	push	r29
    235c:	1f 92       	push	r1
    235e:	cf 93       	push	r28
    2360:	ff 92       	push	r15
    2362:	ef 92       	push	r14
    2364:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
			if(PinCFG == 0x22 && MasterDis == 0x00 && IntEna == 0x01)
    2368:	8d b7       	in	r24, 0x3d	; 61
    236a:	9e b7       	in	r25, 0x3e	; 62
    236c:	0a 96       	adiw	r24, 0x0a	; 10
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	9e bf       	out	0x3e, r25	; 62
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	8d bf       	out	0x3d, r24	; 61
    2378:	c2 32       	cpi	r28, 0x22	; 34
    237a:	29 f4       	brne	.+10     	; 0x2386 <__stack+0x187>
    237c:	d1 11       	cpse	r29, r1
    237e:	03 c0       	rjmp	.+6      	; 0x2386 <__stack+0x187>
    2380:	11 30       	cpi	r17, 0x01	; 1
    2382:	09 f4       	brne	.+2      	; 0x2386 <__stack+0x187>
    2384:	93 c0       	rjmp	.+294    	; 0x24ac <__stack+0x2ad>
    2386:	9f ef       	ldi	r25, 0xFF	; 255
    2388:	20 e7       	ldi	r18, 0x70	; 112
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	91 50       	subi	r25, 0x01	; 1
    238e:	20 40       	sbci	r18, 0x00	; 0
    2390:	80 40       	sbci	r24, 0x00	; 0
    2392:	e1 f7       	brne	.-8      	; 0x238c <__stack+0x18d>
    2394:	00 c0       	rjmp	.+0      	; 0x2396 <__stack+0x197>
    2396:	00 00       	nop
    2398:	c2 cf       	rjmp	.-124    	; 0x231e <__stack+0x11f>
    239a:	9f e3       	ldi	r25, 0x3F	; 63
    239c:	2d e0       	ldi	r18, 0x0D	; 13
    239e:	83 e0       	ldi	r24, 0x03	; 3
    23a0:	91 50       	subi	r25, 0x01	; 1
    23a2:	20 40       	sbci	r18, 0x00	; 0
    23a4:	80 40       	sbci	r24, 0x00	; 0
    23a6:	e1 f7       	brne	.-8      	; 0x23a0 <__stack+0x1a1>
    23a8:	00 c0       	rjmp	.+0      	; 0x23aa <__stack+0x1ab>
    23aa:	00 00       	nop
		{

			_delay_ms(1000);
			
			// Get magnetometer calibration from AK8963 ROM
			initAK8963(magCalibration);
    23ac:	88 e4       	ldi	r24, 0x48	; 72
    23ae:	99 e0       	ldi	r25, 0x09	; 9
    23b0:	0e 94 df 06 	call	0xdbe	; 0xdbe <initAK8963>
			printf("AK8963 initialized for active data mode....\n\r"); // Initialize device for active mode read of magnetometer
    23b4:	85 e5       	ldi	r24, 0x55	; 85
    23b6:	98 e0       	ldi	r25, 0x08	; 8
    23b8:	9f 93       	push	r25
    23ba:	8f 93       	push	r24
    23bc:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>

			getMres();
    23c0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <getMres>
			magcalMPU9250(magBias,magScale);
    23c4:	60 e3       	ldi	r22, 0x30	; 48
    23c6:	79 e0       	ldi	r23, 0x09	; 9
    23c8:	8c e3       	ldi	r24, 0x3C	; 60
    23ca:	99 e0       	ldi	r25, 0x09	; 9
    23cc:	e1 dc       	rcall	.-1598   	; 0x1d90 <magcalMPU9250>
			printf("X-Axis sensitivity adjustment value %f\n\r" , magCalibration[0]);
			printf("Y-Axis sensitivity adjustment value %f\n\r" , magCalibration[1]);
			printf("Z-Axis sensitivity adjustment value %f\n\r" , magCalibration[2]);
			#endif
			
			printf("ASAX %f\n" , magCalibration[0]);
    23ce:	c8 e4       	ldi	r28, 0x48	; 72
    23d0:	d9 e0       	ldi	r29, 0x09	; 9
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	8f 93       	push	r24
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	8f 93       	push	r24
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	8f 93       	push	r24
    23de:	88 81       	ld	r24, Y
    23e0:	8f 93       	push	r24
    23e2:	83 e8       	ldi	r24, 0x83	; 131
    23e4:	98 e0       	ldi	r25, 0x08	; 8
    23e6:	9f 93       	push	r25
    23e8:	8f 93       	push	r24
    23ea:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
			printf("ASAY %f\n" , magCalibration[1]);
    23ee:	8f 81       	ldd	r24, Y+7	; 0x07
    23f0:	8f 93       	push	r24
    23f2:	8e 81       	ldd	r24, Y+6	; 0x06
    23f4:	8f 93       	push	r24
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	8f 93       	push	r24
    23fa:	8c 81       	ldd	r24, Y+4	; 0x04
    23fc:	8f 93       	push	r24
    23fe:	8c e8       	ldi	r24, 0x8C	; 140
    2400:	98 e0       	ldi	r25, 0x08	; 8
    2402:	9f 93       	push	r25
    2404:	8f 93       	push	r24
    2406:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
			printf("ASAZ %f\n" , magCalibration[2]);
    240a:	8b 85       	ldd	r24, Y+11	; 0x0b
    240c:	8f 93       	push	r24
    240e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2410:	8f 93       	push	r24
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	8f 93       	push	r24
    2416:	88 85       	ldd	r24, Y+8	; 0x08
    2418:	8f 93       	push	r24
    241a:	85 e9       	ldi	r24, 0x95	; 149
    241c:	98 e0       	ldi	r25, 0x08	; 8
    241e:	9f 93       	push	r25
    2420:	8f 93       	push	r24
    2422:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
    2426:	9f e3       	ldi	r25, 0x3F	; 63
    2428:	2d e0       	ldi	r18, 0x0D	; 13
    242a:	83 e0       	ldi	r24, 0x03	; 3
    242c:	91 50       	subi	r25, 0x01	; 1
    242e:	20 40       	sbci	r18, 0x00	; 0
    2430:	80 40       	sbci	r24, 0x00	; 0
    2432:	e1 f7       	brne	.-8      	; 0x242c <__stack+0x22d>
    2434:	00 c0       	rjmp	.+0      	; 0x2436 <__stack+0x237>
    2436:	00 00       	nop
    2438:	8d b7       	in	r24, 0x3d	; 61
    243a:	9e b7       	in	r25, 0x3e	; 62
    243c:	44 96       	adiw	r24, 0x14	; 20
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	9e bf       	out	0x3e, r25	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	8d bf       	out	0x3d, r24	; 61
    2448:	0c c0       	rjmp	.+24     	; 0x2462 <__stack+0x263>
			_delay_ms(1000);
		}
		else
		{
			printf("Could not connect to AK8963: 0x%x\n\r" , whoami);
    244a:	1f 92       	push	r1
    244c:	cf 93       	push	r28
    244e:	8e e9       	ldi	r24, 0x9E	; 158
    2450:	98 e0       	ldi	r25, 0x08	; 8
    2452:	9f 93       	push	r25
    2454:	8f 93       	push	r24
    2456:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
		}

		whoami = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);  // Read WHO_AM_I register for MPU-9250
    2460:	0f 90       	pop	r0
    2462:	65 e7       	ldi	r22, 0x75	; 117
    2464:	88 e6       	ldi	r24, 0x68	; 104
    2466:	88 d8       	rcall	.-3824   	; 0x1578 <readByte>
		printf("MPU9250\n\r I AM %x I should be 0x71\n\r" , whoami);
    2468:	1f 92       	push	r1
    246a:	8f 93       	push	r24
    246c:	8e ec       	ldi	r24, 0xCE	; 206
    246e:	95 e0       	ldi	r25, 0x05	; 5
    2470:	9f 93       	push	r25
    2472:	8f 93       	push	r24
    2474:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	0c c0       	rjmp	.+24     	; 0x249a <__stack+0x29b>

	}
	else
	{
		printf("Could not connect to MPU9250: 0x%x\n\r" , whoami);
    2482:	1f 92       	push	r1
    2484:	cf 93       	push	r28
    2486:	82 ec       	ldi	r24, 0xC2	; 194
    2488:	98 e0       	ldi	r25, 0x08	; 8
    248a:	9f 93       	push	r25
    248c:	8f 93       	push	r24
    248e:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
	}
	printf("Init done!\n\r");
    249a:	87 ee       	ldi	r24, 0xE7	; 231
    249c:	98 e0       	ldi	r25, 0x08	; 8
    249e:	9f 93       	push	r25
    24a0:	8f 93       	push	r24
    24a2:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>
}
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	1d c0       	rjmp	.+58     	; 0x24e6 <__stack+0x2e7>
    24ac:	9f ef       	ldi	r25, 0xFF	; 255
    24ae:	20 e7       	ldi	r18, 0x70	; 112
    24b0:	82 e0       	ldi	r24, 0x02	; 2
    24b2:	91 50       	subi	r25, 0x01	; 1
    24b4:	20 40       	sbci	r18, 0x00	; 0
    24b6:	80 40       	sbci	r24, 0x00	; 0
    24b8:	e1 f7       	brne	.-8      	; 0x24b2 <__stack+0x2b3>
    24ba:	00 c0       	rjmp	.+0      	; 0x24bc <__stack+0x2bd>
			}
			_delay_ms(800);
		}

		// Read the WHO_AM_I register of the magnetometer, this is a good test of communication
		whoami = readByte_Debug(AK8963_ADDRESS, WHO_AM_I_AK8963);  // Read WHO_AM_I register for AK8963
    24bc:	00 00       	nop
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	8c e0       	ldi	r24, 0x0C	; 12
    24c2:	47 dc       	rcall	.-1906   	; 0x1d52 <readByte_Debug>
    24c4:	c8 2f       	mov	r28, r24
		printf("AK8963\n\rI AM %x I should be 0x48\n\r" , whoami);
    24c6:	1f 92       	push	r1
    24c8:	8f 93       	push	r24
    24ca:	84 ef       	ldi	r24, 0xF4	; 244
    24cc:	98 e0       	ldi	r25, 0x08	; 8
    24ce:	9f 93       	push	r25
    24d0:	8f 93       	push	r24
    24d2:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <printf>

		if(whoami == 0x48)
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	c8 34       	cpi	r28, 0x48	; 72
    24e0:	09 f0       	breq	.+2      	; 0x24e4 <__stack+0x2e5>
    24e2:	b3 cf       	rjmp	.-154    	; 0x244a <__stack+0x24b>
    24e4:	5a cf       	rjmp	.-332    	; 0x239a <__stack+0x19b>
	else
	{
		printf("Could not connect to MPU9250: 0x%x\n\r" , whoami);
	}
	printf("Init done!\n\r");
}
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	1f 91       	pop	r17
    24ec:	ff 90       	pop	r15
    24ee:	ef 90       	pop	r14
    24f0:	08 95       	ret

000024f2 <__vector_23>:

int Timer0_1000ms_cnt =0;
int Timer0_1000ms_flag =0;

ISR(TIMER0_OVF_vect)
{
    24f2:	1f 92       	push	r1
    24f4:	0f 92       	push	r0
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	0f 92       	push	r0
    24fa:	11 24       	eor	r1, r1
    24fc:	2f 93       	push	r18
    24fe:	8f 93       	push	r24
    2500:	9f 93       	push	r25
	if(++Timer0_1ms_cnt ==1)
    2502:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <Timer0_1ms_cnt>
    2506:	90 91 81 09 	lds	r25, 0x0981	; 0x800981 <Timer0_1ms_cnt+0x1>
    250a:	01 96       	adiw	r24, 0x01	; 1
    250c:	81 30       	cpi	r24, 0x01	; 1
    250e:	91 05       	cpc	r25, r1
    2510:	29 f0       	breq	.+10     	; 0x251c <__vector_23+0x2a>
    2512:	90 93 81 09 	sts	0x0981, r25	; 0x800981 <Timer0_1ms_cnt+0x1>
    2516:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <Timer0_1ms_cnt>
    251a:	0a c0       	rjmp	.+20     	; 0x2530 <__vector_23+0x3e>
	{
		Timer0_1ms_cnt =0;
    251c:	10 92 81 09 	sts	0x0981, r1	; 0x800981 <Timer0_1ms_cnt+0x1>
    2520:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <Timer0_1ms_cnt>
		Timer0_1ms_flag =1;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	90 93 7f 09 	sts	0x097F, r25	; 0x80097f <Timer0_1ms_flag+0x1>
    252c:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <Timer0_1ms_flag>
	}
	if(++Timer0_20ms_cnt ==20)
    2530:	80 91 7c 09 	lds	r24, 0x097C	; 0x80097c <Timer0_20ms_cnt>
    2534:	90 91 7d 09 	lds	r25, 0x097D	; 0x80097d <Timer0_20ms_cnt+0x1>
    2538:	01 96       	adiw	r24, 0x01	; 1
    253a:	84 31       	cpi	r24, 0x14	; 20
    253c:	91 05       	cpc	r25, r1
    253e:	29 f0       	breq	.+10     	; 0x254a <__vector_23+0x58>
    2540:	90 93 7d 09 	sts	0x097D, r25	; 0x80097d <Timer0_20ms_cnt+0x1>
    2544:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <Timer0_20ms_cnt>
    2548:	0a c0       	rjmp	.+20     	; 0x255e <__vector_23+0x6c>
	{
		Timer0_20ms_cnt =0;
    254a:	10 92 7d 09 	sts	0x097D, r1	; 0x80097d <Timer0_20ms_cnt+0x1>
    254e:	10 92 7c 09 	sts	0x097C, r1	; 0x80097c <Timer0_20ms_cnt>
		Timer0_20ms_flag =1;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	90 93 7b 09 	sts	0x097B, r25	; 0x80097b <Timer0_20ms_flag+0x1>
    255a:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <Timer0_20ms_flag>
	}
	if(++Timer0_240ms_cnt ==240)
    255e:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <Timer0_240ms_cnt>
    2562:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <Timer0_240ms_cnt+0x1>
    2566:	01 96       	adiw	r24, 0x01	; 1
    2568:	80 3f       	cpi	r24, 0xF0	; 240
    256a:	91 05       	cpc	r25, r1
    256c:	29 f0       	breq	.+10     	; 0x2578 <__vector_23+0x86>
    256e:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <Timer0_240ms_cnt+0x1>
    2572:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <Timer0_240ms_cnt>
    2576:	0a c0       	rjmp	.+20     	; 0x258c <__vector_23+0x9a>
	{
		Timer0_240ms_cnt =0;
    2578:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <Timer0_240ms_cnt+0x1>
    257c:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <Timer0_240ms_cnt>
		Timer0_240ms_flag =1;
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	90 93 77 09 	sts	0x0977, r25	; 0x800977 <Timer0_240ms_flag+0x1>
    2588:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <Timer0_240ms_flag>
	}	
	if(++Timer0_500ms_cnt ==500)
    258c:	80 91 74 09 	lds	r24, 0x0974	; 0x800974 <Timer0_500ms_cnt>
    2590:	90 91 75 09 	lds	r25, 0x0975	; 0x800975 <Timer0_500ms_cnt+0x1>
    2594:	01 96       	adiw	r24, 0x01	; 1
    2596:	84 3f       	cpi	r24, 0xF4	; 244
    2598:	21 e0       	ldi	r18, 0x01	; 1
    259a:	92 07       	cpc	r25, r18
    259c:	29 f0       	breq	.+10     	; 0x25a8 <__vector_23+0xb6>
    259e:	90 93 75 09 	sts	0x0975, r25	; 0x800975 <Timer0_500ms_cnt+0x1>
    25a2:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <Timer0_500ms_cnt>
    25a6:	0a c0       	rjmp	.+20     	; 0x25bc <__vector_23+0xca>
	{
		Timer0_500ms_cnt =0;
    25a8:	10 92 75 09 	sts	0x0975, r1	; 0x800975 <Timer0_500ms_cnt+0x1>
    25ac:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <Timer0_500ms_cnt>
		Timer0_500ms_flag =1;
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	90 93 73 09 	sts	0x0973, r25	; 0x800973 <Timer0_500ms_flag+0x1>
    25b8:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <Timer0_500ms_flag>
	}	
	if(++Timer0_1000ms_cnt ==1000)
    25bc:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <Timer0_1000ms_cnt>
    25c0:	90 91 71 09 	lds	r25, 0x0971	; 0x800971 <Timer0_1000ms_cnt+0x1>
    25c4:	01 96       	adiw	r24, 0x01	; 1
    25c6:	88 3e       	cpi	r24, 0xE8	; 232
    25c8:	23 e0       	ldi	r18, 0x03	; 3
    25ca:	92 07       	cpc	r25, r18
    25cc:	29 f0       	breq	.+10     	; 0x25d8 <__vector_23+0xe6>
    25ce:	90 93 71 09 	sts	0x0971, r25	; 0x800971 <Timer0_1000ms_cnt+0x1>
    25d2:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <Timer0_1000ms_cnt>
    25d6:	0a c0       	rjmp	.+20     	; 0x25ec <__vector_23+0xfa>
	{
		Timer0_1000ms_cnt =0;
    25d8:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <Timer0_1000ms_cnt+0x1>
    25dc:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <Timer0_1000ms_cnt>
		Timer0_1000ms_flag =1;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	90 93 6f 09 	sts	0x096F, r25	; 0x80096f <Timer0_1000ms_flag+0x1>
    25e8:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <Timer0_1000ms_flag>
	}	
	TCNT0 = 6;
    25ec:	86 e0       	ldi	r24, 0x06	; 6
    25ee:	86 bd       	out	0x26, r24	; 38
}
    25f0:	9f 91       	pop	r25
    25f2:	8f 91       	pop	r24
    25f4:	2f 91       	pop	r18
    25f6:	0f 90       	pop	r0
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	0f 90       	pop	r0
    25fc:	1f 90       	pop	r1
    25fe:	18 95       	reti

00002600 <Timer0_init>:

void Timer0_init(void)
{
	TCCR0A = 0x00;
    2600:	14 bc       	out	0x24, r1	; 36
	//  Compare Output Mode, non-PWM, Set on Normal port operation, 분주율 64	
	
	TCCR0B = (1 << CS01) | (1 << CS00);
    2602:	83 e0       	ldi	r24, 0x03	; 3
    2604:	85 bd       	out	0x25, r24	; 37
	//  분주율 64
	
	TIMSK0 |= (1 << TOIE0);
    2606:	ee e6       	ldi	r30, 0x6E	; 110
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	81 60       	ori	r24, 0x01	; 1
    260e:	80 83       	st	Z, r24
    2610:	08 95       	ret

00002612 <Timer0_flag>:
}

int Timer0_flag(int ms)
{
	if(ms ==1)
    2612:	81 30       	cpi	r24, 0x01	; 1
    2614:	91 05       	cpc	r25, r1
    2616:	69 f4       	brne	.+26     	; 0x2632 <Timer0_flag+0x20>
	{
		if(Timer0_1ms_flag ==1)
    2618:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <Timer0_1ms_flag>
    261c:	90 91 7f 09 	lds	r25, 0x097F	; 0x80097f <Timer0_1ms_flag+0x1>
    2620:	81 30       	cpi	r24, 0x01	; 1
    2622:	91 05       	cpc	r25, r1
    2624:	09 f0       	breq	.+2      	; 0x2628 <Timer0_flag+0x16>
    2626:	42 c0       	rjmp	.+132    	; 0x26ac <Timer0_flag+0x9a>
		{
			Timer0_1ms_flag =0;
    2628:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <Timer0_1ms_flag+0x1>
    262c:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <Timer0_1ms_flag>
			return 1;
    2630:	08 95       	ret
		}
	}
	if(ms == 20)
    2632:	84 31       	cpi	r24, 0x14	; 20
    2634:	91 05       	cpc	r25, r1
    2636:	61 f4       	brne	.+24     	; 0x2650 <Timer0_flag+0x3e>
	{
		if(Timer0_20ms_flag ==1)
    2638:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <Timer0_20ms_flag>
    263c:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <Timer0_20ms_flag+0x1>
    2640:	81 30       	cpi	r24, 0x01	; 1
    2642:	91 05       	cpc	r25, r1
    2644:	b1 f5       	brne	.+108    	; 0x26b2 <Timer0_flag+0xa0>
		{
			Timer0_20ms_flag =0;
    2646:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <Timer0_20ms_flag+0x1>
    264a:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <Timer0_20ms_flag>
			return 1;
    264e:	08 95       	ret
		}
	}
	if(ms == 240)
    2650:	80 3f       	cpi	r24, 0xF0	; 240
    2652:	91 05       	cpc	r25, r1
    2654:	61 f4       	brne	.+24     	; 0x266e <Timer0_flag+0x5c>
	{
		if(Timer0_240ms_flag ==1)
    2656:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <Timer0_240ms_flag>
    265a:	90 91 77 09 	lds	r25, 0x0977	; 0x800977 <Timer0_240ms_flag+0x1>
    265e:	81 30       	cpi	r24, 0x01	; 1
    2660:	91 05       	cpc	r25, r1
    2662:	51 f5       	brne	.+84     	; 0x26b8 <Timer0_flag+0xa6>
		{
			Timer0_240ms_flag =0;
    2664:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <Timer0_240ms_flag+0x1>
    2668:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <Timer0_240ms_flag>
			return 1;
    266c:	08 95       	ret
		}
	}	
	if(ms == 500)
    266e:	84 3f       	cpi	r24, 0xF4	; 244
    2670:	21 e0       	ldi	r18, 0x01	; 1
    2672:	92 07       	cpc	r25, r18
    2674:	61 f4       	brne	.+24     	; 0x268e <Timer0_flag+0x7c>
	{
		if(Timer0_500ms_flag ==1)
    2676:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <Timer0_500ms_flag>
    267a:	90 91 73 09 	lds	r25, 0x0973	; 0x800973 <Timer0_500ms_flag+0x1>
    267e:	81 30       	cpi	r24, 0x01	; 1
    2680:	91 05       	cpc	r25, r1
    2682:	e9 f4       	brne	.+58     	; 0x26be <Timer0_flag+0xac>
		{
			Timer0_500ms_flag =0;
    2684:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <Timer0_500ms_flag+0x1>
    2688:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <Timer0_500ms_flag>
			return 1;
    268c:	08 95       	ret
		}
	}	
	if(ms == 1000)
    268e:	88 3e       	cpi	r24, 0xE8	; 232
    2690:	93 40       	sbci	r25, 0x03	; 3
    2692:	c1 f4       	brne	.+48     	; 0x26c4 <Timer0_flag+0xb2>
	{
		if(Timer0_1000ms_flag == 1)
    2694:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <Timer0_1000ms_flag>
    2698:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <Timer0_1000ms_flag+0x1>
    269c:	81 30       	cpi	r24, 0x01	; 1
    269e:	91 05       	cpc	r25, r1
    26a0:	a1 f4       	brne	.+40     	; 0x26ca <Timer0_flag+0xb8>
		{
			Timer0_1000ms_flag =0;
    26a2:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <Timer0_1000ms_flag+0x1>
    26a6:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <Timer0_1000ms_flag>
			return 1;
    26aa:	08 95       	ret
		}
	}	
	return 0;
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	08 95       	ret
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	08 95       	ret
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	08 95       	ret
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	08 95       	ret
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	08 95       	ret
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	08 95       	ret

000026d0 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
  }else{
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
    26d0:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <twi_state>
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	80 93 ed 09 	sts	0x09ED, r24	; 0x8009ed <twi_sendStop>
    26da:	10 92 ec 09 	sts	0x09EC, r1	; 0x8009ec <twi_inRepStart>
    26de:	e9 eb       	ldi	r30, 0xB9	; 185
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	8e 7f       	andi	r24, 0xFE	; 254
    26e6:	80 83       	st	Z, r24
    26e8:	80 81       	ld	r24, Z
    26ea:	8d 7f       	andi	r24, 0xFD	; 253
    26ec:	80 83       	st	Z, r24
    26ee:	88 e4       	ldi	r24, 0x48	; 72
    26f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    26f4:	85 e4       	ldi	r24, 0x45	; 69
    26f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    26fa:	08 95       	ret

000026fc <twi_readFrom>:
    26fc:	41 32       	cpi	r20, 0x21	; 33
    26fe:	08 f0       	brcs	.+2      	; 0x2702 <twi_readFrom+0x6>
    2700:	48 c0       	rjmp	.+144    	; 0x2792 <twi_readFrom+0x96>
    2702:	90 91 ef 09 	lds	r25, 0x09EF	; 0x8009ef <twi_state>
    2706:	91 11       	cpse	r25, r1
    2708:	fc cf       	rjmp	.-8      	; 0x2702 <twi_readFrom+0x6>
    270a:	31 e0       	ldi	r19, 0x01	; 1
    270c:	30 93 ef 09 	sts	0x09EF, r19	; 0x8009ef <twi_state>
    2710:	20 93 ed 09 	sts	0x09ED, r18	; 0x8009ed <twi_sendStop>
    2714:	2f ef       	ldi	r18, 0xFF	; 255
    2716:	20 93 82 09 	sts	0x0982, r18	; 0x800982 <twi_error>
    271a:	10 92 c7 09 	sts	0x09C7, r1	; 0x8009c7 <twi_masterBufferIndex>
    271e:	24 0f       	add	r18, r20
    2720:	20 93 c6 09 	sts	0x09C6, r18	; 0x8009c6 <twi_masterBufferLength>
    2724:	10 92 ee 09 	sts	0x09EE, r1	; 0x8009ee <twi_slarw>
    2728:	30 93 ee 09 	sts	0x09EE, r19	; 0x8009ee <twi_slarw>
    272c:	20 91 ee 09 	lds	r18, 0x09EE	; 0x8009ee <twi_slarw>
    2730:	88 0f       	add	r24, r24
    2732:	82 2b       	or	r24, r18
    2734:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <twi_slarw>
    2738:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <twi_inRepStart>
    273c:	81 30       	cpi	r24, 0x01	; 1
    273e:	51 f4       	brne	.+20     	; 0x2754 <twi_readFrom+0x58>
    2740:	10 92 ec 09 	sts	0x09EC, r1	; 0x8009ec <twi_inRepStart>
    2744:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <twi_slarw>
    2748:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    274c:	85 ec       	ldi	r24, 0xC5	; 197
    274e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2752:	03 c0       	rjmp	.+6      	; 0x275a <twi_readFrom+0x5e>
    2754:	85 ee       	ldi	r24, 0xE5	; 229
    2756:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    275a:	80 91 ef 09 	lds	r24, 0x09EF	; 0x8009ef <twi_state>
    275e:	81 30       	cpi	r24, 0x01	; 1
    2760:	e1 f3       	breq	.-8      	; 0x275a <twi_readFrom+0x5e>
    2762:	80 91 c7 09 	lds	r24, 0x09C7	; 0x8009c7 <twi_masterBufferIndex>
    2766:	84 17       	cp	r24, r20
    2768:	10 f4       	brcc	.+4      	; 0x276e <twi_readFrom+0x72>
    276a:	40 91 c7 09 	lds	r20, 0x09C7	; 0x8009c7 <twi_masterBufferIndex>
    276e:	44 23       	and	r20, r20
    2770:	89 f0       	breq	.+34     	; 0x2794 <twi_readFrom+0x98>
    2772:	e8 ec       	ldi	r30, 0xC8	; 200
    2774:	f9 e0       	ldi	r31, 0x09	; 9
    2776:	a6 2f       	mov	r26, r22
    2778:	b7 2f       	mov	r27, r23
    277a:	2f ef       	ldi	r18, 0xFF	; 255
    277c:	24 0f       	add	r18, r20
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	27 53       	subi	r18, 0x37	; 55
    2782:	36 4f       	sbci	r19, 0xF6	; 246
    2784:	81 91       	ld	r24, Z+
    2786:	8d 93       	st	X+, r24
    2788:	e2 17       	cp	r30, r18
    278a:	f3 07       	cpc	r31, r19
    278c:	d9 f7       	brne	.-10     	; 0x2784 <twi_readFrom+0x88>
    278e:	94 2f       	mov	r25, r20
    2790:	01 c0       	rjmp	.+2      	; 0x2794 <twi_readFrom+0x98>
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	89 2f       	mov	r24, r25
    2796:	08 95       	ret

00002798 <twi_writeTo>:
    2798:	0f 93       	push	r16
    279a:	41 32       	cpi	r20, 0x21	; 33
    279c:	08 f0       	brcs	.+2      	; 0x27a0 <twi_writeTo+0x8>
    279e:	53 c0       	rjmp	.+166    	; 0x2846 <twi_writeTo+0xae>
    27a0:	30 91 ef 09 	lds	r19, 0x09EF	; 0x8009ef <twi_state>
    27a4:	31 11       	cpse	r19, r1
    27a6:	fc cf       	rjmp	.-8      	; 0x27a0 <twi_writeTo+0x8>
    27a8:	92 e0       	ldi	r25, 0x02	; 2
    27aa:	90 93 ef 09 	sts	0x09EF, r25	; 0x8009ef <twi_state>
    27ae:	00 93 ed 09 	sts	0x09ED, r16	; 0x8009ed <twi_sendStop>
    27b2:	9f ef       	ldi	r25, 0xFF	; 255
    27b4:	90 93 82 09 	sts	0x0982, r25	; 0x800982 <twi_error>
    27b8:	10 92 c7 09 	sts	0x09C7, r1	; 0x8009c7 <twi_masterBufferIndex>
    27bc:	40 93 c6 09 	sts	0x09C6, r20	; 0x8009c6 <twi_masterBufferLength>
    27c0:	44 23       	and	r20, r20
    27c2:	71 f0       	breq	.+28     	; 0x27e0 <twi_writeTo+0x48>
    27c4:	fb 01       	movw	r30, r22
    27c6:	a8 ec       	ldi	r26, 0xC8	; 200
    27c8:	b9 e0       	ldi	r27, 0x09	; 9
    27ca:	41 50       	subi	r20, 0x01	; 1
    27cc:	50 e0       	ldi	r21, 0x00	; 0
    27ce:	4f 5f       	subi	r20, 0xFF	; 255
    27d0:	5f 4f       	sbci	r21, 0xFF	; 255
    27d2:	64 0f       	add	r22, r20
    27d4:	75 1f       	adc	r23, r21
    27d6:	91 91       	ld	r25, Z+
    27d8:	9d 93       	st	X+, r25
    27da:	e6 17       	cp	r30, r22
    27dc:	f7 07       	cpc	r31, r23
    27de:	d9 f7       	brne	.-10     	; 0x27d6 <twi_writeTo+0x3e>
    27e0:	10 92 ee 09 	sts	0x09EE, r1	; 0x8009ee <twi_slarw>
    27e4:	10 92 ee 09 	sts	0x09EE, r1	; 0x8009ee <twi_slarw>
    27e8:	90 91 ee 09 	lds	r25, 0x09EE	; 0x8009ee <twi_slarw>
    27ec:	88 0f       	add	r24, r24
    27ee:	89 2b       	or	r24, r25
    27f0:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <twi_slarw>
    27f4:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <twi_inRepStart>
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	51 f4       	brne	.+20     	; 0x2810 <twi_writeTo+0x78>
    27fc:	10 92 ec 09 	sts	0x09EC, r1	; 0x8009ec <twi_inRepStart>
    2800:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <twi_slarw>
    2804:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2808:	85 ec       	ldi	r24, 0xC5	; 197
    280a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    280e:	03 c0       	rjmp	.+6      	; 0x2816 <twi_writeTo+0x7e>
    2810:	85 ee       	ldi	r24, 0xE5	; 229
    2812:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2816:	22 23       	and	r18, r18
    2818:	41 f0       	breq	.+16     	; 0x282a <twi_writeTo+0x92>
    281a:	80 91 ef 09 	lds	r24, 0x09EF	; 0x8009ef <twi_state>
    281e:	82 30       	cpi	r24, 0x02	; 2
    2820:	21 f4       	brne	.+8      	; 0x282a <twi_writeTo+0x92>
    2822:	80 91 ef 09 	lds	r24, 0x09EF	; 0x8009ef <twi_state>
    2826:	82 30       	cpi	r24, 0x02	; 2
    2828:	e1 f3       	breq	.-8      	; 0x2822 <twi_writeTo+0x8a>
    282a:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <twi_error>
    282e:	8f 3f       	cpi	r24, 0xFF	; 255
    2830:	79 f0       	breq	.+30     	; 0x2850 <twi_writeTo+0xb8>
    2832:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <twi_error>
    2836:	80 32       	cpi	r24, 0x20	; 32
    2838:	41 f0       	breq	.+16     	; 0x284a <twi_writeTo+0xb2>
    283a:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <twi_error>
    283e:	80 33       	cpi	r24, 0x30	; 48
    2840:	31 f0       	breq	.+12     	; 0x284e <twi_writeTo+0xb6>
    2842:	34 e0       	ldi	r19, 0x04	; 4
    2844:	05 c0       	rjmp	.+10     	; 0x2850 <twi_writeTo+0xb8>
    2846:	31 e0       	ldi	r19, 0x01	; 1
    2848:	03 c0       	rjmp	.+6      	; 0x2850 <twi_writeTo+0xb8>
    284a:	32 e0       	ldi	r19, 0x02	; 2
    284c:	01 c0       	rjmp	.+2      	; 0x2850 <twi_writeTo+0xb8>
    284e:	33 e0       	ldi	r19, 0x03	; 3
    2850:	83 2f       	mov	r24, r19
    2852:	0f 91       	pop	r16
    2854:	08 95       	ret

00002856 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWEA) | (1 << TWINT) | (1 << TWSTO);
    2856:	85 ed       	ldi	r24, 0xD5	; 213
    2858:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & (1 << TWSTO)){
    285c:	ec eb       	ldi	r30, 0xBC	; 188
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	84 fd       	sbrc	r24, 4
    2864:	fd cf       	rjmp	.-6      	; 0x2860 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2866:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <twi_state>
    286a:	08 95       	ret

0000286c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWEA) | (1 << TWINT);
    286c:	85 ec       	ldi	r24, 0xC5	; 197
    286e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  // update twi state
  twi_state = TWI_READY;
    2872:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <twi_state>
    2876:	08 95       	ret

00002878 <__vector_39>:
}

ISR(TWI_vect)
{
    2878:	1f 92       	push	r1
    287a:	0f 92       	push	r0
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	0f 92       	push	r0
    2880:	11 24       	eor	r1, r1
    2882:	0b b6       	in	r0, 0x3b	; 59
    2884:	0f 92       	push	r0
    2886:	2f 93       	push	r18
    2888:	3f 93       	push	r19
    288a:	4f 93       	push	r20
    288c:	5f 93       	push	r21
    288e:	6f 93       	push	r22
    2890:	7f 93       	push	r23
    2892:	8f 93       	push	r24
    2894:	9f 93       	push	r25
    2896:	af 93       	push	r26
    2898:	bf 93       	push	r27
    289a:	ef 93       	push	r30
    289c:	ff 93       	push	r31
  switch(TW_STATUS){
    289e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    28a2:	88 7f       	andi	r24, 0xF8	; 248
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	89 3c       	cpi	r24, 0xC9	; 201
    28a8:	91 05       	cpc	r25, r1
    28aa:	08 f0       	brcs	.+2      	; 0x28ae <__vector_39+0x36>
    28ac:	f0 c0       	rjmp	.+480    	; 0x2a8e <__vector_39+0x216>
    28ae:	fc 01       	movw	r30, r24
    28b0:	88 27       	eor	r24, r24
    28b2:	ee 58       	subi	r30, 0x8E	; 142
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	8f 4f       	sbci	r24, 0xFF	; 255
    28b8:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    28bc:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <twi_slarw>
    28c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
    28c4:	85 ec       	ldi	r24, 0xC5	; 197
    28c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    28ca:	e1 c0       	rjmp	.+450    	; 0x2a8e <__vector_39+0x216>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      	if(twi_masterBufferIndex < twi_masterBufferLength)
    28cc:	90 91 c7 09 	lds	r25, 0x09C7	; 0x8009c7 <twi_masterBufferIndex>
    28d0:	80 91 c6 09 	lds	r24, 0x09C6	; 0x8009c6 <twi_masterBufferLength>
    28d4:	98 17       	cp	r25, r24
    28d6:	80 f4       	brcc	.+32     	; 0x28f8 <__vector_39+0x80>
	{
        	// copy data to output register and ack
        	TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    28d8:	e0 91 c7 09 	lds	r30, 0x09C7	; 0x8009c7 <twi_masterBufferIndex>
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	8e 0f       	add	r24, r30
    28e0:	80 93 c7 09 	sts	0x09C7, r24	; 0x8009c7 <twi_masterBufferIndex>
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	e8 53       	subi	r30, 0x38	; 56
    28e8:	f6 4f       	sbci	r31, 0xF6	; 246
    28ea:	80 81       	ld	r24, Z
    28ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
    28f0:	85 ec       	ldi	r24, 0xC5	; 197
    28f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    28f6:	cb c0       	rjmp	.+406    	; 0x2a8e <__vector_39+0x216>
#endif
        	twi_reply(1);
      	}
	else
	{
		if (twi_sendStop)
    28f8:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <twi_sendStop>
    28fc:	88 23       	and	r24, r24
    28fe:	11 f0       	breq	.+4      	; 0x2904 <__vector_39+0x8c>
		{
        	  	twi_stop();
    2900:	aa df       	rcall	.-172    	; 0x2856 <twi_stop>
    2902:	c5 c0       	rjmp	.+394    	; 0x2a8e <__vector_39+0x216>
  			printf("TWDR is empty\n\r");
#endif
		}
		else 
		{
	  		twi_inRepStart = true;	// we're gonna send the START
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <twi_inRepStart>
	  		// don't enable the interrupt. We'll generate the start, but we 
	  		// avoid handling the interrupt until we're in the next transaction,
	  		// at the point where we would normally issue the start.
			TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    290a:	84 ea       	ldi	r24, 0xA4	; 164
    290c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  		twi_state = TWI_READY;
    2910:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <twi_state>
    2914:	bc c0       	rjmp	.+376    	; 0x2a8e <__vector_39+0x216>
		}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    2916:	80 e2       	ldi	r24, 0x20	; 32
    2918:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <twi_error>
      twi_stop();
    291c:	9c df       	rcall	.-200    	; 0x2856 <twi_stop>
      break;
    291e:	b7 c0       	rjmp	.+366    	; 0x2a8e <__vector_39+0x216>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2920:	80 e3       	ldi	r24, 0x30	; 48
    2922:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <twi_error>
      twi_stop();
    2926:	97 df       	rcall	.-210    	; 0x2856 <twi_stop>
      break;
    2928:	b2 c0       	rjmp	.+356    	; 0x2a8e <__vector_39+0x216>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    292a:	88 e3       	ldi	r24, 0x38	; 56
    292c:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <twi_error>
      twi_releaseBus();
    2930:	9d df       	rcall	.-198    	; 0x286c <twi_releaseBus>
      break;
    2932:	ad c0       	rjmp	.+346    	; 0x2a8e <__vector_39+0x216>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2934:	e0 91 c7 09 	lds	r30, 0x09C7	; 0x8009c7 <twi_masterBufferIndex>
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	8e 0f       	add	r24, r30
    293c:	80 93 c7 09 	sts	0x09C7, r24	; 0x8009c7 <twi_masterBufferIndex>
    2940:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	e8 53       	subi	r30, 0x38	; 56
    2948:	f6 4f       	sbci	r31, 0xF6	; 246
    294a:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    294c:	90 91 c7 09 	lds	r25, 0x09C7	; 0x8009c7 <twi_masterBufferIndex>
    2950:	80 91 c6 09 	lds	r24, 0x09C6	; 0x8009c6 <twi_masterBufferLength>
    2954:	98 17       	cp	r25, r24
    2956:	20 f4       	brcc	.+8      	; 0x2960 <__vector_39+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
    2958:	85 ec       	ldi	r24, 0xC5	; 197
    295a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    295e:	97 c0       	rjmp	.+302    	; 0x2a8e <__vector_39+0x216>
  }else{
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
    2960:	85 e8       	ldi	r24, 0x85	; 133
    2962:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2966:	93 c0       	rjmp	.+294    	; 0x2a8e <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2968:	e0 91 c7 09 	lds	r30, 0x09C7	; 0x8009c7 <twi_masterBufferIndex>
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	8e 0f       	add	r24, r30
    2970:	80 93 c7 09 	sts	0x09C7, r24	; 0x8009c7 <twi_masterBufferIndex>
    2974:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	e8 53       	subi	r30, 0x38	; 56
    297c:	f6 4f       	sbci	r31, 0xF6	; 246
    297e:	80 83       	st	Z, r24
	if (twi_sendStop)
    2980:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <twi_sendStop>
    2984:	88 23       	and	r24, r24
          twi_stop();
    2986:	11 f0       	breq	.+4      	; 0x298c <__vector_39+0x114>
    2988:	66 df       	rcall	.-308    	; 0x2856 <twi_stop>
    298a:	81 c0       	rjmp	.+258    	; 0x2a8e <__vector_39+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2992:	84 ea       	ldi	r24, 0xA4	; 164
    2994:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	  twi_state = TWI_READY;
    2998:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <twi_state>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    299c:	78 c0       	rjmp	.+240    	; 0x2a8e <__vector_39+0x216>
    299e:	5b df       	rcall	.-330    	; 0x2856 <twi_stop>
      break;
    29a0:	76 c0       	rjmp	.+236    	; 0x2a8e <__vector_39+0x216>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    29a2:	83 e0       	ldi	r24, 0x03	; 3
    29a4:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    29a8:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
    29ac:	85 ec       	ldi	r24, 0xC5	; 197
    29ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    29b2:	6d c0       	rjmp	.+218    	; 0x2a8e <__vector_39+0x216>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    29b4:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <twi_rxBufferIndex>
    29b8:	80 32       	cpi	r24, 0x20	; 32
    29ba:	80 f4       	brcc	.+32     	; 0x29dc <__vector_39+0x164>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    29bc:	e0 91 83 09 	lds	r30, 0x0983	; 0x800983 <twi_rxBufferIndex>
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	8e 0f       	add	r24, r30
    29c4:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <twi_rxBufferIndex>
    29c8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	ec 57       	subi	r30, 0x7C	; 124
    29d0:	f6 4f       	sbci	r31, 0xF6	; 246
    29d2:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
    29d4:	85 ec       	ldi	r24, 0xC5	; 197
    29d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    29da:	59 c0       	rjmp	.+178    	; 0x2a8e <__vector_39+0x216>
  }else{
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
    29dc:	85 e8       	ldi	r24, 0x85	; 133
    29de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    29e2:	55 c0       	rjmp	.+170    	; 0x2a8e <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    29e4:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <twi_rxBufferIndex>
    29e8:	80 32       	cpi	r24, 0x20	; 32
    29ea:	30 f4       	brcc	.+12     	; 0x29f8 <__vector_39+0x180>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    29ec:	e0 91 83 09 	lds	r30, 0x0983	; 0x800983 <twi_rxBufferIndex>
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	ec 57       	subi	r30, 0x7C	; 124
    29f4:	f6 4f       	sbci	r31, 0xF6	; 246
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    29f6:	10 82       	st	Z, r1
    29f8:	2e df       	rcall	.-420    	; 0x2856 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    29fa:	60 91 83 09 	lds	r22, 0x0983	; 0x800983 <twi_rxBufferIndex>
    29fe:	70 e0       	ldi	r23, 0x00	; 0
    2a00:	e0 91 e8 09 	lds	r30, 0x09E8	; 0x8009e8 <twi_onSlaveReceive>
    2a04:	f0 91 e9 09 	lds	r31, 0x09E9	; 0x8009e9 <twi_onSlaveReceive+0x1>
    2a08:	84 e8       	ldi	r24, 0x84	; 132
    2a0a:	99 e0       	ldi	r25, 0x09	; 9
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2a0c:	19 95       	eicall
    2a0e:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <twi_rxBufferIndex>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2a12:	2c df       	rcall	.-424    	; 0x286c <twi_releaseBus>
      break;
    2a14:	3c c0       	rjmp	.+120    	; 0x2a8e <__vector_39+0x216>
{
  // transmit master read ready signal, with or without ack
  if(ack){
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
  }else{
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
    2a16:	85 e8       	ldi	r24, 0x85	; 133
    2a18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2a1c:	38 c0       	rjmp	.+112    	; 0x2a8e <__vector_39+0x216>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2a1e:	84 e0       	ldi	r24, 0x04	; 4
    2a20:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2a24:	10 92 a5 09 	sts	0x09A5, r1	; 0x8009a5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2a28:	10 92 a4 09 	sts	0x09A4, r1	; 0x8009a4 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2a2c:	e0 91 ea 09 	lds	r30, 0x09EA	; 0x8009ea <twi_onSlaveTransmit>
    2a30:	f0 91 eb 09 	lds	r31, 0x09EB	; 0x8009eb <twi_onSlaveTransmit+0x1>
    2a34:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2a36:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <twi_txBufferLength>
    2a3a:	81 11       	cpse	r24, r1
    2a3c:	05 c0       	rjmp	.+10     	; 0x2a48 <__vector_39+0x1d0>
        twi_txBufferLength = 1;
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2a44:	10 92 a6 09 	sts	0x09A6, r1	; 0x8009a6 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2a48:	e0 91 a5 09 	lds	r30, 0x09A5	; 0x8009a5 <twi_txBufferIndex>
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	8e 0f       	add	r24, r30
    2a50:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <twi_txBufferIndex>
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	ea 55       	subi	r30, 0x5A	; 90
    2a58:	f6 4f       	sbci	r31, 0xF6	; 246
    2a5a:	80 81       	ld	r24, Z
    2a5c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2a60:	90 91 a5 09 	lds	r25, 0x09A5	; 0x8009a5 <twi_txBufferIndex>
    2a64:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <twi_txBufferLength>
    2a68:	98 17       	cp	r25, r24
    2a6a:	20 f4       	brcc	.+8      	; 0x2a74 <__vector_39+0x1fc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
    2a6c:	85 ec       	ldi	r24, 0xC5	; 197
    2a6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2a72:	0d c0       	rjmp	.+26     	; 0x2a8e <__vector_39+0x216>
  }else{
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
    2a74:	85 e8       	ldi	r24, 0x85	; 133
    2a76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2a7a:	09 c0       	rjmp	.+18     	; 0x2a8e <__vector_39+0x216>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
    2a7c:	85 ec       	ldi	r24, 0xC5	; 197
    2a7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2a82:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <twi_state>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2a86:	03 c0       	rjmp	.+6      	; 0x2a8e <__vector_39+0x216>
    2a88:	10 92 82 09 	sts	0x0982, r1	; 0x800982 <twi_error>
      twi_stop();
    2a8c:	e4 de       	rcall	.-568    	; 0x2856 <twi_stop>
      break;
  }
}
    2a8e:	ff 91       	pop	r31
    2a90:	ef 91       	pop	r30
    2a92:	bf 91       	pop	r27
    2a94:	af 91       	pop	r26
    2a96:	9f 91       	pop	r25
    2a98:	8f 91       	pop	r24
    2a9a:	7f 91       	pop	r23
    2a9c:	6f 91       	pop	r22
    2a9e:	5f 91       	pop	r21
    2aa0:	4f 91       	pop	r20
    2aa2:	3f 91       	pop	r19
    2aa4:	2f 91       	pop	r18
    2aa6:	0f 90       	pop	r0
    2aa8:	0b be       	out	0x3b, r0	; 59
    2aaa:	0f 90       	pop	r0
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	0f 90       	pop	r0
    2ab0:	1f 90       	pop	r1
    2ab2:	18 95       	reti

00002ab4 <UART0_p_putchar>:
		return 1;
	}
	else{
		return 0;
	}
}
    2ab4:	cf 93       	push	r28
    2ab6:	c8 2f       	mov	r28, r24
    2ab8:	8a 30       	cpi	r24, 0x0A	; 10
    2aba:	11 f4       	brne	.+4      	; 0x2ac0 <UART0_p_putchar+0xc>
    2abc:	8d e0       	ldi	r24, 0x0D	; 13
    2abe:	fa df       	rcall	.-12     	; 0x2ab4 <UART0_p_putchar>
    2ac0:	e0 ec       	ldi	r30, 0xC0	; 192
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	85 ff       	sbrs	r24, 5
    2ac8:	fd cf       	rjmp	.-6      	; 0x2ac4 <UART0_p_putchar+0x10>
    2aca:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2ace:	cf 91       	pop	r28
    2ad0:	08 95       	ret

00002ad2 <__vector_25>:
    2ad2:	1f 92       	push	r1
    2ad4:	0f 92       	push	r0
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	0f 92       	push	r0
    2ada:	11 24       	eor	r1, r1
    2adc:	0b b6       	in	r0, 0x3b	; 59
    2ade:	0f 92       	push	r0
    2ae0:	2f 93       	push	r18
    2ae2:	3f 93       	push	r19
    2ae4:	8f 93       	push	r24
    2ae6:	9f 93       	push	r25
    2ae8:	ef 93       	push	r30
    2aea:	ff 93       	push	r31
    2aec:	e0 91 f1 09 	lds	r30, 0x09F1	; 0x8009f1 <uart0_rx_idx>
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	8e 0f       	add	r24, r30
    2af4:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <uart0_rx_idx>
    2af8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	ed 52       	subi	r30, 0x2D	; 45
    2b00:	f4 4f       	sbci	r31, 0xF4	; 244
    2b02:	90 83       	st	Z, r25
    2b04:	28 2f       	mov	r18, r24
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	f9 01       	movw	r30, r18
    2b0a:	ee 52       	subi	r30, 0x2E	; 46
    2b0c:	f4 4f       	sbci	r31, 0xF4	; 244
    2b0e:	90 81       	ld	r25, Z
    2b10:	9a 30       	cpi	r25, 0x0A	; 10
    2b12:	51 f4       	brne	.+20     	; 0x2b28 <__vector_25+0x56>
    2b14:	f9 01       	movw	r30, r18
    2b16:	ed 52       	subi	r30, 0x2D	; 45
    2b18:	f4 4f       	sbci	r31, 0xF4	; 244
    2b1a:	10 82       	st	Z, r1
    2b1c:	10 92 f1 09 	sts	0x09F1, r1	; 0x8009f1 <uart0_rx_idx>
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	80 93 f0 09 	sts	0x09F0, r24	; 0x8009f0 <uart0_rx_str_flag>
    2b26:	04 c0       	rjmp	.+8      	; 0x2b30 <__vector_25+0x5e>
    2b28:	8e 3f       	cpi	r24, 0xFE	; 254
    2b2a:	10 f0       	brcs	.+4      	; 0x2b30 <__vector_25+0x5e>
    2b2c:	10 92 f1 09 	sts	0x09F1, r1	; 0x8009f1 <uart0_rx_idx>
    2b30:	ff 91       	pop	r31
    2b32:	ef 91       	pop	r30
    2b34:	9f 91       	pop	r25
    2b36:	8f 91       	pop	r24
    2b38:	3f 91       	pop	r19
    2b3a:	2f 91       	pop	r18
    2b3c:	0f 90       	pop	r0
    2b3e:	0b be       	out	0x3b, r0	; 59
    2b40:	0f 90       	pop	r0
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	0f 90       	pop	r0
    2b46:	1f 90       	pop	r1
    2b48:	18 95       	reti

00002b4a <UART0_init>:
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	88 0f       	add	r24, r24
    2b50:	99 1f       	adc	r25, r25
    2b52:	aa 1f       	adc	r26, r26
    2b54:	bb 1f       	adc	r27, r27
    2b56:	88 0f       	add	r24, r24
    2b58:	99 1f       	adc	r25, r25
    2b5a:	aa 1f       	adc	r26, r26
    2b5c:	bb 1f       	adc	r27, r27
    2b5e:	9c 01       	movw	r18, r24
    2b60:	ad 01       	movw	r20, r26
    2b62:	22 0f       	add	r18, r18
    2b64:	33 1f       	adc	r19, r19
    2b66:	44 1f       	adc	r20, r20
    2b68:	55 1f       	adc	r21, r21
    2b6a:	60 e0       	ldi	r22, 0x00	; 0
    2b6c:	74 e2       	ldi	r23, 0x24	; 36
    2b6e:	84 ef       	ldi	r24, 0xF4	; 244
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	0e 94 33 20 	call	0x4066	; 0x4066 <__udivmodsi4>
    2b76:	21 50       	subi	r18, 0x01	; 1
    2b78:	31 09       	sbc	r19, r1
    2b7a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    2b7e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    2b82:	82 e0       	ldi	r24, 0x02	; 2
    2b84:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2b88:	88 e9       	ldi	r24, 0x98	; 152
    2b8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    2b8e:	86 e0       	ldi	r24, 0x06	; 6
    2b90:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    2b94:	82 e0       	ldi	r24, 0x02	; 2
    2b96:	92 e0       	ldi	r25, 0x02	; 2
    2b98:	90 93 d5 0d 	sts	0x0DD5, r25	; 0x800dd5 <__iob+0x3>
    2b9c:	80 93 d4 0d 	sts	0x0DD4, r24	; 0x800dd4 <__iob+0x2>
    2ba0:	08 95       	ret

00002ba2 <hex2ascii>:
	}
}

char hex2ascii(unsigned char a)
{
	if (a > 9) {
    2ba2:	8a 30       	cpi	r24, 0x0A	; 10
    2ba4:	10 f0       	brcs	.+4      	; 0x2baa <hex2ascii+0x8>
		return a + 0x37;
    2ba6:	89 5c       	subi	r24, 0xC9	; 201
    2ba8:	08 95       	ret
	}
	else {
		return a + 0x30;
    2baa:	80 5d       	subi	r24, 0xD0	; 208
	}
}
    2bac:	08 95       	ret

00002bae <UART0_GPS_send>:
		return 0;
	}
}

void UART0_GPS_send(char *s)
{
    2bae:	ef 92       	push	r14
    2bb0:	ff 92       	push	r15
    2bb2:	1f 93       	push	r17
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
	unsigned char bChecksum = 0;
	unsigned char asterisk_idx = 0;
	unsigned char count = 0;

	for (unsigned char i = 0; i < strlen(s); i++) {
    2bb8:	fc 01       	movw	r30, r24
    2bba:	01 90       	ld	r0, Z+
    2bbc:	00 20       	and	r0, r0
    2bbe:	e9 f7       	brne	.-6      	; 0x2bba <UART0_GPS_send+0xc>
    2bc0:	31 97       	sbiw	r30, 0x01	; 1
    2bc2:	af 01       	movw	r20, r30
    2bc4:	48 1b       	sub	r20, r24
    2bc6:	59 0b       	sbc	r21, r25
    2bc8:	c0 e0       	ldi	r28, 0x00	; 0

void UART0_GPS_send(char *s)
{
	unsigned char bChecksum = 0;
	unsigned char asterisk_idx = 0;
	unsigned char count = 0;
    2bca:	60 e0       	ldi	r22, 0x00	; 0

	for (unsigned char i = 0; i < strlen(s); i++) {
    2bcc:	0a c0       	rjmp	.+20     	; 0x2be2 <UART0_GPS_send+0x34>
		if (s[i] == ',' && count == 8) {
    2bce:	fc 01       	movw	r30, r24
    2bd0:	e2 0f       	add	r30, r18
    2bd2:	f3 1f       	adc	r31, r19
    2bd4:	20 81       	ld	r18, Z
    2bd6:	2c 32       	cpi	r18, 0x2C	; 44
    2bd8:	19 f4       	brne	.+6      	; 0x2be0 <UART0_GPS_send+0x32>
    2bda:	68 30       	cpi	r22, 0x08	; 8
    2bdc:	41 f0       	breq	.+16     	; 0x2bee <UART0_GPS_send+0x40>
			asterisk_idx = i;
			break;
		}
		else if (s[i] == ',') {
			count++;
    2bde:	6f 5f       	subi	r22, 0xFF	; 255
{
	unsigned char bChecksum = 0;
	unsigned char asterisk_idx = 0;
	unsigned char count = 0;

	for (unsigned char i = 0; i < strlen(s); i++) {
    2be0:	cf 5f       	subi	r28, 0xFF	; 255
    2be2:	2c 2f       	mov	r18, r28
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	24 17       	cp	r18, r20
    2be8:	35 07       	cpc	r19, r21
    2bea:	88 f3       	brcs	.-30     	; 0x2bce <UART0_GPS_send+0x20>
    2bec:	5a c0       	rjmp	.+180    	; 0x2ca2 <UART0_GPS_send+0xf4>
		else if (s[i] == ',') {
			count++;
		}
	}

	UART0_TxBuffer[0] = '$';
    2bee:	24 e2       	ldi	r18, 0x24	; 36
    2bf0:	20 93 52 0b 	sts	0x0B52, r18	; 0x800b52 <UART0_TxBuffer>

	for (unsigned char i = 20; i < asterisk_idx; i++) {
    2bf4:	c5 31       	cpi	r28, 0x15	; 21
    2bf6:	d8 f0       	brcs	.+54     	; 0x2c2e <UART0_GPS_send+0x80>
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	a1 e5       	ldi	r26, 0x51	; 81
    2bfc:	bb e0       	ldi	r27, 0x0B	; 11
    2bfe:	94 e1       	ldi	r25, 0x14	; 20
		if (i < 30) {
    2c00:	9e 31       	cpi	r25, 0x1E	; 30
    2c02:	28 f4       	brcc	.+10     	; 0x2c0e <UART0_GPS_send+0x60>
			UART0_TxBuffer[i - 19] = s[i];
    2c04:	84 89       	ldd	r24, Z+20	; 0x14
    2c06:	12 96       	adiw	r26, 0x02	; 2
    2c08:	8c 93       	st	X, r24
    2c0a:	12 97       	sbiw	r26, 0x02	; 2
    2c0c:	0b c0       	rjmp	.+22     	; 0x2c24 <UART0_GPS_send+0x76>
		}
		else if (i > 30 && i < 43) {
    2c0e:	81 ee       	ldi	r24, 0xE1	; 225
    2c10:	89 0f       	add	r24, r25
    2c12:	8c 30       	cpi	r24, 0x0C	; 12
    2c14:	18 f4       	brcc	.+6      	; 0x2c1c <UART0_GPS_send+0x6e>
			UART0_TxBuffer[i - 21] = s[i];
    2c16:	84 89       	ldd	r24, Z+20	; 0x14
    2c18:	8c 93       	st	X, r24
    2c1a:	04 c0       	rjmp	.+8      	; 0x2c24 <UART0_GPS_send+0x76>
		}
		else if (i > 44) {
    2c1c:	9d 32       	cpi	r25, 0x2D	; 45
    2c1e:	10 f0       	brcs	.+4      	; 0x2c24 <UART0_GPS_send+0x76>
			UART0_TxBuffer[i - 21] = s[i];
    2c20:	84 89       	ldd	r24, Z+20	; 0x14
    2c22:	8c 93       	st	X, r24
		}
	}

	UART0_TxBuffer[0] = '$';

	for (unsigned char i = 20; i < asterisk_idx; i++) {
    2c24:	9f 5f       	subi	r25, 0xFF	; 255
    2c26:	31 96       	adiw	r30, 0x01	; 1
    2c28:	11 96       	adiw	r26, 0x01	; 1
    2c2a:	c9 13       	cpse	r28, r25
    2c2c:	e9 cf       	rjmp	.-46     	; 0x2c00 <UART0_GPS_send+0x52>
		else if (i > 44) {
			UART0_TxBuffer[i - 21] = s[i];
		}
	}

	UART0_TxBuffer[asterisk_idx] = '*';
    2c2e:	d0 e0       	ldi	r29, 0x00	; 0
    2c30:	fe 01       	movw	r30, r28
    2c32:	ee 5a       	subi	r30, 0xAE	; 174
    2c34:	f4 4f       	sbci	r31, 0xF4	; 244
    2c36:	8a e2       	ldi	r24, 0x2A	; 42
    2c38:	80 83       	st	Z, r24

	for (unsigned char i = 1; UART0_TxBuffer[i] != '*'; i++) {
    2c3a:	80 91 53 0b 	lds	r24, 0x0B53	; 0x800b53 <UART0_TxBuffer+0x1>
    2c3e:	8a 32       	cpi	r24, 0x2A	; 42
    2c40:	61 f0       	breq	.+24     	; 0x2c5a <UART0_GPS_send+0xac>
    2c42:	91 e0       	ldi	r25, 0x01	; 1
    2c44:	10 e0       	ldi	r17, 0x00	; 0
		bChecksum ^= UART0_TxBuffer[i];
    2c46:	18 27       	eor	r17, r24
		}
	}

	UART0_TxBuffer[asterisk_idx] = '*';

	for (unsigned char i = 1; UART0_TxBuffer[i] != '*'; i++) {
    2c48:	9f 5f       	subi	r25, 0xFF	; 255
    2c4a:	e9 2f       	mov	r30, r25
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	ee 5a       	subi	r30, 0xAE	; 174
    2c50:	f4 4f       	sbci	r31, 0xF4	; 244
    2c52:	80 81       	ld	r24, Z
    2c54:	8a 32       	cpi	r24, 0x2A	; 42
    2c56:	b9 f7       	brne	.-18     	; 0x2c46 <UART0_GPS_send+0x98>
    2c58:	01 c0       	rjmp	.+2      	; 0x2c5c <UART0_GPS_send+0xae>
	}
}

void UART0_GPS_send(char *s)
{
	unsigned char bChecksum = 0;
    2c5a:	10 e0       	ldi	r17, 0x00	; 0
	UART0_TxBuffer[asterisk_idx] = '*';

	for (unsigned char i = 1; UART0_TxBuffer[i] != '*'; i++) {
		bChecksum ^= UART0_TxBuffer[i];
	}
	UART0_TxBuffer[asterisk_idx + 1] = hex2ascii((int)(bChecksum / 16));
    2c5c:	81 2f       	mov	r24, r17
    2c5e:	82 95       	swap	r24
    2c60:	8f 70       	andi	r24, 0x0F	; 15
    2c62:	9f df       	rcall	.-194    	; 0x2ba2 <hex2ascii>
    2c64:	9e 01       	movw	r18, r28
    2c66:	2e 5a       	subi	r18, 0xAE	; 174
    2c68:	34 4f       	sbci	r19, 0xF4	; 244
    2c6a:	79 01       	movw	r14, r18
    2c6c:	f9 01       	movw	r30, r18
    2c6e:	81 83       	std	Z+1, r24	; 0x01
	UART0_TxBuffer[asterisk_idx + 2] = hex2ascii((int)(bChecksum % 16));
    2c70:	81 2f       	mov	r24, r17
    2c72:	8f 70       	andi	r24, 0x0F	; 15
    2c74:	96 df       	rcall	.-212    	; 0x2ba2 <hex2ascii>
    2c76:	f7 01       	movw	r30, r14
    2c78:	82 83       	std	Z+2, r24	; 0x02
	UART0_TxBuffer[asterisk_idx + 3] = '\n';
    2c7a:	8a e0       	ldi	r24, 0x0A	; 10
    2c7c:	83 83       	std	Z+3, r24	; 0x03

	for (unsigned char i = 0; i < (asterisk_idx+4); i++) {
    2c7e:	24 96       	adiw	r28, 0x04	; 4
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	10 e0       	ldi	r17, 0x00	; 0
		printf("%c", UART0_TxBuffer[i]);
    2c86:	fc 01       	movw	r30, r24
    2c88:	ee 5a       	subi	r30, 0xAE	; 174
    2c8a:	f4 4f       	sbci	r31, 0xF4	; 244
    2c8c:	80 81       	ld	r24, Z
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	0e 94 0d 22 	call	0x441a	; 0x441a <putchar>
	}
	UART0_TxBuffer[asterisk_idx + 1] = hex2ascii((int)(bChecksum / 16));
	UART0_TxBuffer[asterisk_idx + 2] = hex2ascii((int)(bChecksum % 16));
	UART0_TxBuffer[asterisk_idx + 3] = '\n';

	for (unsigned char i = 0; i < (asterisk_idx+4); i++) {
    2c94:	1f 5f       	subi	r17, 0xFF	; 255
    2c96:	81 2f       	mov	r24, r17
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	8c 17       	cp	r24, r28
    2c9c:	9d 07       	cpc	r25, r29
    2c9e:	9c f3       	brlt	.-26     	; 0x2c86 <UART0_GPS_send+0xd8>
    2ca0:	05 c0       	rjmp	.+10     	; 0x2cac <UART0_GPS_send+0xfe>
		else if (s[i] == ',') {
			count++;
		}
	}

	UART0_TxBuffer[0] = '$';
    2ca2:	84 e2       	ldi	r24, 0x24	; 36
    2ca4:	80 93 52 0b 	sts	0x0B52, r24	; 0x800b52 <UART0_TxBuffer>
}

void UART0_GPS_send(char *s)
{
	unsigned char bChecksum = 0;
	unsigned char asterisk_idx = 0;
    2ca8:	c0 e0       	ldi	r28, 0x00	; 0
    2caa:	c1 cf       	rjmp	.-126    	; 0x2c2e <UART0_GPS_send+0x80>
	UART0_TxBuffer[asterisk_idx + 3] = '\n';

	for (unsigned char i = 0; i < (asterisk_idx+4); i++) {
		printf("%c", UART0_TxBuffer[i]);
	}
}
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	1f 91       	pop	r17
    2cb2:	ff 90       	pop	r15
    2cb4:	ef 90       	pop	r14
    2cb6:	08 95       	ret

00002cb8 <UART0_IMU_send>:

void UART0_IMU_send(float _heading)
{
    2cb8:	cf 92       	push	r12
    2cba:	df 92       	push	r13
    2cbc:	ef 92       	push	r14
    2cbe:	ff 92       	push	r15
    2cc0:	0f 93       	push	r16
    2cc2:	1f 93       	push	r17
    2cc4:	cf 93       	push	r28
    2cc6:	df 93       	push	r29
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    2ccc:	64 97       	sbiw	r28, 0x14	; 20
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
	char s[20];
	unsigned char bChecksum = 0;
	
	UART0_TxBuffer[0] = '@';
    2cd8:	20 e4       	ldi	r18, 0x40	; 64
    2cda:	20 93 52 0b 	sts	0x0B52, r18	; 0x800b52 <UART0_TxBuffer>
	itoa((int)(_heading*10), s, 10);
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e2       	ldi	r20, 0x20	; 32
    2ce4:	51 e4       	ldi	r21, 0x41	; 65
    2ce6:	49 d4       	rcall	.+2194   	; 0x357a <__mulsf3>
    2ce8:	39 d3       	rcall	.+1650   	; 0x335c <__fixsfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	4a e0       	ldi	r20, 0x0A	; 10
    2cf0:	50 e0       	ldi	r21, 0x00	; 0
    2cf2:	be 01       	movw	r22, r28
    2cf4:	6f 5f       	subi	r22, 0xFF	; 255
    2cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf8:	0e 94 91 21 	call	0x4322	; 0x4322 <itoa>

	for (unsigned char i = 0; i < strlen(s); i++) {
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	de 01       	movw	r26, r28
    2d00:	11 96       	adiw	r26, 0x01	; 1
    2d02:	0c c0       	rjmp	.+24     	; 0x2d1c <UART0_IMU_send+0x64>
		
		UART0_TxBuffer[i+1] = s[i];
    2d04:	82 2f       	mov	r24, r18
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	ac 01       	movw	r20, r24
    2d0a:	4e 5a       	subi	r20, 0xAE	; 174
    2d0c:	54 4f       	sbci	r21, 0xF4	; 244
    2d0e:	8a 0f       	add	r24, r26
    2d10:	9b 1f       	adc	r25, r27
    2d12:	fc 01       	movw	r30, r24
    2d14:	80 81       	ld	r24, Z
    2d16:	fa 01       	movw	r30, r20
    2d18:	81 83       	std	Z+1, r24	; 0x01
	unsigned char bChecksum = 0;
	
	UART0_TxBuffer[0] = '@';
	itoa((int)(_heading*10), s, 10);

	for (unsigned char i = 0; i < strlen(s); i++) {
    2d1a:	2f 5f       	subi	r18, 0xFF	; 255
    2d1c:	fd 01       	movw	r30, r26
    2d1e:	01 90       	ld	r0, Z+
    2d20:	00 20       	and	r0, r0
    2d22:	e9 f7       	brne	.-6      	; 0x2d1e <UART0_IMU_send+0x66>
    2d24:	31 97       	sbiw	r30, 0x01	; 1
    2d26:	ea 1b       	sub	r30, r26
    2d28:	fb 0b       	sbc	r31, r27
    2d2a:	82 2f       	mov	r24, r18
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	8e 17       	cp	r24, r30
    2d30:	9f 07       	cpc	r25, r31
    2d32:	40 f3       	brcs	.-48     	; 0x2d04 <UART0_IMU_send+0x4c>
		
		UART0_TxBuffer[i+1] = s[i];
	}
	UART0_TxBuffer[strlen(s) + 1] = '*';
    2d34:	ee 5a       	subi	r30, 0xAE	; 174
    2d36:	f4 4f       	sbci	r31, 0xF4	; 244
    2d38:	8a e2       	ldi	r24, 0x2A	; 42
    2d3a:	81 83       	std	Z+1, r24	; 0x01

	for (unsigned char i = 1; UART0_TxBuffer[i] != '*'; i++) {
    2d3c:	80 91 53 0b 	lds	r24, 0x0B53	; 0x800b53 <UART0_TxBuffer+0x1>
    2d40:	8a 32       	cpi	r24, 0x2A	; 42
    2d42:	61 f0       	breq	.+24     	; 0x2d5c <UART0_IMU_send+0xa4>
    2d44:	91 e0       	ldi	r25, 0x01	; 1
    2d46:	10 e0       	ldi	r17, 0x00	; 0
		bChecksum ^= UART0_TxBuffer[i];
    2d48:	18 27       	eor	r17, r24
		
		UART0_TxBuffer[i+1] = s[i];
	}
	UART0_TxBuffer[strlen(s) + 1] = '*';

	for (unsigned char i = 1; UART0_TxBuffer[i] != '*'; i++) {
    2d4a:	9f 5f       	subi	r25, 0xFF	; 255
    2d4c:	e9 2f       	mov	r30, r25
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	ee 5a       	subi	r30, 0xAE	; 174
    2d52:	f4 4f       	sbci	r31, 0xF4	; 244
    2d54:	80 81       	ld	r24, Z
    2d56:	8a 32       	cpi	r24, 0x2A	; 42
    2d58:	b9 f7       	brne	.-18     	; 0x2d48 <UART0_IMU_send+0x90>
    2d5a:	01 c0       	rjmp	.+2      	; 0x2d5e <UART0_IMU_send+0xa6>
}

void UART0_IMU_send(float _heading)
{
	char s[20];
	unsigned char bChecksum = 0;
    2d5c:	10 e0       	ldi	r17, 0x00	; 0
	UART0_TxBuffer[strlen(s) + 1] = '*';

	for (unsigned char i = 1; UART0_TxBuffer[i] != '*'; i++) {
		bChecksum ^= UART0_TxBuffer[i];
	}
	UART0_TxBuffer[strlen(s) + 2] = hex2ascii((int)(bChecksum / 16));
    2d5e:	ce 01       	movw	r24, r28
    2d60:	01 96       	adiw	r24, 0x01	; 1
    2d62:	6c 01       	movw	r12, r24
    2d64:	fc 01       	movw	r30, r24
    2d66:	01 90       	ld	r0, Z+
    2d68:	00 20       	and	r0, r0
    2d6a:	e9 f7       	brne	.-6      	; 0x2d66 <UART0_IMU_send+0xae>
    2d6c:	31 97       	sbiw	r30, 0x01	; 1
    2d6e:	7f 01       	movw	r14, r30
    2d70:	e8 1a       	sub	r14, r24
    2d72:	f9 0a       	sbc	r15, r25
    2d74:	81 2f       	mov	r24, r17
    2d76:	82 95       	swap	r24
    2d78:	8f 70       	andi	r24, 0x0F	; 15
    2d7a:	13 df       	rcall	.-474    	; 0x2ba2 <hex2ascii>
    2d7c:	f7 01       	movw	r30, r14
    2d7e:	ee 5a       	subi	r30, 0xAE	; 174
    2d80:	f4 4f       	sbci	r31, 0xF4	; 244
    2d82:	82 83       	std	Z+2, r24	; 0x02
	UART0_TxBuffer[strlen(s) + 3] = hex2ascii((int)(bChecksum % 16));
    2d84:	f6 01       	movw	r30, r12
    2d86:	01 90       	ld	r0, Z+
    2d88:	00 20       	and	r0, r0
    2d8a:	e9 f7       	brne	.-6      	; 0x2d86 <UART0_IMU_send+0xce>
    2d8c:	31 97       	sbiw	r30, 0x01	; 1
    2d8e:	7f 01       	movw	r14, r30
    2d90:	ec 18       	sub	r14, r12
    2d92:	fd 08       	sbc	r15, r13
    2d94:	81 2f       	mov	r24, r17
    2d96:	8f 70       	andi	r24, 0x0F	; 15
    2d98:	04 df       	rcall	.-504    	; 0x2ba2 <hex2ascii>
    2d9a:	f7 01       	movw	r30, r14
    2d9c:	ee 5a       	subi	r30, 0xAE	; 174
    2d9e:	f4 4f       	sbci	r31, 0xF4	; 244
    2da0:	83 83       	std	Z+3, r24	; 0x03
	UART0_TxBuffer[strlen(s) + 4] = '\n';
    2da2:	f6 01       	movw	r30, r12
    2da4:	01 90       	ld	r0, Z+
    2da6:	00 20       	and	r0, r0
    2da8:	e9 f7       	brne	.-6      	; 0x2da4 <UART0_IMU_send+0xec>
    2daa:	ec 19       	sub	r30, r12
    2dac:	fd 09       	sbc	r31, r13
    2dae:	ef 5a       	subi	r30, 0xAF	; 175
    2db0:	f4 4f       	sbci	r31, 0xF4	; 244
    2db2:	8a e0       	ldi	r24, 0x0A	; 10
    2db4:	84 83       	std	Z+4, r24	; 0x04

	for (unsigned char i = 0; i < (strlen(s) + 5); i++) {
    2db6:	f1 2c       	mov	r15, r1
    2db8:	86 01       	movw	r16, r12
    2dba:	09 c0       	rjmp	.+18     	; 0x2dce <UART0_IMU_send+0x116>
		printf("%c", UART0_TxBuffer[i]);
    2dbc:	ef 2d       	mov	r30, r15
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	ee 5a       	subi	r30, 0xAE	; 174
    2dc2:	f4 4f       	sbci	r31, 0xF4	; 244
    2dc4:	80 81       	ld	r24, Z
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	0e 94 0d 22 	call	0x441a	; 0x441a <putchar>
	}
	UART0_TxBuffer[strlen(s) + 2] = hex2ascii((int)(bChecksum / 16));
	UART0_TxBuffer[strlen(s) + 3] = hex2ascii((int)(bChecksum % 16));
	UART0_TxBuffer[strlen(s) + 4] = '\n';

	for (unsigned char i = 0; i < (strlen(s) + 5); i++) {
    2dcc:	f3 94       	inc	r15
    2dce:	f8 01       	movw	r30, r16
    2dd0:	01 90       	ld	r0, Z+
    2dd2:	00 20       	and	r0, r0
    2dd4:	e9 f7       	brne	.-6      	; 0x2dd0 <UART0_IMU_send+0x118>
    2dd6:	cf 01       	movw	r24, r30
    2dd8:	80 1b       	sub	r24, r16
    2dda:	91 0b       	sbc	r25, r17
    2ddc:	2f 2d       	mov	r18, r15
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	04 96       	adiw	r24, 0x04	; 4
    2de2:	28 17       	cp	r18, r24
    2de4:	39 07       	cpc	r19, r25
    2de6:	50 f3       	brcs	.-44     	; 0x2dbc <UART0_IMU_send+0x104>
		printf("%c", UART0_TxBuffer[i]);
	}
}
    2de8:	64 96       	adiw	r28, 0x14	; 20
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	ff 90       	pop	r15
    2dfe:	ef 90       	pop	r14
    2e00:	df 90       	pop	r13
    2e02:	cf 90       	pop	r12
    2e04:	08 95       	ret

00002e06 <UART0_gets>:
	}
}

char UART0_gets(void)
{
	if(uart0_rx_str_flag){
    2e06:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <uart0_rx_str_flag>
    2e0a:	88 23       	and	r24, r24
    2e0c:	21 f0       	breq	.+8      	; 0x2e16 <UART0_gets+0x10>
		uart0_rx_str_flag = 0;
    2e0e:	10 92 f0 09 	sts	0x09F0, r1	; 0x8009f0 <uart0_rx_str_flag>
		return 1;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	08 95       	ret
	}
	else{
		return 0;
    2e16:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2e18:	08 95       	ret

00002e1a <UART0_parsing>:

char UART0_parsing(char *s)
{
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	ec 01       	movw	r28, r24
	unsigned char bChecksum = 0;
	unsigned char asterisk_idx = 0;
	
	if(UART0_gets()==0){
    2e20:	f2 df       	rcall	.-28     	; 0x2e06 <UART0_gets>
    2e22:	88 23       	and	r24, r24
    2e24:	09 f4       	brne	.+2      	; 0x2e28 <UART0_parsing+0xe>
    2e26:	59 c0       	rjmp	.+178    	; 0x2eda <UART0_parsing+0xc0>
		return -1;
	}
	if((UART0_Rx_buffer[0]==0xFF&&UART0_Rx_buffer[1]==0xFF&&UART0_Rx_buffer[2]==0xFB&&UART0_Rx_buffer[6]=='*')){
    2e28:	80 91 d3 0b 	lds	r24, 0x0BD3	; 0x800bd3 <UART0_Rx_buffer>
    2e2c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e2e:	09 f0       	breq	.+2      	; 0x2e32 <UART0_parsing+0x18>
    2e30:	53 c0       	rjmp	.+166    	; 0x2ed8 <UART0_parsing+0xbe>
    2e32:	80 91 d4 0b 	lds	r24, 0x0BD4	; 0x800bd4 <UART0_Rx_buffer+0x1>
    2e36:	8f 3f       	cpi	r24, 0xFF	; 255
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <UART0_parsing+0x22>
    2e3a:	4e c0       	rjmp	.+156    	; 0x2ed8 <UART0_parsing+0xbe>
    2e3c:	90 91 d5 0b 	lds	r25, 0x0BD5	; 0x800bd5 <UART0_Rx_buffer+0x2>
    2e40:	9b 3f       	cpi	r25, 0xFB	; 251
    2e42:	09 f0       	breq	.+2      	; 0x2e46 <UART0_parsing+0x2c>
    2e44:	4c c0       	rjmp	.+152    	; 0x2ede <UART0_parsing+0xc4>
    2e46:	90 91 d9 0b 	lds	r25, 0x0BD9	; 0x800bd9 <UART0_Rx_buffer+0x6>
    2e4a:	9a 32       	cpi	r25, 0x2A	; 42
    2e4c:	09 f0       	breq	.+2      	; 0x2e50 <UART0_parsing+0x36>
    2e4e:	47 c0       	rjmp	.+142    	; 0x2ede <UART0_parsing+0xc4>
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	01 c0       	rjmp	.+2      	; 0x2e58 <UART0_parsing+0x3e>
		for(unsigned char i=0;  UART0_Rx_buffer[i]!='*'; i++){
    2e56:	29 2f       	mov	r18, r25
			bChecksum ^= UART0_Rx_buffer[i];
    2e58:	38 27       	eor	r19, r24
	
	if(UART0_gets()==0){
		return -1;
	}
	if((UART0_Rx_buffer[0]==0xFF&&UART0_Rx_buffer[1]==0xFF&&UART0_Rx_buffer[2]==0xFB&&UART0_Rx_buffer[6]=='*')){
		for(unsigned char i=0;  UART0_Rx_buffer[i]!='*'; i++){
    2e5a:	91 e0       	ldi	r25, 0x01	; 1
    2e5c:	92 0f       	add	r25, r18
    2e5e:	e9 2f       	mov	r30, r25
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	ed 52       	subi	r30, 0x2D	; 45
    2e64:	f4 4f       	sbci	r31, 0xF4	; 244
    2e66:	80 81       	ld	r24, Z
    2e68:	8a 32       	cpi	r24, 0x2A	; 42
    2e6a:	a9 f7       	brne	.-22     	; 0x2e56 <UART0_parsing+0x3c>
			bChecksum ^= UART0_Rx_buffer[i];
			asterisk_idx=i;
		}

		if(bChecksum!=UART0_Rx_buffer[asterisk_idx+2]){
    2e6c:	e2 2f       	mov	r30, r18
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	ed 52       	subi	r30, 0x2D	; 45
    2e72:	f4 4f       	sbci	r31, 0xF4	; 244
    2e74:	82 81       	ldd	r24, Z+2	; 0x02
    2e76:	38 17       	cp	r19, r24
    2e78:	31 f0       	breq	.+12     	; 0x2e86 <UART0_parsing+0x6c>
			printf("DATA Packet Error\n");
    2e7a:	8c e1       	ldi	r24, 0x1C	; 28
    2e7c:	99 e0       	ldi	r25, 0x09	; 9
    2e7e:	0e 94 12 22 	call	0x4424	; 0x4424 <puts>
			return -2;
    2e82:	8e ef       	ldi	r24, 0xFE	; 254
    2e84:	31 c0       	rjmp	.+98     	; 0x2ee8 <UART0_parsing+0xce>
		}
		strcpy(s, UART0_Rx_buffer);		
    2e86:	63 ed       	ldi	r22, 0xD3	; 211
    2e88:	7b e0       	ldi	r23, 0x0B	; 11
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	0e 94 7f 21 	call	0x42fe	; 0x42fe <strcpy>
		return 1;
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	2a c0       	rjmp	.+84     	; 0x2ee8 <UART0_parsing+0xce>
	}
	if((UART0_Rx_buffer[0]==0xFF&&UART0_Rx_buffer[1]==0xFF&&UART0_Rx_buffer[2]==0xFD)){
		for(unsigned char i=0;  UART0_Rx_buffer[i]!='*'; i++){
    2e94:	29 2f       	mov	r18, r25
    2e96:	02 c0       	rjmp	.+4      	; 0x2e9c <UART0_parsing+0x82>
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
			bChecksum ^= UART0_Rx_buffer[i];
    2e9c:	38 27       	eor	r19, r24
		}
		strcpy(s, UART0_Rx_buffer);		
		return 1;
	}
	if((UART0_Rx_buffer[0]==0xFF&&UART0_Rx_buffer[1]==0xFF&&UART0_Rx_buffer[2]==0xFD)){
		for(unsigned char i=0;  UART0_Rx_buffer[i]!='*'; i++){
    2e9e:	91 e0       	ldi	r25, 0x01	; 1
    2ea0:	92 0f       	add	r25, r18
    2ea2:	e9 2f       	mov	r30, r25
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	ed 52       	subi	r30, 0x2D	; 45
    2ea8:	f4 4f       	sbci	r31, 0xF4	; 244
    2eaa:	80 81       	ld	r24, Z
    2eac:	8a 32       	cpi	r24, 0x2A	; 42
    2eae:	91 f7       	brne	.-28     	; 0x2e94 <UART0_parsing+0x7a>
			bChecksum ^= UART0_Rx_buffer[i];
			asterisk_idx=i;
		}
		if(bChecksum!=UART0_Rx_buffer[asterisk_idx+2]){
    2eb0:	e2 2f       	mov	r30, r18
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	ed 52       	subi	r30, 0x2D	; 45
    2eb6:	f4 4f       	sbci	r31, 0xF4	; 244
    2eb8:	82 81       	ldd	r24, Z+2	; 0x02
    2eba:	38 17       	cp	r19, r24
    2ebc:	31 f0       	breq	.+12     	; 0x2eca <UART0_parsing+0xb0>
			printf("DATA Packet Error\n");
    2ebe:	8c e1       	ldi	r24, 0x1C	; 28
    2ec0:	99 e0       	ldi	r25, 0x09	; 9
    2ec2:	0e 94 12 22 	call	0x4424	; 0x4424 <puts>
			return -2;
    2ec6:	8e ef       	ldi	r24, 0xFE	; 254
    2ec8:	0f c0       	rjmp	.+30     	; 0x2ee8 <UART0_parsing+0xce>
		}
		strcpy(s, UART0_Rx_buffer);
    2eca:	63 ed       	ldi	r22, 0xD3	; 211
    2ecc:	7b e0       	ldi	r23, 0x0B	; 11
    2ece:	ce 01       	movw	r24, r28
    2ed0:	0e 94 7f 21 	call	0x42fe	; 0x42fe <strcpy>
		return 2;
    2ed4:	82 e0       	ldi	r24, 0x02	; 2
    2ed6:	08 c0       	rjmp	.+16     	; 0x2ee8 <UART0_parsing+0xce>
	}
    2ed8:	07 c0       	rjmp	.+14     	; 0x2ee8 <UART0_parsing+0xce>
{
	unsigned char bChecksum = 0;
	unsigned char asterisk_idx = 0;
	
	if(UART0_gets()==0){
		return -1;
    2eda:	8f ef       	ldi	r24, 0xFF	; 255
    2edc:	05 c0       	rjmp	.+10     	; 0x2ee8 <UART0_parsing+0xce>
			return -2;
		}
		strcpy(s, UART0_Rx_buffer);		
		return 1;
	}
	if((UART0_Rx_buffer[0]==0xFF&&UART0_Rx_buffer[1]==0xFF&&UART0_Rx_buffer[2]==0xFD)){
    2ede:	90 91 d5 0b 	lds	r25, 0x0BD5	; 0x800bd5 <UART0_Rx_buffer+0x2>
    2ee2:	9d 3f       	cpi	r25, 0xFD	; 253
    2ee4:	c9 f7       	brne	.-14     	; 0x2ed8 <UART0_parsing+0xbe>
    2ee6:	d8 cf       	rjmp	.-80     	; 0x2e98 <UART0_parsing+0x7e>
			return -2;
		}
		strcpy(s, UART0_Rx_buffer);
		return 2;
	}
    2ee8:	df 91       	pop	r29
    2eea:	cf 91       	pop	r28
    2eec:	08 95       	ret

00002eee <XM430_init>:
	gbpParameter[1] = (0x0B>>8);		//Operating mode address_H
	gbpParameter[2] = Operating_mode;
	
	TxPacket_xm430(ID_number, 0x03, 0x03);
	Torque_ON
}
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	88 0f       	add	r24, r24
    2ef4:	99 1f       	adc	r25, r25
    2ef6:	aa 1f       	adc	r26, r26
    2ef8:	bb 1f       	adc	r27, r27
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	aa 1f       	adc	r26, r26
    2f00:	bb 1f       	adc	r27, r27
    2f02:	9c 01       	movw	r18, r24
    2f04:	ad 01       	movw	r20, r26
    2f06:	22 0f       	add	r18, r18
    2f08:	33 1f       	adc	r19, r19
    2f0a:	44 1f       	adc	r20, r20
    2f0c:	55 1f       	adc	r21, r21
    2f0e:	60 e0       	ldi	r22, 0x00	; 0
    2f10:	74 e2       	ldi	r23, 0x24	; 36
    2f12:	84 ef       	ldi	r24, 0xF4	; 244
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	0e 94 33 20 	call	0x4066	; 0x4066 <__udivmodsi4>
    2f1a:	21 50       	subi	r18, 0x01	; 1
    2f1c:	31 09       	sbc	r19, r1
    2f1e:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    2f22:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    2f26:	82 e0       	ldi	r24, 0x02	; 2
    2f28:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    2f2c:	88 e0       	ldi	r24, 0x08	; 8
    2f2e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    2f32:	86 e0       	ldi	r24, 0x06	; 6
    2f34:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    2f38:	08 95       	ret

00002f3a <xm430_transmit>:
    2f3a:	e8 ec       	ldi	r30, 0xC8	; 200
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	90 81       	ld	r25, Z
    2f40:	95 ff       	sbrs	r25, 5
    2f42:	fd cf       	rjmp	.-6      	; 0x2f3e <xm430_transmit+0x4>
    2f44:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2f48:	08 95       	ret

00002f4a <update_crc>:
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	cd b7       	in	r28, 0x3d	; 61
    2f50:	de b7       	in	r29, 0x3e	; 62
    2f52:	d2 50       	subi	r29, 0x02	; 2
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	de bf       	out	0x3e, r29	; 62
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	cd bf       	out	0x3d, r28	; 61
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	32 e0       	ldi	r19, 0x02	; 2
    2f62:	ec e1       	ldi	r30, 0x1C	; 28
    2f64:	f2 e0       	ldi	r31, 0x02	; 2
    2f66:	de 01       	movw	r26, r28
    2f68:	11 96       	adiw	r26, 0x01	; 1
    2f6a:	01 90       	ld	r0, Z+
    2f6c:	0d 92       	st	X+, r0
    2f6e:	21 50       	subi	r18, 0x01	; 1
    2f70:	30 40       	sbci	r19, 0x00	; 0
    2f72:	d9 f7       	brne	.-10     	; 0x2f6a <update_crc+0x20>
    2f74:	41 15       	cp	r20, r1
    2f76:	51 05       	cpc	r21, r1
    2f78:	c1 f0       	breq	.+48     	; 0x2faa <update_crc+0x60>
    2f7a:	db 01       	movw	r26, r22
    2f7c:	64 0f       	add	r22, r20
    2f7e:	75 1f       	adc	r23, r21
    2f80:	5d 91       	ld	r21, X+
    2f82:	38 2f       	mov	r19, r24
    2f84:	22 27       	eor	r18, r18
    2f86:	e9 2f       	mov	r30, r25
    2f88:	ff 27       	eor	r31, r31
    2f8a:	e5 27       	eor	r30, r21
    2f8c:	ee 0f       	add	r30, r30
    2f8e:	ff 1f       	adc	r31, r31
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	8c 0f       	add	r24, r28
    2f96:	9d 1f       	adc	r25, r29
    2f98:	e8 0f       	add	r30, r24
    2f9a:	f9 1f       	adc	r31, r25
    2f9c:	80 81       	ld	r24, Z
    2f9e:	91 81       	ldd	r25, Z+1	; 0x01
    2fa0:	82 27       	eor	r24, r18
    2fa2:	93 27       	eor	r25, r19
    2fa4:	a6 17       	cp	r26, r22
    2fa6:	b7 07       	cpc	r27, r23
    2fa8:	59 f7       	brne	.-42     	; 0x2f80 <update_crc+0x36>
    2faa:	de 5f       	subi	r29, 0xFE	; 254
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	de bf       	out	0x3e, r29	; 62
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	cd bf       	out	0x3d, r28	; 61
    2fb6:	df 91       	pop	r29
    2fb8:	cf 91       	pop	r28
    2fba:	08 95       	ret

00002fbc <TxPacket_xm430>:
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	e2 e5       	ldi	r30, 0x52	; 82
    2fc8:	fd e0       	ldi	r31, 0x0D	; 13
    2fca:	9f ef       	ldi	r25, 0xFF	; 255
    2fcc:	90 83       	st	Z, r25
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	9d ef       	ldi	r25, 0xFD	; 253
    2fd2:	92 83       	std	Z+2, r25	; 0x02
    2fd4:	13 82       	std	Z+3, r1	; 0x03
    2fd6:	84 83       	std	Z+4, r24	; 0x04
    2fd8:	83 e0       	ldi	r24, 0x03	; 3
    2fda:	84 0f       	add	r24, r20
    2fdc:	85 83       	std	Z+5, r24	; 0x05
    2fde:	24 2f       	mov	r18, r20
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	c9 01       	movw	r24, r18
    2fe4:	03 96       	adiw	r24, 0x03	; 3
    2fe6:	96 83       	std	Z+6, r25	; 0x06
    2fe8:	67 83       	std	Z+7, r22	; 0x07
    2fea:	28 5f       	subi	r18, 0xF8	; 248
    2fec:	3f 4f       	sbci	r19, 0xFF	; 255
    2fee:	29 30       	cpi	r18, 0x09	; 9
    2ff0:	31 05       	cpc	r19, r1
    2ff2:	8c f0       	brlt	.+34     	; 0x3016 <TxPacket_xm430+0x5a>
    2ff4:	c8 e0       	ldi	r28, 0x08	; 8
    2ff6:	d0 e0       	ldi	r29, 0x00	; 0
    2ff8:	88 e0       	ldi	r24, 0x08	; 8
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	ee 5a       	subi	r30, 0xAE	; 174
    2ffe:	f2 4f       	sbci	r31, 0xF2	; 242
    3000:	c6 53       	subi	r28, 0x36	; 54
    3002:	d3 4f       	sbci	r29, 0xF3	; 243
    3004:	98 81       	ld	r25, Y
    3006:	90 83       	st	Z, r25
    3008:	8f 5f       	subi	r24, 0xFF	; 255
    300a:	c8 2f       	mov	r28, r24
    300c:	d0 e0       	ldi	r29, 0x00	; 0
    300e:	c2 17       	cp	r28, r18
    3010:	d3 07       	cpc	r29, r19
    3012:	9c f3       	brlt	.-26     	; 0x2ffa <TxPacket_xm430+0x3e>
    3014:	02 c0       	rjmp	.+4      	; 0x301a <TxPacket_xm430+0x5e>
    3016:	c8 e0       	ldi	r28, 0x08	; 8
    3018:	d0 e0       	ldi	r29, 0x00	; 0
    301a:	48 5f       	subi	r20, 0xF8	; 248
    301c:	04 2f       	mov	r16, r20
    301e:	10 e0       	ldi	r17, 0x00	; 0
    3020:	a8 01       	movw	r20, r16
    3022:	62 e5       	ldi	r22, 0x52	; 82
    3024:	7d e0       	ldi	r23, 0x0D	; 13
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	8f df       	rcall	.-226    	; 0x2f4a <update_crc>
    302c:	ce 5a       	subi	r28, 0xAE	; 174
    302e:	d2 4f       	sbci	r29, 0xF2	; 242
    3030:	88 83       	st	Y, r24
    3032:	99 83       	std	Y+1, r25	; 0x01
    3034:	8f e9       	ldi	r24, 0x9F	; 159
    3036:	9f e0       	ldi	r25, 0x0F	; 15
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <TxPacket_xm430+0x7c>
    303c:	00 c0       	rjmp	.+0      	; 0x303e <TxPacket_xm430+0x82>
    303e:	00 00       	nop
    3040:	0e 5f       	subi	r16, 0xFE	; 254
    3042:	1f 4f       	sbci	r17, 0xFF	; 255
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	f1 2c       	mov	r15, r1
    304a:	c8 ec       	ldi	r28, 0xC8	; 200
    304c:	d0 e0       	ldi	r29, 0x00	; 0
    304e:	28 81       	ld	r18, Y
    3050:	20 64       	ori	r18, 0x40	; 64
    3052:	28 83       	st	Y, r18
    3054:	fc 01       	movw	r30, r24
    3056:	ee 5a       	subi	r30, 0xAE	; 174
    3058:	f2 4f       	sbci	r31, 0xF2	; 242
    305a:	80 81       	ld	r24, Z
    305c:	6e df       	rcall	.-292    	; 0x2f3a <xm430_transmit>
    305e:	f3 94       	inc	r15
    3060:	8f 2d       	mov	r24, r15
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	80 17       	cp	r24, r16
    3066:	91 07       	cpc	r25, r17
    3068:	94 f3       	brlt	.-28     	; 0x304e <TxPacket_xm430+0x92>
    306a:	e8 ec       	ldi	r30, 0xC8	; 200
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	86 ff       	sbrs	r24, 6
    3072:	fd cf       	rjmp	.-6      	; 0x306e <TxPacket_xm430+0xb2>
    3074:	8f e9       	ldi	r24, 0x9F	; 159
    3076:	9f e0       	ldi	r25, 0x0F	; 15
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <TxPacket_xm430+0xbc>
    307c:	00 c0       	rjmp	.+0      	; 0x307e <TxPacket_xm430+0xc2>
    307e:	00 00       	nop
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	1f 91       	pop	r17
    3086:	0f 91       	pop	r16
    3088:	ff 90       	pop	r15
    308a:	08 95       	ret

0000308c <xm430_Torque>:
    308c:	e2 ed       	ldi	r30, 0xD2	; 210
    308e:	fc e0       	ldi	r31, 0x0C	; 12
    3090:	90 e4       	ldi	r25, 0x40	; 64
    3092:	90 83       	st	Z, r25
    3094:	11 82       	std	Z+1, r1	; 0x01
    3096:	62 83       	std	Z+2, r22	; 0x02
    3098:	43 e0       	ldi	r20, 0x03	; 3
    309a:	63 e0       	ldi	r22, 0x03	; 3
    309c:	8f cf       	rjmp	.-226    	; 0x2fbc <TxPacket_xm430>
    309e:	08 95       	ret

000030a0 <xm430_Goal_velocity>:
void xm430_Goal_velocity(unsigned char ID_number, int32_t velocity)
{
	if(velocity<0){
		velocity = ~(velocity*(-1)) +1;
	}
	gbpParameter[0] = 0x68;				//Goal_velocity address_L
    30a0:	e2 ed       	ldi	r30, 0xD2	; 210
    30a2:	fc e0       	ldi	r31, 0x0C	; 12
    30a4:	98 e6       	ldi	r25, 0x68	; 104
    30a6:	90 83       	st	Z, r25
	gbpParameter[1] = (0x68>>8);		//Goal_velocity address_H
    30a8:	11 82       	std	Z+1, r1	; 0x01
	gbpParameter[2] = (unsigned char)(velocity); //Writing Data  , Goal velocity
    30aa:	42 83       	std	Z+2, r20	; 0x02
	gbpParameter[3] = (unsigned char)(velocity>>8); //Writing Data  , Goal velocity
    30ac:	53 83       	std	Z+3, r21	; 0x03
	gbpParameter[4] = (unsigned char)(velocity>>16); //Writing Data  , Goal velocity
    30ae:	64 83       	std	Z+4, r22	; 0x04
	gbpParameter[5] = (unsigned char)(velocity>>24); //Writing Data  , Goal velocity
    30b0:	75 83       	std	Z+5, r23	; 0x05

	TxPacket_xm430(ID_number, 0x03, 0x06);
    30b2:	46 e0       	ldi	r20, 0x06	; 6
    30b4:	63 e0       	ldi	r22, 0x03	; 3
    30b6:	82 cf       	rjmp	.-252    	; 0x2fbc <TxPacket_xm430>
    30b8:	08 95       	ret

000030ba <xm430_Goal_velocity_action>:
}

void xm430_Goal_velocity_action(unsigned char ID_number_0, unsigned char ID_number_1, int32_t velocity_0, int32_t velocity_1)
{
    30ba:	cf 92       	push	r12
    30bc:	df 92       	push	r13
    30be:	ef 92       	push	r14
    30c0:	ff 92       	push	r15
    30c2:	0f 93       	push	r16
    30c4:	1f 93       	push	r17
    30c6:	cf 93       	push	r28
    30c8:	c6 2f       	mov	r28, r22
    30ca:	ba 01       	movw	r22, r20
    30cc:	a9 01       	movw	r20, r18
    30ce:	67 01       	movw	r12, r14
    30d0:	78 01       	movw	r14, r16
	//ID num_1, ID num_1 속도, ID num_2, ID num_2 속도	
	xm430_Goal_velocity(ID_number_0, velocity_0);
    30d2:	e6 df       	rcall	.-52     	; 0x30a0 <xm430_Goal_velocity>
	xm430_Goal_velocity(ID_number_1, (-1)*velocity_1);
    30d4:	44 27       	eor	r20, r20
    30d6:	55 27       	eor	r21, r21
    30d8:	ba 01       	movw	r22, r20
    30da:	4c 19       	sub	r20, r12
    30dc:	5d 09       	sbc	r21, r13
    30de:	6e 09       	sbc	r22, r14
    30e0:	7f 09       	sbc	r23, r15
    30e2:	8c 2f       	mov	r24, r28
    30e4:	dd df       	rcall	.-70     	; 0x30a0 <xm430_Goal_velocity>
		gbpParameter[5] = (unsigned char)(temp_velocity[i]>>24); //Writing Data  , Goal velocity
		TxPacket_xm430(temp_ID_num[i],0x04,6);
	}
	TxPacket_xm430(0xFE, 0x05, 0x00);
	*/
    30e6:	cf 91       	pop	r28
    30e8:	1f 91       	pop	r17
    30ea:	0f 91       	pop	r16
    30ec:	ff 90       	pop	r15
    30ee:	ef 90       	pop	r14
    30f0:	df 90       	pop	r13
    30f2:	cf 90       	pop	r12
    30f4:	08 95       	ret

000030f6 <__subsf3>:
    30f6:	50 58       	subi	r21, 0x80	; 128

000030f8 <__addsf3>:
    30f8:	bb 27       	eor	r27, r27
    30fa:	aa 27       	eor	r26, r26
    30fc:	0e d0       	rcall	.+28     	; 0x311a <__addsf3x>
    30fe:	fc c1       	rjmp	.+1016   	; 0x34f8 <__fp_round>
    3100:	ed d1       	rcall	.+986    	; 0x34dc <__fp_pscA>
    3102:	30 f0       	brcs	.+12     	; 0x3110 <__addsf3+0x18>
    3104:	f2 d1       	rcall	.+996    	; 0x34ea <__fp_pscB>
    3106:	20 f0       	brcs	.+8      	; 0x3110 <__addsf3+0x18>
    3108:	31 f4       	brne	.+12     	; 0x3116 <__addsf3+0x1e>
    310a:	9f 3f       	cpi	r25, 0xFF	; 255
    310c:	11 f4       	brne	.+4      	; 0x3112 <__addsf3+0x1a>
    310e:	1e f4       	brtc	.+6      	; 0x3116 <__addsf3+0x1e>
    3110:	bd c1       	rjmp	.+890    	; 0x348c <__fp_nan>
    3112:	0e f4       	brtc	.+2      	; 0x3116 <__addsf3+0x1e>
    3114:	e0 95       	com	r30
    3116:	e7 fb       	bst	r30, 7
    3118:	b3 c1       	rjmp	.+870    	; 0x3480 <__fp_inf>

0000311a <__addsf3x>:
    311a:	e9 2f       	mov	r30, r25
    311c:	fe d1       	rcall	.+1020   	; 0x351a <__fp_split3>
    311e:	80 f3       	brcs	.-32     	; 0x3100 <__addsf3+0x8>
    3120:	ba 17       	cp	r27, r26
    3122:	62 07       	cpc	r22, r18
    3124:	73 07       	cpc	r23, r19
    3126:	84 07       	cpc	r24, r20
    3128:	95 07       	cpc	r25, r21
    312a:	18 f0       	brcs	.+6      	; 0x3132 <__addsf3x+0x18>
    312c:	71 f4       	brne	.+28     	; 0x314a <__addsf3x+0x30>
    312e:	9e f5       	brtc	.+102    	; 0x3196 <__addsf3x+0x7c>
    3130:	16 c2       	rjmp	.+1068   	; 0x355e <__fp_zero>
    3132:	0e f4       	brtc	.+2      	; 0x3136 <__addsf3x+0x1c>
    3134:	e0 95       	com	r30
    3136:	0b 2e       	mov	r0, r27
    3138:	ba 2f       	mov	r27, r26
    313a:	a0 2d       	mov	r26, r0
    313c:	0b 01       	movw	r0, r22
    313e:	b9 01       	movw	r22, r18
    3140:	90 01       	movw	r18, r0
    3142:	0c 01       	movw	r0, r24
    3144:	ca 01       	movw	r24, r20
    3146:	a0 01       	movw	r20, r0
    3148:	11 24       	eor	r1, r1
    314a:	ff 27       	eor	r31, r31
    314c:	59 1b       	sub	r21, r25
    314e:	99 f0       	breq	.+38     	; 0x3176 <__addsf3x+0x5c>
    3150:	59 3f       	cpi	r21, 0xF9	; 249
    3152:	50 f4       	brcc	.+20     	; 0x3168 <__addsf3x+0x4e>
    3154:	50 3e       	cpi	r21, 0xE0	; 224
    3156:	68 f1       	brcs	.+90     	; 0x31b2 <__addsf3x+0x98>
    3158:	1a 16       	cp	r1, r26
    315a:	f0 40       	sbci	r31, 0x00	; 0
    315c:	a2 2f       	mov	r26, r18
    315e:	23 2f       	mov	r18, r19
    3160:	34 2f       	mov	r19, r20
    3162:	44 27       	eor	r20, r20
    3164:	58 5f       	subi	r21, 0xF8	; 248
    3166:	f3 cf       	rjmp	.-26     	; 0x314e <__addsf3x+0x34>
    3168:	46 95       	lsr	r20
    316a:	37 95       	ror	r19
    316c:	27 95       	ror	r18
    316e:	a7 95       	ror	r26
    3170:	f0 40       	sbci	r31, 0x00	; 0
    3172:	53 95       	inc	r21
    3174:	c9 f7       	brne	.-14     	; 0x3168 <__addsf3x+0x4e>
    3176:	7e f4       	brtc	.+30     	; 0x3196 <__addsf3x+0x7c>
    3178:	1f 16       	cp	r1, r31
    317a:	ba 0b       	sbc	r27, r26
    317c:	62 0b       	sbc	r22, r18
    317e:	73 0b       	sbc	r23, r19
    3180:	84 0b       	sbc	r24, r20
    3182:	ba f0       	brmi	.+46     	; 0x31b2 <__addsf3x+0x98>
    3184:	91 50       	subi	r25, 0x01	; 1
    3186:	a1 f0       	breq	.+40     	; 0x31b0 <__addsf3x+0x96>
    3188:	ff 0f       	add	r31, r31
    318a:	bb 1f       	adc	r27, r27
    318c:	66 1f       	adc	r22, r22
    318e:	77 1f       	adc	r23, r23
    3190:	88 1f       	adc	r24, r24
    3192:	c2 f7       	brpl	.-16     	; 0x3184 <__addsf3x+0x6a>
    3194:	0e c0       	rjmp	.+28     	; 0x31b2 <__addsf3x+0x98>
    3196:	ba 0f       	add	r27, r26
    3198:	62 1f       	adc	r22, r18
    319a:	73 1f       	adc	r23, r19
    319c:	84 1f       	adc	r24, r20
    319e:	48 f4       	brcc	.+18     	; 0x31b2 <__addsf3x+0x98>
    31a0:	87 95       	ror	r24
    31a2:	77 95       	ror	r23
    31a4:	67 95       	ror	r22
    31a6:	b7 95       	ror	r27
    31a8:	f7 95       	ror	r31
    31aa:	9e 3f       	cpi	r25, 0xFE	; 254
    31ac:	08 f0       	brcs	.+2      	; 0x31b0 <__addsf3x+0x96>
    31ae:	b3 cf       	rjmp	.-154    	; 0x3116 <__addsf3+0x1e>
    31b0:	93 95       	inc	r25
    31b2:	88 0f       	add	r24, r24
    31b4:	08 f0       	brcs	.+2      	; 0x31b8 <__addsf3x+0x9e>
    31b6:	99 27       	eor	r25, r25
    31b8:	ee 0f       	add	r30, r30
    31ba:	97 95       	ror	r25
    31bc:	87 95       	ror	r24
    31be:	08 95       	ret
    31c0:	8d d1       	rcall	.+794    	; 0x34dc <__fp_pscA>
    31c2:	58 f0       	brcs	.+22     	; 0x31da <__addsf3x+0xc0>
    31c4:	80 e8       	ldi	r24, 0x80	; 128
    31c6:	91 e0       	ldi	r25, 0x01	; 1
    31c8:	09 f4       	brne	.+2      	; 0x31cc <__addsf3x+0xb2>
    31ca:	9e ef       	ldi	r25, 0xFE	; 254
    31cc:	8e d1       	rcall	.+796    	; 0x34ea <__fp_pscB>
    31ce:	28 f0       	brcs	.+10     	; 0x31da <__addsf3x+0xc0>
    31d0:	40 e8       	ldi	r20, 0x80	; 128
    31d2:	51 e0       	ldi	r21, 0x01	; 1
    31d4:	59 f4       	brne	.+22     	; 0x31ec <atan2+0xe>
    31d6:	5e ef       	ldi	r21, 0xFE	; 254
    31d8:	09 c0       	rjmp	.+18     	; 0x31ec <atan2+0xe>
    31da:	58 c1       	rjmp	.+688    	; 0x348c <__fp_nan>
    31dc:	c0 c1       	rjmp	.+896    	; 0x355e <__fp_zero>

000031de <atan2>:
    31de:	e9 2f       	mov	r30, r25
    31e0:	e0 78       	andi	r30, 0x80	; 128
    31e2:	9b d1       	rcall	.+822    	; 0x351a <__fp_split3>
    31e4:	68 f3       	brcs	.-38     	; 0x31c0 <__addsf3x+0xa6>
    31e6:	09 2e       	mov	r0, r25
    31e8:	05 2a       	or	r0, r21
    31ea:	c1 f3       	breq	.-16     	; 0x31dc <__addsf3x+0xc2>
    31ec:	26 17       	cp	r18, r22
    31ee:	37 07       	cpc	r19, r23
    31f0:	48 07       	cpc	r20, r24
    31f2:	59 07       	cpc	r21, r25
    31f4:	38 f0       	brcs	.+14     	; 0x3204 <atan2+0x26>
    31f6:	0e 2e       	mov	r0, r30
    31f8:	07 f8       	bld	r0, 7
    31fa:	e0 25       	eor	r30, r0
    31fc:	69 f0       	breq	.+26     	; 0x3218 <atan2+0x3a>
    31fe:	e0 25       	eor	r30, r0
    3200:	e0 64       	ori	r30, 0x40	; 64
    3202:	0a c0       	rjmp	.+20     	; 0x3218 <atan2+0x3a>
    3204:	ef 63       	ori	r30, 0x3F	; 63
    3206:	07 f8       	bld	r0, 7
    3208:	00 94       	com	r0
    320a:	07 fa       	bst	r0, 7
    320c:	db 01       	movw	r26, r22
    320e:	b9 01       	movw	r22, r18
    3210:	9d 01       	movw	r18, r26
    3212:	dc 01       	movw	r26, r24
    3214:	ca 01       	movw	r24, r20
    3216:	ad 01       	movw	r20, r26
    3218:	ef 93       	push	r30
    321a:	47 d0       	rcall	.+142    	; 0x32aa <__divsf3_pse>
    321c:	6d d1       	rcall	.+730    	; 0x34f8 <__fp_round>
    321e:	0a d0       	rcall	.+20     	; 0x3234 <atan>
    3220:	5f 91       	pop	r21
    3222:	55 23       	and	r21, r21
    3224:	31 f0       	breq	.+12     	; 0x3232 <atan2+0x54>
    3226:	2b ed       	ldi	r18, 0xDB	; 219
    3228:	3f e0       	ldi	r19, 0x0F	; 15
    322a:	49 e4       	ldi	r20, 0x49	; 73
    322c:	50 fd       	sbrc	r21, 0
    322e:	49 ec       	ldi	r20, 0xC9	; 201
    3230:	63 cf       	rjmp	.-314    	; 0x30f8 <__addsf3>
    3232:	08 95       	ret

00003234 <atan>:
    3234:	df 93       	push	r29
    3236:	dd 27       	eor	r29, r29
    3238:	b9 2f       	mov	r27, r25
    323a:	bf 77       	andi	r27, 0x7F	; 127
    323c:	40 e8       	ldi	r20, 0x80	; 128
    323e:	5f e3       	ldi	r21, 0x3F	; 63
    3240:	16 16       	cp	r1, r22
    3242:	17 06       	cpc	r1, r23
    3244:	48 07       	cpc	r20, r24
    3246:	5b 07       	cpc	r21, r27
    3248:	10 f4       	brcc	.+4      	; 0x324e <atan+0x1a>
    324a:	d9 2f       	mov	r29, r25
    324c:	8f d1       	rcall	.+798    	; 0x356c <inverse>
    324e:	9f 93       	push	r25
    3250:	8f 93       	push	r24
    3252:	7f 93       	push	r23
    3254:	6f 93       	push	r22
    3256:	60 d2       	rcall	.+1216   	; 0x3718 <square>
    3258:	e6 e7       	ldi	r30, 0x76	; 118
    325a:	f2 e0       	ldi	r31, 0x02	; 2
    325c:	1a d1       	rcall	.+564    	; 0x3492 <__fp_powser>
    325e:	4c d1       	rcall	.+664    	; 0x34f8 <__fp_round>
    3260:	2f 91       	pop	r18
    3262:	3f 91       	pop	r19
    3264:	4f 91       	pop	r20
    3266:	5f 91       	pop	r21
    3268:	94 d1       	rcall	.+808    	; 0x3592 <__mulsf3x>
    326a:	dd 23       	and	r29, r29
    326c:	49 f0       	breq	.+18     	; 0x3280 <atan+0x4c>
    326e:	90 58       	subi	r25, 0x80	; 128
    3270:	a2 ea       	ldi	r26, 0xA2	; 162
    3272:	2a ed       	ldi	r18, 0xDA	; 218
    3274:	3f e0       	ldi	r19, 0x0F	; 15
    3276:	49 ec       	ldi	r20, 0xC9	; 201
    3278:	5f e3       	ldi	r21, 0x3F	; 63
    327a:	d0 78       	andi	r29, 0x80	; 128
    327c:	5d 27       	eor	r21, r29
    327e:	4d df       	rcall	.-358    	; 0x311a <__addsf3x>
    3280:	df 91       	pop	r29
    3282:	3a c1       	rjmp	.+628    	; 0x34f8 <__fp_round>

00003284 <__cmpsf2>:
    3284:	d9 d0       	rcall	.+434    	; 0x3438 <__fp_cmp>
    3286:	08 f4       	brcc	.+2      	; 0x328a <__cmpsf2+0x6>
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	08 95       	ret

0000328c <__divsf3>:
    328c:	0c d0       	rcall	.+24     	; 0x32a6 <__divsf3x>
    328e:	34 c1       	rjmp	.+616    	; 0x34f8 <__fp_round>
    3290:	2c d1       	rcall	.+600    	; 0x34ea <__fp_pscB>
    3292:	40 f0       	brcs	.+16     	; 0x32a4 <__divsf3+0x18>
    3294:	23 d1       	rcall	.+582    	; 0x34dc <__fp_pscA>
    3296:	30 f0       	brcs	.+12     	; 0x32a4 <__divsf3+0x18>
    3298:	21 f4       	brne	.+8      	; 0x32a2 <__divsf3+0x16>
    329a:	5f 3f       	cpi	r21, 0xFF	; 255
    329c:	19 f0       	breq	.+6      	; 0x32a4 <__divsf3+0x18>
    329e:	f0 c0       	rjmp	.+480    	; 0x3480 <__fp_inf>
    32a0:	51 11       	cpse	r21, r1
    32a2:	5e c1       	rjmp	.+700    	; 0x3560 <__fp_szero>
    32a4:	f3 c0       	rjmp	.+486    	; 0x348c <__fp_nan>

000032a6 <__divsf3x>:
    32a6:	39 d1       	rcall	.+626    	; 0x351a <__fp_split3>
    32a8:	98 f3       	brcs	.-26     	; 0x3290 <__divsf3+0x4>

000032aa <__divsf3_pse>:
    32aa:	99 23       	and	r25, r25
    32ac:	c9 f3       	breq	.-14     	; 0x32a0 <__divsf3+0x14>
    32ae:	55 23       	and	r21, r21
    32b0:	b1 f3       	breq	.-20     	; 0x329e <__divsf3+0x12>
    32b2:	95 1b       	sub	r25, r21
    32b4:	55 0b       	sbc	r21, r21
    32b6:	bb 27       	eor	r27, r27
    32b8:	aa 27       	eor	r26, r26
    32ba:	62 17       	cp	r22, r18
    32bc:	73 07       	cpc	r23, r19
    32be:	84 07       	cpc	r24, r20
    32c0:	38 f0       	brcs	.+14     	; 0x32d0 <__divsf3_pse+0x26>
    32c2:	9f 5f       	subi	r25, 0xFF	; 255
    32c4:	5f 4f       	sbci	r21, 0xFF	; 255
    32c6:	22 0f       	add	r18, r18
    32c8:	33 1f       	adc	r19, r19
    32ca:	44 1f       	adc	r20, r20
    32cc:	aa 1f       	adc	r26, r26
    32ce:	a9 f3       	breq	.-22     	; 0x32ba <__divsf3_pse+0x10>
    32d0:	33 d0       	rcall	.+102    	; 0x3338 <__divsf3_pse+0x8e>
    32d2:	0e 2e       	mov	r0, r30
    32d4:	3a f0       	brmi	.+14     	; 0x32e4 <__divsf3_pse+0x3a>
    32d6:	e0 e8       	ldi	r30, 0x80	; 128
    32d8:	30 d0       	rcall	.+96     	; 0x333a <__divsf3_pse+0x90>
    32da:	91 50       	subi	r25, 0x01	; 1
    32dc:	50 40       	sbci	r21, 0x00	; 0
    32de:	e6 95       	lsr	r30
    32e0:	00 1c       	adc	r0, r0
    32e2:	ca f7       	brpl	.-14     	; 0x32d6 <__divsf3_pse+0x2c>
    32e4:	29 d0       	rcall	.+82     	; 0x3338 <__divsf3_pse+0x8e>
    32e6:	fe 2f       	mov	r31, r30
    32e8:	27 d0       	rcall	.+78     	; 0x3338 <__divsf3_pse+0x8e>
    32ea:	66 0f       	add	r22, r22
    32ec:	77 1f       	adc	r23, r23
    32ee:	88 1f       	adc	r24, r24
    32f0:	bb 1f       	adc	r27, r27
    32f2:	26 17       	cp	r18, r22
    32f4:	37 07       	cpc	r19, r23
    32f6:	48 07       	cpc	r20, r24
    32f8:	ab 07       	cpc	r26, r27
    32fa:	b0 e8       	ldi	r27, 0x80	; 128
    32fc:	09 f0       	breq	.+2      	; 0x3300 <__divsf3_pse+0x56>
    32fe:	bb 0b       	sbc	r27, r27
    3300:	80 2d       	mov	r24, r0
    3302:	bf 01       	movw	r22, r30
    3304:	ff 27       	eor	r31, r31
    3306:	93 58       	subi	r25, 0x83	; 131
    3308:	5f 4f       	sbci	r21, 0xFF	; 255
    330a:	2a f0       	brmi	.+10     	; 0x3316 <__divsf3_pse+0x6c>
    330c:	9e 3f       	cpi	r25, 0xFE	; 254
    330e:	51 05       	cpc	r21, r1
    3310:	68 f0       	brcs	.+26     	; 0x332c <__divsf3_pse+0x82>
    3312:	b6 c0       	rjmp	.+364    	; 0x3480 <__fp_inf>
    3314:	25 c1       	rjmp	.+586    	; 0x3560 <__fp_szero>
    3316:	5f 3f       	cpi	r21, 0xFF	; 255
    3318:	ec f3       	brlt	.-6      	; 0x3314 <__divsf3_pse+0x6a>
    331a:	98 3e       	cpi	r25, 0xE8	; 232
    331c:	dc f3       	brlt	.-10     	; 0x3314 <__divsf3_pse+0x6a>
    331e:	86 95       	lsr	r24
    3320:	77 95       	ror	r23
    3322:	67 95       	ror	r22
    3324:	b7 95       	ror	r27
    3326:	f7 95       	ror	r31
    3328:	9f 5f       	subi	r25, 0xFF	; 255
    332a:	c9 f7       	brne	.-14     	; 0x331e <__divsf3_pse+0x74>
    332c:	88 0f       	add	r24, r24
    332e:	91 1d       	adc	r25, r1
    3330:	96 95       	lsr	r25
    3332:	87 95       	ror	r24
    3334:	97 f9       	bld	r25, 7
    3336:	08 95       	ret
    3338:	e1 e0       	ldi	r30, 0x01	; 1
    333a:	66 0f       	add	r22, r22
    333c:	77 1f       	adc	r23, r23
    333e:	88 1f       	adc	r24, r24
    3340:	bb 1f       	adc	r27, r27
    3342:	62 17       	cp	r22, r18
    3344:	73 07       	cpc	r23, r19
    3346:	84 07       	cpc	r24, r20
    3348:	ba 07       	cpc	r27, r26
    334a:	20 f0       	brcs	.+8      	; 0x3354 <__divsf3_pse+0xaa>
    334c:	62 1b       	sub	r22, r18
    334e:	73 0b       	sbc	r23, r19
    3350:	84 0b       	sbc	r24, r20
    3352:	ba 0b       	sbc	r27, r26
    3354:	ee 1f       	adc	r30, r30
    3356:	88 f7       	brcc	.-30     	; 0x333a <__divsf3_pse+0x90>
    3358:	e0 95       	com	r30
    335a:	08 95       	ret

0000335c <__fixsfsi>:
    335c:	04 d0       	rcall	.+8      	; 0x3366 <__fixunssfsi>
    335e:	68 94       	set
    3360:	b1 11       	cpse	r27, r1
    3362:	fe c0       	rjmp	.+508    	; 0x3560 <__fp_szero>
    3364:	08 95       	ret

00003366 <__fixunssfsi>:
    3366:	e1 d0       	rcall	.+450    	; 0x352a <__fp_splitA>
    3368:	88 f0       	brcs	.+34     	; 0x338c <__fixunssfsi+0x26>
    336a:	9f 57       	subi	r25, 0x7F	; 127
    336c:	90 f0       	brcs	.+36     	; 0x3392 <__fixunssfsi+0x2c>
    336e:	b9 2f       	mov	r27, r25
    3370:	99 27       	eor	r25, r25
    3372:	b7 51       	subi	r27, 0x17	; 23
    3374:	a0 f0       	brcs	.+40     	; 0x339e <__fixunssfsi+0x38>
    3376:	d1 f0       	breq	.+52     	; 0x33ac <__fixunssfsi+0x46>
    3378:	66 0f       	add	r22, r22
    337a:	77 1f       	adc	r23, r23
    337c:	88 1f       	adc	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	1a f0       	brmi	.+6      	; 0x3388 <__fixunssfsi+0x22>
    3382:	ba 95       	dec	r27
    3384:	c9 f7       	brne	.-14     	; 0x3378 <__fixunssfsi+0x12>
    3386:	12 c0       	rjmp	.+36     	; 0x33ac <__fixunssfsi+0x46>
    3388:	b1 30       	cpi	r27, 0x01	; 1
    338a:	81 f0       	breq	.+32     	; 0x33ac <__fixunssfsi+0x46>
    338c:	e8 d0       	rcall	.+464    	; 0x355e <__fp_zero>
    338e:	b1 e0       	ldi	r27, 0x01	; 1
    3390:	08 95       	ret
    3392:	e5 c0       	rjmp	.+458    	; 0x355e <__fp_zero>
    3394:	67 2f       	mov	r22, r23
    3396:	78 2f       	mov	r23, r24
    3398:	88 27       	eor	r24, r24
    339a:	b8 5f       	subi	r27, 0xF8	; 248
    339c:	39 f0       	breq	.+14     	; 0x33ac <__fixunssfsi+0x46>
    339e:	b9 3f       	cpi	r27, 0xF9	; 249
    33a0:	cc f3       	brlt	.-14     	; 0x3394 <__fixunssfsi+0x2e>
    33a2:	86 95       	lsr	r24
    33a4:	77 95       	ror	r23
    33a6:	67 95       	ror	r22
    33a8:	b3 95       	inc	r27
    33aa:	d9 f7       	brne	.-10     	; 0x33a2 <__fixunssfsi+0x3c>
    33ac:	3e f4       	brtc	.+14     	; 0x33bc <__fixunssfsi+0x56>
    33ae:	90 95       	com	r25
    33b0:	80 95       	com	r24
    33b2:	70 95       	com	r23
    33b4:	61 95       	neg	r22
    33b6:	7f 4f       	sbci	r23, 0xFF	; 255
    33b8:	8f 4f       	sbci	r24, 0xFF	; 255
    33ba:	9f 4f       	sbci	r25, 0xFF	; 255
    33bc:	08 95       	ret

000033be <__floatunsisf>:
    33be:	e8 94       	clt
    33c0:	09 c0       	rjmp	.+18     	; 0x33d4 <__floatsisf+0x12>

000033c2 <__floatsisf>:
    33c2:	97 fb       	bst	r25, 7
    33c4:	3e f4       	brtc	.+14     	; 0x33d4 <__floatsisf+0x12>
    33c6:	90 95       	com	r25
    33c8:	80 95       	com	r24
    33ca:	70 95       	com	r23
    33cc:	61 95       	neg	r22
    33ce:	7f 4f       	sbci	r23, 0xFF	; 255
    33d0:	8f 4f       	sbci	r24, 0xFF	; 255
    33d2:	9f 4f       	sbci	r25, 0xFF	; 255
    33d4:	99 23       	and	r25, r25
    33d6:	a9 f0       	breq	.+42     	; 0x3402 <__floatsisf+0x40>
    33d8:	f9 2f       	mov	r31, r25
    33da:	96 e9       	ldi	r25, 0x96	; 150
    33dc:	bb 27       	eor	r27, r27
    33de:	93 95       	inc	r25
    33e0:	f6 95       	lsr	r31
    33e2:	87 95       	ror	r24
    33e4:	77 95       	ror	r23
    33e6:	67 95       	ror	r22
    33e8:	b7 95       	ror	r27
    33ea:	f1 11       	cpse	r31, r1
    33ec:	f8 cf       	rjmp	.-16     	; 0x33de <__floatsisf+0x1c>
    33ee:	fa f4       	brpl	.+62     	; 0x342e <__floatsisf+0x6c>
    33f0:	bb 0f       	add	r27, r27
    33f2:	11 f4       	brne	.+4      	; 0x33f8 <__floatsisf+0x36>
    33f4:	60 ff       	sbrs	r22, 0
    33f6:	1b c0       	rjmp	.+54     	; 0x342e <__floatsisf+0x6c>
    33f8:	6f 5f       	subi	r22, 0xFF	; 255
    33fa:	7f 4f       	sbci	r23, 0xFF	; 255
    33fc:	8f 4f       	sbci	r24, 0xFF	; 255
    33fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3400:	16 c0       	rjmp	.+44     	; 0x342e <__floatsisf+0x6c>
    3402:	88 23       	and	r24, r24
    3404:	11 f0       	breq	.+4      	; 0x340a <__floatsisf+0x48>
    3406:	96 e9       	ldi	r25, 0x96	; 150
    3408:	11 c0       	rjmp	.+34     	; 0x342c <__floatsisf+0x6a>
    340a:	77 23       	and	r23, r23
    340c:	21 f0       	breq	.+8      	; 0x3416 <__floatsisf+0x54>
    340e:	9e e8       	ldi	r25, 0x8E	; 142
    3410:	87 2f       	mov	r24, r23
    3412:	76 2f       	mov	r23, r22
    3414:	05 c0       	rjmp	.+10     	; 0x3420 <__floatsisf+0x5e>
    3416:	66 23       	and	r22, r22
    3418:	71 f0       	breq	.+28     	; 0x3436 <__floatsisf+0x74>
    341a:	96 e8       	ldi	r25, 0x86	; 134
    341c:	86 2f       	mov	r24, r22
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	60 e0       	ldi	r22, 0x00	; 0
    3422:	2a f0       	brmi	.+10     	; 0x342e <__floatsisf+0x6c>
    3424:	9a 95       	dec	r25
    3426:	66 0f       	add	r22, r22
    3428:	77 1f       	adc	r23, r23
    342a:	88 1f       	adc	r24, r24
    342c:	da f7       	brpl	.-10     	; 0x3424 <__floatsisf+0x62>
    342e:	88 0f       	add	r24, r24
    3430:	96 95       	lsr	r25
    3432:	87 95       	ror	r24
    3434:	97 f9       	bld	r25, 7
    3436:	08 95       	ret

00003438 <__fp_cmp>:
    3438:	99 0f       	add	r25, r25
    343a:	00 08       	sbc	r0, r0
    343c:	55 0f       	add	r21, r21
    343e:	aa 0b       	sbc	r26, r26
    3440:	e0 e8       	ldi	r30, 0x80	; 128
    3442:	fe ef       	ldi	r31, 0xFE	; 254
    3444:	16 16       	cp	r1, r22
    3446:	17 06       	cpc	r1, r23
    3448:	e8 07       	cpc	r30, r24
    344a:	f9 07       	cpc	r31, r25
    344c:	c0 f0       	brcs	.+48     	; 0x347e <__fp_cmp+0x46>
    344e:	12 16       	cp	r1, r18
    3450:	13 06       	cpc	r1, r19
    3452:	e4 07       	cpc	r30, r20
    3454:	f5 07       	cpc	r31, r21
    3456:	98 f0       	brcs	.+38     	; 0x347e <__fp_cmp+0x46>
    3458:	62 1b       	sub	r22, r18
    345a:	73 0b       	sbc	r23, r19
    345c:	84 0b       	sbc	r24, r20
    345e:	95 0b       	sbc	r25, r21
    3460:	39 f4       	brne	.+14     	; 0x3470 <__fp_cmp+0x38>
    3462:	0a 26       	eor	r0, r26
    3464:	61 f0       	breq	.+24     	; 0x347e <__fp_cmp+0x46>
    3466:	23 2b       	or	r18, r19
    3468:	24 2b       	or	r18, r20
    346a:	25 2b       	or	r18, r21
    346c:	21 f4       	brne	.+8      	; 0x3476 <__fp_cmp+0x3e>
    346e:	08 95       	ret
    3470:	0a 26       	eor	r0, r26
    3472:	09 f4       	brne	.+2      	; 0x3476 <__fp_cmp+0x3e>
    3474:	a1 40       	sbci	r26, 0x01	; 1
    3476:	a6 95       	lsr	r26
    3478:	8f ef       	ldi	r24, 0xFF	; 255
    347a:	81 1d       	adc	r24, r1
    347c:	81 1d       	adc	r24, r1
    347e:	08 95       	ret

00003480 <__fp_inf>:
    3480:	97 f9       	bld	r25, 7
    3482:	9f 67       	ori	r25, 0x7F	; 127
    3484:	80 e8       	ldi	r24, 0x80	; 128
    3486:	70 e0       	ldi	r23, 0x00	; 0
    3488:	60 e0       	ldi	r22, 0x00	; 0
    348a:	08 95       	ret

0000348c <__fp_nan>:
    348c:	9f ef       	ldi	r25, 0xFF	; 255
    348e:	80 ec       	ldi	r24, 0xC0	; 192
    3490:	08 95       	ret

00003492 <__fp_powser>:
    3492:	df 93       	push	r29
    3494:	cf 93       	push	r28
    3496:	1f 93       	push	r17
    3498:	0f 93       	push	r16
    349a:	ff 92       	push	r15
    349c:	ef 92       	push	r14
    349e:	df 92       	push	r13
    34a0:	7b 01       	movw	r14, r22
    34a2:	8c 01       	movw	r16, r24
    34a4:	68 94       	set
    34a6:	05 c0       	rjmp	.+10     	; 0x34b2 <__fp_powser+0x20>
    34a8:	da 2e       	mov	r13, r26
    34aa:	ef 01       	movw	r28, r30
    34ac:	72 d0       	rcall	.+228    	; 0x3592 <__mulsf3x>
    34ae:	fe 01       	movw	r30, r28
    34b0:	e8 94       	clt
    34b2:	a5 91       	lpm	r26, Z+
    34b4:	25 91       	lpm	r18, Z+
    34b6:	35 91       	lpm	r19, Z+
    34b8:	45 91       	lpm	r20, Z+
    34ba:	55 91       	lpm	r21, Z+
    34bc:	ae f3       	brts	.-22     	; 0x34a8 <__fp_powser+0x16>
    34be:	ef 01       	movw	r28, r30
    34c0:	2c de       	rcall	.-936    	; 0x311a <__addsf3x>
    34c2:	fe 01       	movw	r30, r28
    34c4:	97 01       	movw	r18, r14
    34c6:	a8 01       	movw	r20, r16
    34c8:	da 94       	dec	r13
    34ca:	79 f7       	brne	.-34     	; 0x34aa <__fp_powser+0x18>
    34cc:	df 90       	pop	r13
    34ce:	ef 90       	pop	r14
    34d0:	ff 90       	pop	r15
    34d2:	0f 91       	pop	r16
    34d4:	1f 91       	pop	r17
    34d6:	cf 91       	pop	r28
    34d8:	df 91       	pop	r29
    34da:	08 95       	ret

000034dc <__fp_pscA>:
    34dc:	00 24       	eor	r0, r0
    34de:	0a 94       	dec	r0
    34e0:	16 16       	cp	r1, r22
    34e2:	17 06       	cpc	r1, r23
    34e4:	18 06       	cpc	r1, r24
    34e6:	09 06       	cpc	r0, r25
    34e8:	08 95       	ret

000034ea <__fp_pscB>:
    34ea:	00 24       	eor	r0, r0
    34ec:	0a 94       	dec	r0
    34ee:	12 16       	cp	r1, r18
    34f0:	13 06       	cpc	r1, r19
    34f2:	14 06       	cpc	r1, r20
    34f4:	05 06       	cpc	r0, r21
    34f6:	08 95       	ret

000034f8 <__fp_round>:
    34f8:	09 2e       	mov	r0, r25
    34fa:	03 94       	inc	r0
    34fc:	00 0c       	add	r0, r0
    34fe:	11 f4       	brne	.+4      	; 0x3504 <__fp_round+0xc>
    3500:	88 23       	and	r24, r24
    3502:	52 f0       	brmi	.+20     	; 0x3518 <__fp_round+0x20>
    3504:	bb 0f       	add	r27, r27
    3506:	40 f4       	brcc	.+16     	; 0x3518 <__fp_round+0x20>
    3508:	bf 2b       	or	r27, r31
    350a:	11 f4       	brne	.+4      	; 0x3510 <__fp_round+0x18>
    350c:	60 ff       	sbrs	r22, 0
    350e:	04 c0       	rjmp	.+8      	; 0x3518 <__fp_round+0x20>
    3510:	6f 5f       	subi	r22, 0xFF	; 255
    3512:	7f 4f       	sbci	r23, 0xFF	; 255
    3514:	8f 4f       	sbci	r24, 0xFF	; 255
    3516:	9f 4f       	sbci	r25, 0xFF	; 255
    3518:	08 95       	ret

0000351a <__fp_split3>:
    351a:	57 fd       	sbrc	r21, 7
    351c:	90 58       	subi	r25, 0x80	; 128
    351e:	44 0f       	add	r20, r20
    3520:	55 1f       	adc	r21, r21
    3522:	59 f0       	breq	.+22     	; 0x353a <__fp_splitA+0x10>
    3524:	5f 3f       	cpi	r21, 0xFF	; 255
    3526:	71 f0       	breq	.+28     	; 0x3544 <__fp_splitA+0x1a>
    3528:	47 95       	ror	r20

0000352a <__fp_splitA>:
    352a:	88 0f       	add	r24, r24
    352c:	97 fb       	bst	r25, 7
    352e:	99 1f       	adc	r25, r25
    3530:	61 f0       	breq	.+24     	; 0x354a <__fp_splitA+0x20>
    3532:	9f 3f       	cpi	r25, 0xFF	; 255
    3534:	79 f0       	breq	.+30     	; 0x3554 <__fp_splitA+0x2a>
    3536:	87 95       	ror	r24
    3538:	08 95       	ret
    353a:	12 16       	cp	r1, r18
    353c:	13 06       	cpc	r1, r19
    353e:	14 06       	cpc	r1, r20
    3540:	55 1f       	adc	r21, r21
    3542:	f2 cf       	rjmp	.-28     	; 0x3528 <__fp_split3+0xe>
    3544:	46 95       	lsr	r20
    3546:	f1 df       	rcall	.-30     	; 0x352a <__fp_splitA>
    3548:	08 c0       	rjmp	.+16     	; 0x355a <__fp_splitA+0x30>
    354a:	16 16       	cp	r1, r22
    354c:	17 06       	cpc	r1, r23
    354e:	18 06       	cpc	r1, r24
    3550:	99 1f       	adc	r25, r25
    3552:	f1 cf       	rjmp	.-30     	; 0x3536 <__fp_splitA+0xc>
    3554:	86 95       	lsr	r24
    3556:	71 05       	cpc	r23, r1
    3558:	61 05       	cpc	r22, r1
    355a:	08 94       	sec
    355c:	08 95       	ret

0000355e <__fp_zero>:
    355e:	e8 94       	clt

00003560 <__fp_szero>:
    3560:	bb 27       	eor	r27, r27
    3562:	66 27       	eor	r22, r22
    3564:	77 27       	eor	r23, r23
    3566:	cb 01       	movw	r24, r22
    3568:	97 f9       	bld	r25, 7
    356a:	08 95       	ret

0000356c <inverse>:
    356c:	9b 01       	movw	r18, r22
    356e:	ac 01       	movw	r20, r24
    3570:	60 e0       	ldi	r22, 0x00	; 0
    3572:	70 e0       	ldi	r23, 0x00	; 0
    3574:	80 e8       	ldi	r24, 0x80	; 128
    3576:	9f e3       	ldi	r25, 0x3F	; 63
    3578:	89 ce       	rjmp	.-750    	; 0x328c <__divsf3>

0000357a <__mulsf3>:
    357a:	0b d0       	rcall	.+22     	; 0x3592 <__mulsf3x>
    357c:	bd cf       	rjmp	.-134    	; 0x34f8 <__fp_round>
    357e:	ae df       	rcall	.-164    	; 0x34dc <__fp_pscA>
    3580:	28 f0       	brcs	.+10     	; 0x358c <__mulsf3+0x12>
    3582:	b3 df       	rcall	.-154    	; 0x34ea <__fp_pscB>
    3584:	18 f0       	brcs	.+6      	; 0x358c <__mulsf3+0x12>
    3586:	95 23       	and	r25, r21
    3588:	09 f0       	breq	.+2      	; 0x358c <__mulsf3+0x12>
    358a:	7a cf       	rjmp	.-268    	; 0x3480 <__fp_inf>
    358c:	7f cf       	rjmp	.-258    	; 0x348c <__fp_nan>
    358e:	11 24       	eor	r1, r1
    3590:	e7 cf       	rjmp	.-50     	; 0x3560 <__fp_szero>

00003592 <__mulsf3x>:
    3592:	c3 df       	rcall	.-122    	; 0x351a <__fp_split3>
    3594:	a0 f3       	brcs	.-24     	; 0x357e <__mulsf3+0x4>

00003596 <__mulsf3_pse>:
    3596:	95 9f       	mul	r25, r21
    3598:	d1 f3       	breq	.-12     	; 0x358e <__mulsf3+0x14>
    359a:	95 0f       	add	r25, r21
    359c:	50 e0       	ldi	r21, 0x00	; 0
    359e:	55 1f       	adc	r21, r21
    35a0:	62 9f       	mul	r22, r18
    35a2:	f0 01       	movw	r30, r0
    35a4:	72 9f       	mul	r23, r18
    35a6:	bb 27       	eor	r27, r27
    35a8:	f0 0d       	add	r31, r0
    35aa:	b1 1d       	adc	r27, r1
    35ac:	63 9f       	mul	r22, r19
    35ae:	aa 27       	eor	r26, r26
    35b0:	f0 0d       	add	r31, r0
    35b2:	b1 1d       	adc	r27, r1
    35b4:	aa 1f       	adc	r26, r26
    35b6:	64 9f       	mul	r22, r20
    35b8:	66 27       	eor	r22, r22
    35ba:	b0 0d       	add	r27, r0
    35bc:	a1 1d       	adc	r26, r1
    35be:	66 1f       	adc	r22, r22
    35c0:	82 9f       	mul	r24, r18
    35c2:	22 27       	eor	r18, r18
    35c4:	b0 0d       	add	r27, r0
    35c6:	a1 1d       	adc	r26, r1
    35c8:	62 1f       	adc	r22, r18
    35ca:	73 9f       	mul	r23, r19
    35cc:	b0 0d       	add	r27, r0
    35ce:	a1 1d       	adc	r26, r1
    35d0:	62 1f       	adc	r22, r18
    35d2:	83 9f       	mul	r24, r19
    35d4:	a0 0d       	add	r26, r0
    35d6:	61 1d       	adc	r22, r1
    35d8:	22 1f       	adc	r18, r18
    35da:	74 9f       	mul	r23, r20
    35dc:	33 27       	eor	r19, r19
    35de:	a0 0d       	add	r26, r0
    35e0:	61 1d       	adc	r22, r1
    35e2:	23 1f       	adc	r18, r19
    35e4:	84 9f       	mul	r24, r20
    35e6:	60 0d       	add	r22, r0
    35e8:	21 1d       	adc	r18, r1
    35ea:	82 2f       	mov	r24, r18
    35ec:	76 2f       	mov	r23, r22
    35ee:	6a 2f       	mov	r22, r26
    35f0:	11 24       	eor	r1, r1
    35f2:	9f 57       	subi	r25, 0x7F	; 127
    35f4:	50 40       	sbci	r21, 0x00	; 0
    35f6:	8a f0       	brmi	.+34     	; 0x361a <__mulsf3_pse+0x84>
    35f8:	e1 f0       	breq	.+56     	; 0x3632 <__mulsf3_pse+0x9c>
    35fa:	88 23       	and	r24, r24
    35fc:	4a f0       	brmi	.+18     	; 0x3610 <__mulsf3_pse+0x7a>
    35fe:	ee 0f       	add	r30, r30
    3600:	ff 1f       	adc	r31, r31
    3602:	bb 1f       	adc	r27, r27
    3604:	66 1f       	adc	r22, r22
    3606:	77 1f       	adc	r23, r23
    3608:	88 1f       	adc	r24, r24
    360a:	91 50       	subi	r25, 0x01	; 1
    360c:	50 40       	sbci	r21, 0x00	; 0
    360e:	a9 f7       	brne	.-22     	; 0x35fa <__mulsf3_pse+0x64>
    3610:	9e 3f       	cpi	r25, 0xFE	; 254
    3612:	51 05       	cpc	r21, r1
    3614:	70 f0       	brcs	.+28     	; 0x3632 <__mulsf3_pse+0x9c>
    3616:	34 cf       	rjmp	.-408    	; 0x3480 <__fp_inf>
    3618:	a3 cf       	rjmp	.-186    	; 0x3560 <__fp_szero>
    361a:	5f 3f       	cpi	r21, 0xFF	; 255
    361c:	ec f3       	brlt	.-6      	; 0x3618 <__mulsf3_pse+0x82>
    361e:	98 3e       	cpi	r25, 0xE8	; 232
    3620:	dc f3       	brlt	.-10     	; 0x3618 <__mulsf3_pse+0x82>
    3622:	86 95       	lsr	r24
    3624:	77 95       	ror	r23
    3626:	67 95       	ror	r22
    3628:	b7 95       	ror	r27
    362a:	f7 95       	ror	r31
    362c:	e7 95       	ror	r30
    362e:	9f 5f       	subi	r25, 0xFF	; 255
    3630:	c1 f7       	brne	.-16     	; 0x3622 <__mulsf3_pse+0x8c>
    3632:	fe 2b       	or	r31, r30
    3634:	88 0f       	add	r24, r24
    3636:	91 1d       	adc	r25, r1
    3638:	96 95       	lsr	r25
    363a:	87 95       	ror	r24
    363c:	97 f9       	bld	r25, 7
    363e:	08 95       	ret

00003640 <pow>:
    3640:	fa 01       	movw	r30, r20
    3642:	ee 0f       	add	r30, r30
    3644:	ff 1f       	adc	r31, r31
    3646:	30 96       	adiw	r30, 0x00	; 0
    3648:	21 05       	cpc	r18, r1
    364a:	31 05       	cpc	r19, r1
    364c:	99 f1       	breq	.+102    	; 0x36b4 <pow+0x74>
    364e:	61 15       	cp	r22, r1
    3650:	71 05       	cpc	r23, r1
    3652:	61 f4       	brne	.+24     	; 0x366c <pow+0x2c>
    3654:	80 38       	cpi	r24, 0x80	; 128
    3656:	bf e3       	ldi	r27, 0x3F	; 63
    3658:	9b 07       	cpc	r25, r27
    365a:	49 f1       	breq	.+82     	; 0x36ae <pow+0x6e>
    365c:	68 94       	set
    365e:	90 38       	cpi	r25, 0x80	; 128
    3660:	81 05       	cpc	r24, r1
    3662:	61 f0       	breq	.+24     	; 0x367c <pow+0x3c>
    3664:	80 38       	cpi	r24, 0x80	; 128
    3666:	bf ef       	ldi	r27, 0xFF	; 255
    3668:	9b 07       	cpc	r25, r27
    366a:	41 f0       	breq	.+16     	; 0x367c <pow+0x3c>
    366c:	99 23       	and	r25, r25
    366e:	42 f5       	brpl	.+80     	; 0x36c0 <pow+0x80>
    3670:	ff 3f       	cpi	r31, 0xFF	; 255
    3672:	e1 05       	cpc	r30, r1
    3674:	31 05       	cpc	r19, r1
    3676:	21 05       	cpc	r18, r1
    3678:	11 f1       	breq	.+68     	; 0x36be <pow+0x7e>
    367a:	e8 94       	clt
    367c:	08 94       	sec
    367e:	e7 95       	ror	r30
    3680:	d9 01       	movw	r26, r18
    3682:	aa 23       	and	r26, r26
    3684:	29 f4       	brne	.+10     	; 0x3690 <pow+0x50>
    3686:	ab 2f       	mov	r26, r27
    3688:	be 2f       	mov	r27, r30
    368a:	f8 5f       	subi	r31, 0xF8	; 248
    368c:	d0 f3       	brcs	.-12     	; 0x3682 <pow+0x42>
    368e:	10 c0       	rjmp	.+32     	; 0x36b0 <pow+0x70>
    3690:	ff 5f       	subi	r31, 0xFF	; 255
    3692:	70 f4       	brcc	.+28     	; 0x36b0 <pow+0x70>
    3694:	a6 95       	lsr	r26
    3696:	e0 f7       	brcc	.-8      	; 0x3690 <pow+0x50>
    3698:	f7 39       	cpi	r31, 0x97	; 151
    369a:	50 f0       	brcs	.+20     	; 0x36b0 <pow+0x70>
    369c:	19 f0       	breq	.+6      	; 0x36a4 <pow+0x64>
    369e:	ff 3a       	cpi	r31, 0xAF	; 175
    36a0:	38 f4       	brcc	.+14     	; 0x36b0 <pow+0x70>
    36a2:	9f 77       	andi	r25, 0x7F	; 127
    36a4:	9f 93       	push	r25
    36a6:	0c d0       	rcall	.+24     	; 0x36c0 <pow+0x80>
    36a8:	0f 90       	pop	r0
    36aa:	07 fc       	sbrc	r0, 7
    36ac:	90 58       	subi	r25, 0x80	; 128
    36ae:	08 95       	ret
    36b0:	3e f0       	brts	.+14     	; 0x36c0 <pow+0x80>
    36b2:	ec ce       	rjmp	.-552    	; 0x348c <__fp_nan>
    36b4:	60 e0       	ldi	r22, 0x00	; 0
    36b6:	70 e0       	ldi	r23, 0x00	; 0
    36b8:	80 e8       	ldi	r24, 0x80	; 128
    36ba:	9f e3       	ldi	r25, 0x3F	; 63
    36bc:	08 95       	ret
    36be:	4f e7       	ldi	r20, 0x7F	; 127
    36c0:	9f 77       	andi	r25, 0x7F	; 127
    36c2:	5f 93       	push	r21
    36c4:	4f 93       	push	r20
    36c6:	3f 93       	push	r19
    36c8:	2f 93       	push	r18
    36ca:	be d0       	rcall	.+380    	; 0x3848 <log>
    36cc:	2f 91       	pop	r18
    36ce:	3f 91       	pop	r19
    36d0:	4f 91       	pop	r20
    36d2:	5f 91       	pop	r21
    36d4:	52 df       	rcall	.-348    	; 0x357a <__mulsf3>
    36d6:	28 c0       	rjmp	.+80     	; 0x3728 <exp>

000036d8 <round>:
    36d8:	28 df       	rcall	.-432    	; 0x352a <__fp_splitA>
    36da:	e0 f0       	brcs	.+56     	; 0x3714 <round+0x3c>
    36dc:	9e 37       	cpi	r25, 0x7E	; 126
    36de:	d8 f0       	brcs	.+54     	; 0x3716 <round+0x3e>
    36e0:	96 39       	cpi	r25, 0x96	; 150
    36e2:	b8 f4       	brcc	.+46     	; 0x3712 <round+0x3a>
    36e4:	9e 38       	cpi	r25, 0x8E	; 142
    36e6:	48 f4       	brcc	.+18     	; 0x36fa <round+0x22>
    36e8:	67 2f       	mov	r22, r23
    36ea:	78 2f       	mov	r23, r24
    36ec:	88 27       	eor	r24, r24
    36ee:	98 5f       	subi	r25, 0xF8	; 248
    36f0:	f9 cf       	rjmp	.-14     	; 0x36e4 <round+0xc>
    36f2:	86 95       	lsr	r24
    36f4:	77 95       	ror	r23
    36f6:	67 95       	ror	r22
    36f8:	93 95       	inc	r25
    36fa:	95 39       	cpi	r25, 0x95	; 149
    36fc:	d0 f3       	brcs	.-12     	; 0x36f2 <round+0x1a>
    36fe:	b6 2f       	mov	r27, r22
    3700:	b1 70       	andi	r27, 0x01	; 1
    3702:	6b 0f       	add	r22, r27
    3704:	71 1d       	adc	r23, r1
    3706:	81 1d       	adc	r24, r1
    3708:	20 f4       	brcc	.+8      	; 0x3712 <round+0x3a>
    370a:	87 95       	ror	r24
    370c:	77 95       	ror	r23
    370e:	67 95       	ror	r22
    3710:	93 95       	inc	r25
    3712:	36 c0       	rjmp	.+108    	; 0x3780 <__fp_mintl>
    3714:	50 c0       	rjmp	.+160    	; 0x37b6 <__fp_mpack>
    3716:	24 cf       	rjmp	.-440    	; 0x3560 <__fp_szero>

00003718 <square>:
    3718:	9b 01       	movw	r18, r22
    371a:	ac 01       	movw	r20, r24
    371c:	2e cf       	rjmp	.-420    	; 0x357a <__mulsf3>
    371e:	19 f4       	brne	.+6      	; 0x3726 <square+0xe>
    3720:	0e f0       	brts	.+2      	; 0x3724 <square+0xc>
    3722:	ae ce       	rjmp	.-676    	; 0x3480 <__fp_inf>
    3724:	1c cf       	rjmp	.-456    	; 0x355e <__fp_zero>
    3726:	b2 ce       	rjmp	.-668    	; 0x348c <__fp_nan>

00003728 <exp>:
    3728:	00 df       	rcall	.-512    	; 0x352a <__fp_splitA>
    372a:	c8 f3       	brcs	.-14     	; 0x371e <square+0x6>
    372c:	96 38       	cpi	r25, 0x86	; 134
    372e:	c0 f7       	brcc	.-16     	; 0x3720 <square+0x8>
    3730:	07 f8       	bld	r0, 7
    3732:	0f 92       	push	r0
    3734:	e8 94       	clt
    3736:	2b e3       	ldi	r18, 0x3B	; 59
    3738:	3a ea       	ldi	r19, 0xAA	; 170
    373a:	48 eb       	ldi	r20, 0xB8	; 184
    373c:	5f e7       	ldi	r21, 0x7F	; 127
    373e:	2b df       	rcall	.-426    	; 0x3596 <__mulsf3_pse>
    3740:	0f 92       	push	r0
    3742:	0f 92       	push	r0
    3744:	0f 92       	push	r0
    3746:	4d b7       	in	r20, 0x3d	; 61
    3748:	5e b7       	in	r21, 0x3e	; 62
    374a:	0f 92       	push	r0
    374c:	bd d0       	rcall	.+378    	; 0x38c8 <modf>
    374e:	e3 ea       	ldi	r30, 0xA3	; 163
    3750:	f2 e0       	ldi	r31, 0x02	; 2
    3752:	9f de       	rcall	.-706    	; 0x3492 <__fp_powser>
    3754:	4f 91       	pop	r20
    3756:	5f 91       	pop	r21
    3758:	ef 91       	pop	r30
    375a:	ff 91       	pop	r31
    375c:	e5 95       	asr	r30
    375e:	ee 1f       	adc	r30, r30
    3760:	ff 1f       	adc	r31, r31
    3762:	49 f0       	breq	.+18     	; 0x3776 <exp+0x4e>
    3764:	fe 57       	subi	r31, 0x7E	; 126
    3766:	e0 68       	ori	r30, 0x80	; 128
    3768:	44 27       	eor	r20, r20
    376a:	ee 0f       	add	r30, r30
    376c:	44 1f       	adc	r20, r20
    376e:	fa 95       	dec	r31
    3770:	e1 f7       	brne	.-8      	; 0x376a <exp+0x42>
    3772:	41 95       	neg	r20
    3774:	55 0b       	sbc	r21, r21
    3776:	2f d0       	rcall	.+94     	; 0x37d6 <ldexp>
    3778:	0f 90       	pop	r0
    377a:	07 fe       	sbrs	r0, 7
    377c:	f7 ce       	rjmp	.-530    	; 0x356c <inverse>
    377e:	08 95       	ret

00003780 <__fp_mintl>:
    3780:	88 23       	and	r24, r24
    3782:	71 f4       	brne	.+28     	; 0x37a0 <__fp_mintl+0x20>
    3784:	77 23       	and	r23, r23
    3786:	21 f0       	breq	.+8      	; 0x3790 <__fp_mintl+0x10>
    3788:	98 50       	subi	r25, 0x08	; 8
    378a:	87 2b       	or	r24, r23
    378c:	76 2f       	mov	r23, r22
    378e:	07 c0       	rjmp	.+14     	; 0x379e <__fp_mintl+0x1e>
    3790:	66 23       	and	r22, r22
    3792:	11 f4       	brne	.+4      	; 0x3798 <__fp_mintl+0x18>
    3794:	99 27       	eor	r25, r25
    3796:	0d c0       	rjmp	.+26     	; 0x37b2 <__fp_mintl+0x32>
    3798:	90 51       	subi	r25, 0x10	; 16
    379a:	86 2b       	or	r24, r22
    379c:	70 e0       	ldi	r23, 0x00	; 0
    379e:	60 e0       	ldi	r22, 0x00	; 0
    37a0:	2a f0       	brmi	.+10     	; 0x37ac <__fp_mintl+0x2c>
    37a2:	9a 95       	dec	r25
    37a4:	66 0f       	add	r22, r22
    37a6:	77 1f       	adc	r23, r23
    37a8:	88 1f       	adc	r24, r24
    37aa:	da f7       	brpl	.-10     	; 0x37a2 <__fp_mintl+0x22>
    37ac:	88 0f       	add	r24, r24
    37ae:	96 95       	lsr	r25
    37b0:	87 95       	ror	r24
    37b2:	97 f9       	bld	r25, 7
    37b4:	08 95       	ret

000037b6 <__fp_mpack>:
    37b6:	9f 3f       	cpi	r25, 0xFF	; 255
    37b8:	31 f0       	breq	.+12     	; 0x37c6 <__fp_mpack_finite+0xc>

000037ba <__fp_mpack_finite>:
    37ba:	91 50       	subi	r25, 0x01	; 1
    37bc:	20 f4       	brcc	.+8      	; 0x37c6 <__fp_mpack_finite+0xc>
    37be:	87 95       	ror	r24
    37c0:	77 95       	ror	r23
    37c2:	67 95       	ror	r22
    37c4:	b7 95       	ror	r27
    37c6:	88 0f       	add	r24, r24
    37c8:	91 1d       	adc	r25, r1
    37ca:	96 95       	lsr	r25
    37cc:	87 95       	ror	r24
    37ce:	97 f9       	bld	r25, 7
    37d0:	08 95       	ret
    37d2:	56 ce       	rjmp	.-852    	; 0x3480 <__fp_inf>
    37d4:	f0 cf       	rjmp	.-32     	; 0x37b6 <__fp_mpack>

000037d6 <ldexp>:
    37d6:	a9 de       	rcall	.-686    	; 0x352a <__fp_splitA>
    37d8:	e8 f3       	brcs	.-6      	; 0x37d4 <__fp_mpack_finite+0x1a>
    37da:	99 23       	and	r25, r25
    37dc:	d9 f3       	breq	.-10     	; 0x37d4 <__fp_mpack_finite+0x1a>
    37de:	94 0f       	add	r25, r20
    37e0:	51 1d       	adc	r21, r1
    37e2:	bb f3       	brvs	.-18     	; 0x37d2 <__fp_mpack_finite+0x18>
    37e4:	91 50       	subi	r25, 0x01	; 1
    37e6:	50 40       	sbci	r21, 0x00	; 0
    37e8:	94 f0       	brlt	.+36     	; 0x380e <ldexp+0x38>
    37ea:	59 f0       	breq	.+22     	; 0x3802 <ldexp+0x2c>
    37ec:	88 23       	and	r24, r24
    37ee:	32 f0       	brmi	.+12     	; 0x37fc <ldexp+0x26>
    37f0:	66 0f       	add	r22, r22
    37f2:	77 1f       	adc	r23, r23
    37f4:	88 1f       	adc	r24, r24
    37f6:	91 50       	subi	r25, 0x01	; 1
    37f8:	50 40       	sbci	r21, 0x00	; 0
    37fa:	c1 f7       	brne	.-16     	; 0x37ec <ldexp+0x16>
    37fc:	9e 3f       	cpi	r25, 0xFE	; 254
    37fe:	51 05       	cpc	r21, r1
    3800:	44 f7       	brge	.-48     	; 0x37d2 <__fp_mpack_finite+0x18>
    3802:	88 0f       	add	r24, r24
    3804:	91 1d       	adc	r25, r1
    3806:	96 95       	lsr	r25
    3808:	87 95       	ror	r24
    380a:	97 f9       	bld	r25, 7
    380c:	08 95       	ret
    380e:	5f 3f       	cpi	r21, 0xFF	; 255
    3810:	ac f0       	brlt	.+42     	; 0x383c <ldexp+0x66>
    3812:	98 3e       	cpi	r25, 0xE8	; 232
    3814:	9c f0       	brlt	.+38     	; 0x383c <ldexp+0x66>
    3816:	bb 27       	eor	r27, r27
    3818:	86 95       	lsr	r24
    381a:	77 95       	ror	r23
    381c:	67 95       	ror	r22
    381e:	b7 95       	ror	r27
    3820:	08 f4       	brcc	.+2      	; 0x3824 <ldexp+0x4e>
    3822:	b1 60       	ori	r27, 0x01	; 1
    3824:	93 95       	inc	r25
    3826:	c1 f7       	brne	.-16     	; 0x3818 <ldexp+0x42>
    3828:	bb 0f       	add	r27, r27
    382a:	58 f7       	brcc	.-42     	; 0x3802 <ldexp+0x2c>
    382c:	11 f4       	brne	.+4      	; 0x3832 <ldexp+0x5c>
    382e:	60 ff       	sbrs	r22, 0
    3830:	e8 cf       	rjmp	.-48     	; 0x3802 <ldexp+0x2c>
    3832:	6f 5f       	subi	r22, 0xFF	; 255
    3834:	7f 4f       	sbci	r23, 0xFF	; 255
    3836:	8f 4f       	sbci	r24, 0xFF	; 255
    3838:	9f 4f       	sbci	r25, 0xFF	; 255
    383a:	e3 cf       	rjmp	.-58     	; 0x3802 <ldexp+0x2c>
    383c:	91 ce       	rjmp	.-734    	; 0x3560 <__fp_szero>
    383e:	0e f0       	brts	.+2      	; 0x3842 <ldexp+0x6c>
    3840:	ba cf       	rjmp	.-140    	; 0x37b6 <__fp_mpack>
    3842:	24 ce       	rjmp	.-952    	; 0x348c <__fp_nan>
    3844:	68 94       	set
    3846:	1c ce       	rjmp	.-968    	; 0x3480 <__fp_inf>

00003848 <log>:
    3848:	70 de       	rcall	.-800    	; 0x352a <__fp_splitA>
    384a:	c8 f3       	brcs	.-14     	; 0x383e <ldexp+0x68>
    384c:	99 23       	and	r25, r25
    384e:	d1 f3       	breq	.-12     	; 0x3844 <ldexp+0x6e>
    3850:	c6 f3       	brts	.-16     	; 0x3842 <ldexp+0x6c>
    3852:	df 93       	push	r29
    3854:	cf 93       	push	r28
    3856:	1f 93       	push	r17
    3858:	0f 93       	push	r16
    385a:	ff 92       	push	r15
    385c:	c9 2f       	mov	r28, r25
    385e:	dd 27       	eor	r29, r29
    3860:	88 23       	and	r24, r24
    3862:	2a f0       	brmi	.+10     	; 0x386e <log+0x26>
    3864:	21 97       	sbiw	r28, 0x01	; 1
    3866:	66 0f       	add	r22, r22
    3868:	77 1f       	adc	r23, r23
    386a:	88 1f       	adc	r24, r24
    386c:	da f7       	brpl	.-10     	; 0x3864 <log+0x1c>
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	40 e8       	ldi	r20, 0x80	; 128
    3874:	5f eb       	ldi	r21, 0xBF	; 191
    3876:	9f e3       	ldi	r25, 0x3F	; 63
    3878:	88 39       	cpi	r24, 0x98	; 152
    387a:	20 f0       	brcs	.+8      	; 0x3884 <log+0x3c>
    387c:	80 3e       	cpi	r24, 0xE0	; 224
    387e:	30 f0       	brcs	.+12     	; 0x388c <log+0x44>
    3880:	21 96       	adiw	r28, 0x01	; 1
    3882:	8f 77       	andi	r24, 0x7F	; 127
    3884:	39 dc       	rcall	.-1934   	; 0x30f8 <__addsf3>
    3886:	eb ec       	ldi	r30, 0xCB	; 203
    3888:	f2 e0       	ldi	r31, 0x02	; 2
    388a:	03 c0       	rjmp	.+6      	; 0x3892 <log+0x4a>
    388c:	35 dc       	rcall	.-1942   	; 0x30f8 <__addsf3>
    388e:	e8 ef       	ldi	r30, 0xF8	; 248
    3890:	f2 e0       	ldi	r31, 0x02	; 2
    3892:	ff dd       	rcall	.-1026   	; 0x3492 <__fp_powser>
    3894:	8b 01       	movw	r16, r22
    3896:	be 01       	movw	r22, r28
    3898:	ec 01       	movw	r28, r24
    389a:	fb 2e       	mov	r15, r27
    389c:	6f 57       	subi	r22, 0x7F	; 127
    389e:	71 09       	sbc	r23, r1
    38a0:	75 95       	asr	r23
    38a2:	77 1f       	adc	r23, r23
    38a4:	88 0b       	sbc	r24, r24
    38a6:	99 0b       	sbc	r25, r25
    38a8:	8c dd       	rcall	.-1256   	; 0x33c2 <__floatsisf>
    38aa:	28 e1       	ldi	r18, 0x18	; 24
    38ac:	32 e7       	ldi	r19, 0x72	; 114
    38ae:	41 e3       	ldi	r20, 0x31	; 49
    38b0:	5f e3       	ldi	r21, 0x3F	; 63
    38b2:	6f de       	rcall	.-802    	; 0x3592 <__mulsf3x>
    38b4:	af 2d       	mov	r26, r15
    38b6:	98 01       	movw	r18, r16
    38b8:	ae 01       	movw	r20, r28
    38ba:	ff 90       	pop	r15
    38bc:	0f 91       	pop	r16
    38be:	1f 91       	pop	r17
    38c0:	cf 91       	pop	r28
    38c2:	df 91       	pop	r29
    38c4:	2a dc       	rcall	.-1964   	; 0x311a <__addsf3x>
    38c6:	18 ce       	rjmp	.-976    	; 0x34f8 <__fp_round>

000038c8 <modf>:
    38c8:	fa 01       	movw	r30, r20
    38ca:	dc 01       	movw	r26, r24
    38cc:	aa 0f       	add	r26, r26
    38ce:	bb 1f       	adc	r27, r27
    38d0:	9b 01       	movw	r18, r22
    38d2:	ac 01       	movw	r20, r24
    38d4:	bf 57       	subi	r27, 0x7F	; 127
    38d6:	28 f4       	brcc	.+10     	; 0x38e2 <modf+0x1a>
    38d8:	22 27       	eor	r18, r18
    38da:	33 27       	eor	r19, r19
    38dc:	44 27       	eor	r20, r20
    38de:	50 78       	andi	r21, 0x80	; 128
    38e0:	1f c0       	rjmp	.+62     	; 0x3920 <modf+0x58>
    38e2:	b7 51       	subi	r27, 0x17	; 23
    38e4:	88 f4       	brcc	.+34     	; 0x3908 <modf+0x40>
    38e6:	ab 2f       	mov	r26, r27
    38e8:	00 24       	eor	r0, r0
    38ea:	46 95       	lsr	r20
    38ec:	37 95       	ror	r19
    38ee:	27 95       	ror	r18
    38f0:	01 1c       	adc	r0, r1
    38f2:	a3 95       	inc	r26
    38f4:	d2 f3       	brmi	.-12     	; 0x38ea <modf+0x22>
    38f6:	00 20       	and	r0, r0
    38f8:	69 f0       	breq	.+26     	; 0x3914 <modf+0x4c>
    38fa:	22 0f       	add	r18, r18
    38fc:	33 1f       	adc	r19, r19
    38fe:	44 1f       	adc	r20, r20
    3900:	b3 95       	inc	r27
    3902:	da f3       	brmi	.-10     	; 0x38fa <modf+0x32>
    3904:	0d d0       	rcall	.+26     	; 0x3920 <modf+0x58>
    3906:	f7 cb       	rjmp	.-2066   	; 0x30f6 <__subsf3>
    3908:	61 30       	cpi	r22, 0x01	; 1
    390a:	71 05       	cpc	r23, r1
    390c:	a0 e8       	ldi	r26, 0x80	; 128
    390e:	8a 07       	cpc	r24, r26
    3910:	b9 46       	sbci	r27, 0x69	; 105
    3912:	30 f4       	brcc	.+12     	; 0x3920 <modf+0x58>
    3914:	9b 01       	movw	r18, r22
    3916:	ac 01       	movw	r20, r24
    3918:	66 27       	eor	r22, r22
    391a:	77 27       	eor	r23, r23
    391c:	88 27       	eor	r24, r24
    391e:	90 78       	andi	r25, 0x80	; 128
    3920:	30 96       	adiw	r30, 0x00	; 0
    3922:	21 f0       	breq	.+8      	; 0x392c <modf+0x64>
    3924:	20 83       	st	Z, r18
    3926:	31 83       	std	Z+1, r19	; 0x01
    3928:	42 83       	std	Z+2, r20	; 0x02
    392a:	53 83       	std	Z+3, r21	; 0x03
    392c:	08 95       	ret

0000392e <vfprintf>:
    392e:	2f 92       	push	r2
    3930:	3f 92       	push	r3
    3932:	4f 92       	push	r4
    3934:	5f 92       	push	r5
    3936:	6f 92       	push	r6
    3938:	7f 92       	push	r7
    393a:	8f 92       	push	r8
    393c:	9f 92       	push	r9
    393e:	af 92       	push	r10
    3940:	bf 92       	push	r11
    3942:	cf 92       	push	r12
    3944:	df 92       	push	r13
    3946:	ef 92       	push	r14
    3948:	ff 92       	push	r15
    394a:	0f 93       	push	r16
    394c:	1f 93       	push	r17
    394e:	cf 93       	push	r28
    3950:	df 93       	push	r29
    3952:	cd b7       	in	r28, 0x3d	; 61
    3954:	de b7       	in	r29, 0x3e	; 62
    3956:	60 97       	sbiw	r28, 0x10	; 16
    3958:	0f b6       	in	r0, 0x3f	; 63
    395a:	f8 94       	cli
    395c:	de bf       	out	0x3e, r29	; 62
    395e:	0f be       	out	0x3f, r0	; 63
    3960:	cd bf       	out	0x3d, r28	; 61
    3962:	7c 01       	movw	r14, r24
    3964:	1b 01       	movw	r2, r22
    3966:	6a 01       	movw	r12, r20
    3968:	fc 01       	movw	r30, r24
    396a:	17 82       	std	Z+7, r1	; 0x07
    396c:	16 82       	std	Z+6, r1	; 0x06
    396e:	83 81       	ldd	r24, Z+3	; 0x03
    3970:	81 ff       	sbrs	r24, 1
    3972:	2a c3       	rjmp	.+1620   	; 0x3fc8 <vfprintf+0x69a>
    3974:	9e 01       	movw	r18, r28
    3976:	2f 5f       	subi	r18, 0xFF	; 255
    3978:	3f 4f       	sbci	r19, 0xFF	; 255
    397a:	39 01       	movw	r6, r18
    397c:	f7 01       	movw	r30, r14
    397e:	93 81       	ldd	r25, Z+3	; 0x03
    3980:	f1 01       	movw	r30, r2
    3982:	93 fd       	sbrc	r25, 3
    3984:	85 91       	lpm	r24, Z+
    3986:	93 ff       	sbrs	r25, 3
    3988:	81 91       	ld	r24, Z+
    398a:	1f 01       	movw	r2, r30
    398c:	88 23       	and	r24, r24
    398e:	09 f4       	brne	.+2      	; 0x3992 <vfprintf+0x64>
    3990:	17 c3       	rjmp	.+1582   	; 0x3fc0 <vfprintf+0x692>
    3992:	85 32       	cpi	r24, 0x25	; 37
    3994:	39 f4       	brne	.+14     	; 0x39a4 <vfprintf+0x76>
    3996:	93 fd       	sbrc	r25, 3
    3998:	85 91       	lpm	r24, Z+
    399a:	93 ff       	sbrs	r25, 3
    399c:	81 91       	ld	r24, Z+
    399e:	1f 01       	movw	r2, r30
    39a0:	85 32       	cpi	r24, 0x25	; 37
    39a2:	31 f4       	brne	.+12     	; 0x39b0 <vfprintf+0x82>
    39a4:	b7 01       	movw	r22, r14
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	e9 d4       	rcall	.+2514   	; 0x437c <fputc>
    39aa:	56 01       	movw	r10, r12
    39ac:	65 01       	movw	r12, r10
    39ae:	e6 cf       	rjmp	.-52     	; 0x397c <vfprintf+0x4e>
    39b0:	10 e0       	ldi	r17, 0x00	; 0
    39b2:	51 2c       	mov	r5, r1
    39b4:	91 2c       	mov	r9, r1
    39b6:	ff e1       	ldi	r31, 0x1F	; 31
    39b8:	f9 15       	cp	r31, r9
    39ba:	d8 f0       	brcs	.+54     	; 0x39f2 <vfprintf+0xc4>
    39bc:	8b 32       	cpi	r24, 0x2B	; 43
    39be:	79 f0       	breq	.+30     	; 0x39de <vfprintf+0xb0>
    39c0:	38 f4       	brcc	.+14     	; 0x39d0 <vfprintf+0xa2>
    39c2:	80 32       	cpi	r24, 0x20	; 32
    39c4:	79 f0       	breq	.+30     	; 0x39e4 <vfprintf+0xb6>
    39c6:	83 32       	cpi	r24, 0x23	; 35
    39c8:	a1 f4       	brne	.+40     	; 0x39f2 <vfprintf+0xc4>
    39ca:	f9 2d       	mov	r31, r9
    39cc:	f0 61       	ori	r31, 0x10	; 16
    39ce:	2e c0       	rjmp	.+92     	; 0x3a2c <vfprintf+0xfe>
    39d0:	8d 32       	cpi	r24, 0x2D	; 45
    39d2:	61 f0       	breq	.+24     	; 0x39ec <vfprintf+0xbe>
    39d4:	80 33       	cpi	r24, 0x30	; 48
    39d6:	69 f4       	brne	.+26     	; 0x39f2 <vfprintf+0xc4>
    39d8:	29 2d       	mov	r18, r9
    39da:	21 60       	ori	r18, 0x01	; 1
    39dc:	2d c0       	rjmp	.+90     	; 0x3a38 <vfprintf+0x10a>
    39de:	39 2d       	mov	r19, r9
    39e0:	32 60       	ori	r19, 0x02	; 2
    39e2:	93 2e       	mov	r9, r19
    39e4:	89 2d       	mov	r24, r9
    39e6:	84 60       	ori	r24, 0x04	; 4
    39e8:	98 2e       	mov	r9, r24
    39ea:	2a c0       	rjmp	.+84     	; 0x3a40 <vfprintf+0x112>
    39ec:	e9 2d       	mov	r30, r9
    39ee:	e8 60       	ori	r30, 0x08	; 8
    39f0:	15 c0       	rjmp	.+42     	; 0x3a1c <vfprintf+0xee>
    39f2:	97 fc       	sbrc	r9, 7
    39f4:	2d c0       	rjmp	.+90     	; 0x3a50 <vfprintf+0x122>
    39f6:	20 ed       	ldi	r18, 0xD0	; 208
    39f8:	28 0f       	add	r18, r24
    39fa:	2a 30       	cpi	r18, 0x0A	; 10
    39fc:	88 f4       	brcc	.+34     	; 0x3a20 <vfprintf+0xf2>
    39fe:	96 fe       	sbrs	r9, 6
    3a00:	06 c0       	rjmp	.+12     	; 0x3a0e <vfprintf+0xe0>
    3a02:	3a e0       	ldi	r19, 0x0A	; 10
    3a04:	13 9f       	mul	r17, r19
    3a06:	20 0d       	add	r18, r0
    3a08:	11 24       	eor	r1, r1
    3a0a:	12 2f       	mov	r17, r18
    3a0c:	19 c0       	rjmp	.+50     	; 0x3a40 <vfprintf+0x112>
    3a0e:	8a e0       	ldi	r24, 0x0A	; 10
    3a10:	58 9e       	mul	r5, r24
    3a12:	20 0d       	add	r18, r0
    3a14:	11 24       	eor	r1, r1
    3a16:	52 2e       	mov	r5, r18
    3a18:	e9 2d       	mov	r30, r9
    3a1a:	e0 62       	ori	r30, 0x20	; 32
    3a1c:	9e 2e       	mov	r9, r30
    3a1e:	10 c0       	rjmp	.+32     	; 0x3a40 <vfprintf+0x112>
    3a20:	8e 32       	cpi	r24, 0x2E	; 46
    3a22:	31 f4       	brne	.+12     	; 0x3a30 <vfprintf+0x102>
    3a24:	96 fc       	sbrc	r9, 6
    3a26:	cc c2       	rjmp	.+1432   	; 0x3fc0 <vfprintf+0x692>
    3a28:	f9 2d       	mov	r31, r9
    3a2a:	f0 64       	ori	r31, 0x40	; 64
    3a2c:	9f 2e       	mov	r9, r31
    3a2e:	08 c0       	rjmp	.+16     	; 0x3a40 <vfprintf+0x112>
    3a30:	8c 36       	cpi	r24, 0x6C	; 108
    3a32:	21 f4       	brne	.+8      	; 0x3a3c <vfprintf+0x10e>
    3a34:	29 2d       	mov	r18, r9
    3a36:	20 68       	ori	r18, 0x80	; 128
    3a38:	92 2e       	mov	r9, r18
    3a3a:	02 c0       	rjmp	.+4      	; 0x3a40 <vfprintf+0x112>
    3a3c:	88 36       	cpi	r24, 0x68	; 104
    3a3e:	41 f4       	brne	.+16     	; 0x3a50 <vfprintf+0x122>
    3a40:	f1 01       	movw	r30, r2
    3a42:	93 fd       	sbrc	r25, 3
    3a44:	85 91       	lpm	r24, Z+
    3a46:	93 ff       	sbrs	r25, 3
    3a48:	81 91       	ld	r24, Z+
    3a4a:	1f 01       	movw	r2, r30
    3a4c:	81 11       	cpse	r24, r1
    3a4e:	b3 cf       	rjmp	.-154    	; 0x39b6 <vfprintf+0x88>
    3a50:	9b eb       	ldi	r25, 0xBB	; 187
    3a52:	98 0f       	add	r25, r24
    3a54:	93 30       	cpi	r25, 0x03	; 3
    3a56:	20 f4       	brcc	.+8      	; 0x3a60 <vfprintf+0x132>
    3a58:	99 2d       	mov	r25, r9
    3a5a:	90 61       	ori	r25, 0x10	; 16
    3a5c:	80 5e       	subi	r24, 0xE0	; 224
    3a5e:	07 c0       	rjmp	.+14     	; 0x3a6e <vfprintf+0x140>
    3a60:	9b e9       	ldi	r25, 0x9B	; 155
    3a62:	98 0f       	add	r25, r24
    3a64:	93 30       	cpi	r25, 0x03	; 3
    3a66:	08 f0       	brcs	.+2      	; 0x3a6a <vfprintf+0x13c>
    3a68:	59 c1       	rjmp	.+690    	; 0x3d1c <vfprintf+0x3ee>
    3a6a:	99 2d       	mov	r25, r9
    3a6c:	9f 7e       	andi	r25, 0xEF	; 239
    3a6e:	96 ff       	sbrs	r25, 6
    3a70:	16 e0       	ldi	r17, 0x06	; 6
    3a72:	9f 73       	andi	r25, 0x3F	; 63
    3a74:	99 2e       	mov	r9, r25
    3a76:	85 36       	cpi	r24, 0x65	; 101
    3a78:	19 f4       	brne	.+6      	; 0x3a80 <vfprintf+0x152>
    3a7a:	90 64       	ori	r25, 0x40	; 64
    3a7c:	99 2e       	mov	r9, r25
    3a7e:	08 c0       	rjmp	.+16     	; 0x3a90 <vfprintf+0x162>
    3a80:	86 36       	cpi	r24, 0x66	; 102
    3a82:	21 f4       	brne	.+8      	; 0x3a8c <vfprintf+0x15e>
    3a84:	39 2f       	mov	r19, r25
    3a86:	30 68       	ori	r19, 0x80	; 128
    3a88:	93 2e       	mov	r9, r19
    3a8a:	02 c0       	rjmp	.+4      	; 0x3a90 <vfprintf+0x162>
    3a8c:	11 11       	cpse	r17, r1
    3a8e:	11 50       	subi	r17, 0x01	; 1
    3a90:	97 fe       	sbrs	r9, 7
    3a92:	07 c0       	rjmp	.+14     	; 0x3aa2 <vfprintf+0x174>
    3a94:	1c 33       	cpi	r17, 0x3C	; 60
    3a96:	50 f4       	brcc	.+20     	; 0x3aac <vfprintf+0x17e>
    3a98:	44 24       	eor	r4, r4
    3a9a:	43 94       	inc	r4
    3a9c:	41 0e       	add	r4, r17
    3a9e:	27 e0       	ldi	r18, 0x07	; 7
    3aa0:	0b c0       	rjmp	.+22     	; 0x3ab8 <vfprintf+0x18a>
    3aa2:	18 30       	cpi	r17, 0x08	; 8
    3aa4:	38 f0       	brcs	.+14     	; 0x3ab4 <vfprintf+0x186>
    3aa6:	27 e0       	ldi	r18, 0x07	; 7
    3aa8:	17 e0       	ldi	r17, 0x07	; 7
    3aaa:	05 c0       	rjmp	.+10     	; 0x3ab6 <vfprintf+0x188>
    3aac:	27 e0       	ldi	r18, 0x07	; 7
    3aae:	9c e3       	ldi	r25, 0x3C	; 60
    3ab0:	49 2e       	mov	r4, r25
    3ab2:	02 c0       	rjmp	.+4      	; 0x3ab8 <vfprintf+0x18a>
    3ab4:	21 2f       	mov	r18, r17
    3ab6:	41 2c       	mov	r4, r1
    3ab8:	56 01       	movw	r10, r12
    3aba:	84 e0       	ldi	r24, 0x04	; 4
    3abc:	a8 0e       	add	r10, r24
    3abe:	b1 1c       	adc	r11, r1
    3ac0:	f6 01       	movw	r30, r12
    3ac2:	60 81       	ld	r22, Z
    3ac4:	71 81       	ldd	r23, Z+1	; 0x01
    3ac6:	82 81       	ldd	r24, Z+2	; 0x02
    3ac8:	93 81       	ldd	r25, Z+3	; 0x03
    3aca:	04 2d       	mov	r16, r4
    3acc:	a3 01       	movw	r20, r6
    3ace:	34 d3       	rcall	.+1640   	; 0x4138 <__ftoa_engine>
    3ad0:	6c 01       	movw	r12, r24
    3ad2:	f9 81       	ldd	r31, Y+1	; 0x01
    3ad4:	fc 87       	std	Y+12, r31	; 0x0c
    3ad6:	f0 ff       	sbrs	r31, 0
    3ad8:	02 c0       	rjmp	.+4      	; 0x3ade <vfprintf+0x1b0>
    3ada:	f3 ff       	sbrs	r31, 3
    3adc:	06 c0       	rjmp	.+12     	; 0x3aea <vfprintf+0x1bc>
    3ade:	91 fc       	sbrc	r9, 1
    3ae0:	06 c0       	rjmp	.+12     	; 0x3aee <vfprintf+0x1c0>
    3ae2:	92 fe       	sbrs	r9, 2
    3ae4:	06 c0       	rjmp	.+12     	; 0x3af2 <vfprintf+0x1c4>
    3ae6:	00 e2       	ldi	r16, 0x20	; 32
    3ae8:	05 c0       	rjmp	.+10     	; 0x3af4 <vfprintf+0x1c6>
    3aea:	0d e2       	ldi	r16, 0x2D	; 45
    3aec:	03 c0       	rjmp	.+6      	; 0x3af4 <vfprintf+0x1c6>
    3aee:	0b e2       	ldi	r16, 0x2B	; 43
    3af0:	01 c0       	rjmp	.+2      	; 0x3af4 <vfprintf+0x1c6>
    3af2:	00 e0       	ldi	r16, 0x00	; 0
    3af4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3af6:	8c 70       	andi	r24, 0x0C	; 12
    3af8:	19 f0       	breq	.+6      	; 0x3b00 <vfprintf+0x1d2>
    3afa:	01 11       	cpse	r16, r1
    3afc:	43 c2       	rjmp	.+1158   	; 0x3f84 <vfprintf+0x656>
    3afe:	80 c2       	rjmp	.+1280   	; 0x4000 <vfprintf+0x6d2>
    3b00:	97 fe       	sbrs	r9, 7
    3b02:	10 c0       	rjmp	.+32     	; 0x3b24 <vfprintf+0x1f6>
    3b04:	4c 0c       	add	r4, r12
    3b06:	fc 85       	ldd	r31, Y+12	; 0x0c
    3b08:	f4 ff       	sbrs	r31, 4
    3b0a:	04 c0       	rjmp	.+8      	; 0x3b14 <vfprintf+0x1e6>
    3b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0e:	81 33       	cpi	r24, 0x31	; 49
    3b10:	09 f4       	brne	.+2      	; 0x3b14 <vfprintf+0x1e6>
    3b12:	4a 94       	dec	r4
    3b14:	14 14       	cp	r1, r4
    3b16:	74 f5       	brge	.+92     	; 0x3b74 <vfprintf+0x246>
    3b18:	28 e0       	ldi	r18, 0x08	; 8
    3b1a:	24 15       	cp	r18, r4
    3b1c:	78 f5       	brcc	.+94     	; 0x3b7c <vfprintf+0x24e>
    3b1e:	88 e0       	ldi	r24, 0x08	; 8
    3b20:	48 2e       	mov	r4, r24
    3b22:	2c c0       	rjmp	.+88     	; 0x3b7c <vfprintf+0x24e>
    3b24:	96 fc       	sbrc	r9, 6
    3b26:	2a c0       	rjmp	.+84     	; 0x3b7c <vfprintf+0x24e>
    3b28:	81 2f       	mov	r24, r17
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	8c 15       	cp	r24, r12
    3b2e:	9d 05       	cpc	r25, r13
    3b30:	9c f0       	brlt	.+38     	; 0x3b58 <vfprintf+0x22a>
    3b32:	3c ef       	ldi	r19, 0xFC	; 252
    3b34:	c3 16       	cp	r12, r19
    3b36:	3f ef       	ldi	r19, 0xFF	; 255
    3b38:	d3 06       	cpc	r13, r19
    3b3a:	74 f0       	brlt	.+28     	; 0x3b58 <vfprintf+0x22a>
    3b3c:	89 2d       	mov	r24, r9
    3b3e:	80 68       	ori	r24, 0x80	; 128
    3b40:	98 2e       	mov	r9, r24
    3b42:	0a c0       	rjmp	.+20     	; 0x3b58 <vfprintf+0x22a>
    3b44:	e2 e0       	ldi	r30, 0x02	; 2
    3b46:	f0 e0       	ldi	r31, 0x00	; 0
    3b48:	ec 0f       	add	r30, r28
    3b4a:	fd 1f       	adc	r31, r29
    3b4c:	e1 0f       	add	r30, r17
    3b4e:	f1 1d       	adc	r31, r1
    3b50:	80 81       	ld	r24, Z
    3b52:	80 33       	cpi	r24, 0x30	; 48
    3b54:	19 f4       	brne	.+6      	; 0x3b5c <vfprintf+0x22e>
    3b56:	11 50       	subi	r17, 0x01	; 1
    3b58:	11 11       	cpse	r17, r1
    3b5a:	f4 cf       	rjmp	.-24     	; 0x3b44 <vfprintf+0x216>
    3b5c:	97 fe       	sbrs	r9, 7
    3b5e:	0e c0       	rjmp	.+28     	; 0x3b7c <vfprintf+0x24e>
    3b60:	44 24       	eor	r4, r4
    3b62:	43 94       	inc	r4
    3b64:	41 0e       	add	r4, r17
    3b66:	81 2f       	mov	r24, r17
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	c8 16       	cp	r12, r24
    3b6c:	d9 06       	cpc	r13, r25
    3b6e:	2c f4       	brge	.+10     	; 0x3b7a <vfprintf+0x24c>
    3b70:	1c 19       	sub	r17, r12
    3b72:	04 c0       	rjmp	.+8      	; 0x3b7c <vfprintf+0x24e>
    3b74:	44 24       	eor	r4, r4
    3b76:	43 94       	inc	r4
    3b78:	01 c0       	rjmp	.+2      	; 0x3b7c <vfprintf+0x24e>
    3b7a:	10 e0       	ldi	r17, 0x00	; 0
    3b7c:	97 fe       	sbrs	r9, 7
    3b7e:	06 c0       	rjmp	.+12     	; 0x3b8c <vfprintf+0x25e>
    3b80:	1c 14       	cp	r1, r12
    3b82:	1d 04       	cpc	r1, r13
    3b84:	34 f4       	brge	.+12     	; 0x3b92 <vfprintf+0x264>
    3b86:	c6 01       	movw	r24, r12
    3b88:	01 96       	adiw	r24, 0x01	; 1
    3b8a:	05 c0       	rjmp	.+10     	; 0x3b96 <vfprintf+0x268>
    3b8c:	85 e0       	ldi	r24, 0x05	; 5
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	02 c0       	rjmp	.+4      	; 0x3b96 <vfprintf+0x268>
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	01 11       	cpse	r16, r1
    3b98:	01 96       	adiw	r24, 0x01	; 1
    3b9a:	11 23       	and	r17, r17
    3b9c:	31 f0       	breq	.+12     	; 0x3baa <vfprintf+0x27c>
    3b9e:	21 2f       	mov	r18, r17
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	2f 5f       	subi	r18, 0xFF	; 255
    3ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ba6:	82 0f       	add	r24, r18
    3ba8:	93 1f       	adc	r25, r19
    3baa:	25 2d       	mov	r18, r5
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	82 17       	cp	r24, r18
    3bb0:	93 07       	cpc	r25, r19
    3bb2:	14 f4       	brge	.+4      	; 0x3bb8 <vfprintf+0x28a>
    3bb4:	58 1a       	sub	r5, r24
    3bb6:	01 c0       	rjmp	.+2      	; 0x3bba <vfprintf+0x28c>
    3bb8:	51 2c       	mov	r5, r1
    3bba:	89 2d       	mov	r24, r9
    3bbc:	89 70       	andi	r24, 0x09	; 9
    3bbe:	41 f4       	brne	.+16     	; 0x3bd0 <vfprintf+0x2a2>
    3bc0:	55 20       	and	r5, r5
    3bc2:	31 f0       	breq	.+12     	; 0x3bd0 <vfprintf+0x2a2>
    3bc4:	b7 01       	movw	r22, r14
    3bc6:	80 e2       	ldi	r24, 0x20	; 32
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	d8 d3       	rcall	.+1968   	; 0x437c <fputc>
    3bcc:	5a 94       	dec	r5
    3bce:	f8 cf       	rjmp	.-16     	; 0x3bc0 <vfprintf+0x292>
    3bd0:	00 23       	and	r16, r16
    3bd2:	21 f0       	breq	.+8      	; 0x3bdc <vfprintf+0x2ae>
    3bd4:	b7 01       	movw	r22, r14
    3bd6:	80 2f       	mov	r24, r16
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	d0 d3       	rcall	.+1952   	; 0x437c <fputc>
    3bdc:	93 fc       	sbrc	r9, 3
    3bde:	08 c0       	rjmp	.+16     	; 0x3bf0 <vfprintf+0x2c2>
    3be0:	55 20       	and	r5, r5
    3be2:	31 f0       	breq	.+12     	; 0x3bf0 <vfprintf+0x2c2>
    3be4:	b7 01       	movw	r22, r14
    3be6:	80 e3       	ldi	r24, 0x30	; 48
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	c8 d3       	rcall	.+1936   	; 0x437c <fputc>
    3bec:	5a 94       	dec	r5
    3bee:	f8 cf       	rjmp	.-16     	; 0x3be0 <vfprintf+0x2b2>
    3bf0:	97 fe       	sbrs	r9, 7
    3bf2:	4a c0       	rjmp	.+148    	; 0x3c88 <vfprintf+0x35a>
    3bf4:	46 01       	movw	r8, r12
    3bf6:	d7 fe       	sbrs	r13, 7
    3bf8:	02 c0       	rjmp	.+4      	; 0x3bfe <vfprintf+0x2d0>
    3bfa:	81 2c       	mov	r8, r1
    3bfc:	91 2c       	mov	r9, r1
    3bfe:	c6 01       	movw	r24, r12
    3c00:	88 19       	sub	r24, r8
    3c02:	99 09       	sbc	r25, r9
    3c04:	f3 01       	movw	r30, r6
    3c06:	e8 0f       	add	r30, r24
    3c08:	f9 1f       	adc	r31, r25
    3c0a:	fe 87       	std	Y+14, r31	; 0x0e
    3c0c:	ed 87       	std	Y+13, r30	; 0x0d
    3c0e:	96 01       	movw	r18, r12
    3c10:	24 19       	sub	r18, r4
    3c12:	31 09       	sbc	r19, r1
    3c14:	38 8b       	std	Y+16, r19	; 0x10
    3c16:	2f 87       	std	Y+15, r18	; 0x0f
    3c18:	01 2f       	mov	r16, r17
    3c1a:	10 e0       	ldi	r17, 0x00	; 0
    3c1c:	11 95       	neg	r17
    3c1e:	01 95       	neg	r16
    3c20:	11 09       	sbc	r17, r1
    3c22:	3f ef       	ldi	r19, 0xFF	; 255
    3c24:	83 16       	cp	r8, r19
    3c26:	93 06       	cpc	r9, r19
    3c28:	21 f4       	brne	.+8      	; 0x3c32 <vfprintf+0x304>
    3c2a:	b7 01       	movw	r22, r14
    3c2c:	8e e2       	ldi	r24, 0x2E	; 46
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	a5 d3       	rcall	.+1866   	; 0x437c <fputc>
    3c32:	c8 14       	cp	r12, r8
    3c34:	d9 04       	cpc	r13, r9
    3c36:	4c f0       	brlt	.+18     	; 0x3c4a <vfprintf+0x31c>
    3c38:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c3a:	98 89       	ldd	r25, Y+16	; 0x10
    3c3c:	88 15       	cp	r24, r8
    3c3e:	99 05       	cpc	r25, r9
    3c40:	24 f4       	brge	.+8      	; 0x3c4a <vfprintf+0x31c>
    3c42:	ed 85       	ldd	r30, Y+13	; 0x0d
    3c44:	fe 85       	ldd	r31, Y+14	; 0x0e
    3c46:	81 81       	ldd	r24, Z+1	; 0x01
    3c48:	01 c0       	rjmp	.+2      	; 0x3c4c <vfprintf+0x31e>
    3c4a:	80 e3       	ldi	r24, 0x30	; 48
    3c4c:	f1 e0       	ldi	r31, 0x01	; 1
    3c4e:	8f 1a       	sub	r8, r31
    3c50:	91 08       	sbc	r9, r1
    3c52:	2d 85       	ldd	r18, Y+13	; 0x0d
    3c54:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c56:	2f 5f       	subi	r18, 0xFF	; 255
    3c58:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5a:	3e 87       	std	Y+14, r19	; 0x0e
    3c5c:	2d 87       	std	Y+13, r18	; 0x0d
    3c5e:	80 16       	cp	r8, r16
    3c60:	91 06       	cpc	r9, r17
    3c62:	24 f0       	brlt	.+8      	; 0x3c6c <vfprintf+0x33e>
    3c64:	b7 01       	movw	r22, r14
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	89 d3       	rcall	.+1810   	; 0x437c <fputc>
    3c6a:	db cf       	rjmp	.-74     	; 0x3c22 <vfprintf+0x2f4>
    3c6c:	c8 14       	cp	r12, r8
    3c6e:	d9 04       	cpc	r13, r9
    3c70:	41 f4       	brne	.+16     	; 0x3c82 <vfprintf+0x354>
    3c72:	9a 81       	ldd	r25, Y+2	; 0x02
    3c74:	96 33       	cpi	r25, 0x36	; 54
    3c76:	20 f4       	brcc	.+8      	; 0x3c80 <vfprintf+0x352>
    3c78:	95 33       	cpi	r25, 0x35	; 53
    3c7a:	19 f4       	brne	.+6      	; 0x3c82 <vfprintf+0x354>
    3c7c:	3c 85       	ldd	r19, Y+12	; 0x0c
    3c7e:	34 ff       	sbrs	r19, 4
    3c80:	81 e3       	ldi	r24, 0x31	; 49
    3c82:	b7 01       	movw	r22, r14
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	48 c0       	rjmp	.+144    	; 0x3d18 <vfprintf+0x3ea>
    3c88:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8a:	81 33       	cpi	r24, 0x31	; 49
    3c8c:	19 f0       	breq	.+6      	; 0x3c94 <vfprintf+0x366>
    3c8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c90:	9f 7e       	andi	r25, 0xEF	; 239
    3c92:	9c 87       	std	Y+12, r25	; 0x0c
    3c94:	b7 01       	movw	r22, r14
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	71 d3       	rcall	.+1762   	; 0x437c <fputc>
    3c9a:	11 11       	cpse	r17, r1
    3c9c:	05 c0       	rjmp	.+10     	; 0x3ca8 <vfprintf+0x37a>
    3c9e:	94 fc       	sbrc	r9, 4
    3ca0:	16 c0       	rjmp	.+44     	; 0x3cce <vfprintf+0x3a0>
    3ca2:	85 e6       	ldi	r24, 0x65	; 101
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	15 c0       	rjmp	.+42     	; 0x3cd2 <vfprintf+0x3a4>
    3ca8:	b7 01       	movw	r22, r14
    3caa:	8e e2       	ldi	r24, 0x2E	; 46
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	66 d3       	rcall	.+1740   	; 0x437c <fputc>
    3cb0:	1e 5f       	subi	r17, 0xFE	; 254
    3cb2:	82 e0       	ldi	r24, 0x02	; 2
    3cb4:	01 e0       	ldi	r16, 0x01	; 1
    3cb6:	08 0f       	add	r16, r24
    3cb8:	f3 01       	movw	r30, r6
    3cba:	e8 0f       	add	r30, r24
    3cbc:	f1 1d       	adc	r31, r1
    3cbe:	80 81       	ld	r24, Z
    3cc0:	b7 01       	movw	r22, r14
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	5b d3       	rcall	.+1718   	; 0x437c <fputc>
    3cc6:	80 2f       	mov	r24, r16
    3cc8:	01 13       	cpse	r16, r17
    3cca:	f4 cf       	rjmp	.-24     	; 0x3cb4 <vfprintf+0x386>
    3ccc:	e8 cf       	rjmp	.-48     	; 0x3c9e <vfprintf+0x370>
    3cce:	85 e4       	ldi	r24, 0x45	; 69
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	b7 01       	movw	r22, r14
    3cd4:	53 d3       	rcall	.+1702   	; 0x437c <fputc>
    3cd6:	d7 fc       	sbrc	r13, 7
    3cd8:	06 c0       	rjmp	.+12     	; 0x3ce6 <vfprintf+0x3b8>
    3cda:	c1 14       	cp	r12, r1
    3cdc:	d1 04       	cpc	r13, r1
    3cde:	41 f4       	brne	.+16     	; 0x3cf0 <vfprintf+0x3c2>
    3ce0:	ec 85       	ldd	r30, Y+12	; 0x0c
    3ce2:	e4 ff       	sbrs	r30, 4
    3ce4:	05 c0       	rjmp	.+10     	; 0x3cf0 <vfprintf+0x3c2>
    3ce6:	d1 94       	neg	r13
    3ce8:	c1 94       	neg	r12
    3cea:	d1 08       	sbc	r13, r1
    3cec:	8d e2       	ldi	r24, 0x2D	; 45
    3cee:	01 c0       	rjmp	.+2      	; 0x3cf2 <vfprintf+0x3c4>
    3cf0:	8b e2       	ldi	r24, 0x2B	; 43
    3cf2:	b7 01       	movw	r22, r14
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	42 d3       	rcall	.+1668   	; 0x437c <fputc>
    3cf8:	80 e3       	ldi	r24, 0x30	; 48
    3cfa:	2a e0       	ldi	r18, 0x0A	; 10
    3cfc:	c2 16       	cp	r12, r18
    3cfe:	d1 04       	cpc	r13, r1
    3d00:	2c f0       	brlt	.+10     	; 0x3d0c <vfprintf+0x3de>
    3d02:	8f 5f       	subi	r24, 0xFF	; 255
    3d04:	fa e0       	ldi	r31, 0x0A	; 10
    3d06:	cf 1a       	sub	r12, r31
    3d08:	d1 08       	sbc	r13, r1
    3d0a:	f7 cf       	rjmp	.-18     	; 0x3cfa <vfprintf+0x3cc>
    3d0c:	b7 01       	movw	r22, r14
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	35 d3       	rcall	.+1642   	; 0x437c <fputc>
    3d12:	b7 01       	movw	r22, r14
    3d14:	c6 01       	movw	r24, r12
    3d16:	c0 96       	adiw	r24, 0x30	; 48
    3d18:	31 d3       	rcall	.+1634   	; 0x437c <fputc>
    3d1a:	49 c1       	rjmp	.+658    	; 0x3fae <vfprintf+0x680>
    3d1c:	83 36       	cpi	r24, 0x63	; 99
    3d1e:	31 f0       	breq	.+12     	; 0x3d2c <vfprintf+0x3fe>
    3d20:	83 37       	cpi	r24, 0x73	; 115
    3d22:	79 f0       	breq	.+30     	; 0x3d42 <vfprintf+0x414>
    3d24:	83 35       	cpi	r24, 0x53	; 83
    3d26:	09 f0       	breq	.+2      	; 0x3d2a <vfprintf+0x3fc>
    3d28:	52 c0       	rjmp	.+164    	; 0x3dce <vfprintf+0x4a0>
    3d2a:	1f c0       	rjmp	.+62     	; 0x3d6a <vfprintf+0x43c>
    3d2c:	56 01       	movw	r10, r12
    3d2e:	32 e0       	ldi	r19, 0x02	; 2
    3d30:	a3 0e       	add	r10, r19
    3d32:	b1 1c       	adc	r11, r1
    3d34:	f6 01       	movw	r30, r12
    3d36:	80 81       	ld	r24, Z
    3d38:	89 83       	std	Y+1, r24	; 0x01
    3d3a:	01 e0       	ldi	r16, 0x01	; 1
    3d3c:	10 e0       	ldi	r17, 0x00	; 0
    3d3e:	63 01       	movw	r12, r6
    3d40:	11 c0       	rjmp	.+34     	; 0x3d64 <vfprintf+0x436>
    3d42:	56 01       	movw	r10, r12
    3d44:	f2 e0       	ldi	r31, 0x02	; 2
    3d46:	af 0e       	add	r10, r31
    3d48:	b1 1c       	adc	r11, r1
    3d4a:	f6 01       	movw	r30, r12
    3d4c:	c0 80       	ld	r12, Z
    3d4e:	d1 80       	ldd	r13, Z+1	; 0x01
    3d50:	96 fe       	sbrs	r9, 6
    3d52:	03 c0       	rjmp	.+6      	; 0x3d5a <vfprintf+0x42c>
    3d54:	61 2f       	mov	r22, r17
    3d56:	70 e0       	ldi	r23, 0x00	; 0
    3d58:	02 c0       	rjmp	.+4      	; 0x3d5e <vfprintf+0x430>
    3d5a:	6f ef       	ldi	r22, 0xFF	; 255
    3d5c:	7f ef       	ldi	r23, 0xFF	; 255
    3d5e:	c6 01       	movw	r24, r12
    3d60:	d5 d2       	rcall	.+1450   	; 0x430c <strnlen>
    3d62:	8c 01       	movw	r16, r24
    3d64:	f9 2d       	mov	r31, r9
    3d66:	ff 77       	andi	r31, 0x7F	; 127
    3d68:	13 c0       	rjmp	.+38     	; 0x3d90 <vfprintf+0x462>
    3d6a:	56 01       	movw	r10, r12
    3d6c:	22 e0       	ldi	r18, 0x02	; 2
    3d6e:	a2 0e       	add	r10, r18
    3d70:	b1 1c       	adc	r11, r1
    3d72:	f6 01       	movw	r30, r12
    3d74:	c0 80       	ld	r12, Z
    3d76:	d1 80       	ldd	r13, Z+1	; 0x01
    3d78:	96 fe       	sbrs	r9, 6
    3d7a:	03 c0       	rjmp	.+6      	; 0x3d82 <vfprintf+0x454>
    3d7c:	61 2f       	mov	r22, r17
    3d7e:	70 e0       	ldi	r23, 0x00	; 0
    3d80:	02 c0       	rjmp	.+4      	; 0x3d86 <vfprintf+0x458>
    3d82:	6f ef       	ldi	r22, 0xFF	; 255
    3d84:	7f ef       	ldi	r23, 0xFF	; 255
    3d86:	c6 01       	movw	r24, r12
    3d88:	af d2       	rcall	.+1374   	; 0x42e8 <strnlen_P>
    3d8a:	8c 01       	movw	r16, r24
    3d8c:	f9 2d       	mov	r31, r9
    3d8e:	f0 68       	ori	r31, 0x80	; 128
    3d90:	9f 2e       	mov	r9, r31
    3d92:	f3 fd       	sbrc	r31, 3
    3d94:	18 c0       	rjmp	.+48     	; 0x3dc6 <vfprintf+0x498>
    3d96:	85 2d       	mov	r24, r5
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	08 17       	cp	r16, r24
    3d9c:	19 07       	cpc	r17, r25
    3d9e:	98 f4       	brcc	.+38     	; 0x3dc6 <vfprintf+0x498>
    3da0:	b7 01       	movw	r22, r14
    3da2:	80 e2       	ldi	r24, 0x20	; 32
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	ea d2       	rcall	.+1492   	; 0x437c <fputc>
    3da8:	5a 94       	dec	r5
    3daa:	f5 cf       	rjmp	.-22     	; 0x3d96 <vfprintf+0x468>
    3dac:	f6 01       	movw	r30, r12
    3dae:	97 fc       	sbrc	r9, 7
    3db0:	85 91       	lpm	r24, Z+
    3db2:	97 fe       	sbrs	r9, 7
    3db4:	81 91       	ld	r24, Z+
    3db6:	6f 01       	movw	r12, r30
    3db8:	b7 01       	movw	r22, r14
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	df d2       	rcall	.+1470   	; 0x437c <fputc>
    3dbe:	51 10       	cpse	r5, r1
    3dc0:	5a 94       	dec	r5
    3dc2:	01 50       	subi	r16, 0x01	; 1
    3dc4:	11 09       	sbc	r17, r1
    3dc6:	01 15       	cp	r16, r1
    3dc8:	11 05       	cpc	r17, r1
    3dca:	81 f7       	brne	.-32     	; 0x3dac <vfprintf+0x47e>
    3dcc:	f0 c0       	rjmp	.+480    	; 0x3fae <vfprintf+0x680>
    3dce:	84 36       	cpi	r24, 0x64	; 100
    3dd0:	11 f0       	breq	.+4      	; 0x3dd6 <vfprintf+0x4a8>
    3dd2:	89 36       	cpi	r24, 0x69	; 105
    3dd4:	59 f5       	brne	.+86     	; 0x3e2c <vfprintf+0x4fe>
    3dd6:	56 01       	movw	r10, r12
    3dd8:	97 fe       	sbrs	r9, 7
    3dda:	09 c0       	rjmp	.+18     	; 0x3dee <vfprintf+0x4c0>
    3ddc:	24 e0       	ldi	r18, 0x04	; 4
    3dde:	a2 0e       	add	r10, r18
    3de0:	b1 1c       	adc	r11, r1
    3de2:	f6 01       	movw	r30, r12
    3de4:	60 81       	ld	r22, Z
    3de6:	71 81       	ldd	r23, Z+1	; 0x01
    3de8:	82 81       	ldd	r24, Z+2	; 0x02
    3dea:	93 81       	ldd	r25, Z+3	; 0x03
    3dec:	0a c0       	rjmp	.+20     	; 0x3e02 <vfprintf+0x4d4>
    3dee:	f2 e0       	ldi	r31, 0x02	; 2
    3df0:	af 0e       	add	r10, r31
    3df2:	b1 1c       	adc	r11, r1
    3df4:	f6 01       	movw	r30, r12
    3df6:	60 81       	ld	r22, Z
    3df8:	71 81       	ldd	r23, Z+1	; 0x01
    3dfa:	07 2e       	mov	r0, r23
    3dfc:	00 0c       	add	r0, r0
    3dfe:	88 0b       	sbc	r24, r24
    3e00:	99 0b       	sbc	r25, r25
    3e02:	f9 2d       	mov	r31, r9
    3e04:	ff 76       	andi	r31, 0x6F	; 111
    3e06:	9f 2e       	mov	r9, r31
    3e08:	97 ff       	sbrs	r25, 7
    3e0a:	09 c0       	rjmp	.+18     	; 0x3e1e <vfprintf+0x4f0>
    3e0c:	90 95       	com	r25
    3e0e:	80 95       	com	r24
    3e10:	70 95       	com	r23
    3e12:	61 95       	neg	r22
    3e14:	7f 4f       	sbci	r23, 0xFF	; 255
    3e16:	8f 4f       	sbci	r24, 0xFF	; 255
    3e18:	9f 4f       	sbci	r25, 0xFF	; 255
    3e1a:	f0 68       	ori	r31, 0x80	; 128
    3e1c:	9f 2e       	mov	r9, r31
    3e1e:	2a e0       	ldi	r18, 0x0A	; 10
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	a3 01       	movw	r20, r6
    3e24:	2f d3       	rcall	.+1630   	; 0x4484 <__ultoa_invert>
    3e26:	c8 2e       	mov	r12, r24
    3e28:	c6 18       	sub	r12, r6
    3e2a:	3e c0       	rjmp	.+124    	; 0x3ea8 <vfprintf+0x57a>
    3e2c:	09 2d       	mov	r16, r9
    3e2e:	85 37       	cpi	r24, 0x75	; 117
    3e30:	21 f4       	brne	.+8      	; 0x3e3a <vfprintf+0x50c>
    3e32:	0f 7e       	andi	r16, 0xEF	; 239
    3e34:	2a e0       	ldi	r18, 0x0A	; 10
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	1d c0       	rjmp	.+58     	; 0x3e74 <vfprintf+0x546>
    3e3a:	09 7f       	andi	r16, 0xF9	; 249
    3e3c:	8f 36       	cpi	r24, 0x6F	; 111
    3e3e:	91 f0       	breq	.+36     	; 0x3e64 <vfprintf+0x536>
    3e40:	18 f4       	brcc	.+6      	; 0x3e48 <vfprintf+0x51a>
    3e42:	88 35       	cpi	r24, 0x58	; 88
    3e44:	59 f0       	breq	.+22     	; 0x3e5c <vfprintf+0x52e>
    3e46:	bc c0       	rjmp	.+376    	; 0x3fc0 <vfprintf+0x692>
    3e48:	80 37       	cpi	r24, 0x70	; 112
    3e4a:	19 f0       	breq	.+6      	; 0x3e52 <vfprintf+0x524>
    3e4c:	88 37       	cpi	r24, 0x78	; 120
    3e4e:	11 f0       	breq	.+4      	; 0x3e54 <vfprintf+0x526>
    3e50:	b7 c0       	rjmp	.+366    	; 0x3fc0 <vfprintf+0x692>
    3e52:	00 61       	ori	r16, 0x10	; 16
    3e54:	04 ff       	sbrs	r16, 4
    3e56:	09 c0       	rjmp	.+18     	; 0x3e6a <vfprintf+0x53c>
    3e58:	04 60       	ori	r16, 0x04	; 4
    3e5a:	07 c0       	rjmp	.+14     	; 0x3e6a <vfprintf+0x53c>
    3e5c:	94 fe       	sbrs	r9, 4
    3e5e:	08 c0       	rjmp	.+16     	; 0x3e70 <vfprintf+0x542>
    3e60:	06 60       	ori	r16, 0x06	; 6
    3e62:	06 c0       	rjmp	.+12     	; 0x3e70 <vfprintf+0x542>
    3e64:	28 e0       	ldi	r18, 0x08	; 8
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	05 c0       	rjmp	.+10     	; 0x3e74 <vfprintf+0x546>
    3e6a:	20 e1       	ldi	r18, 0x10	; 16
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	02 c0       	rjmp	.+4      	; 0x3e74 <vfprintf+0x546>
    3e70:	20 e1       	ldi	r18, 0x10	; 16
    3e72:	32 e0       	ldi	r19, 0x02	; 2
    3e74:	56 01       	movw	r10, r12
    3e76:	07 ff       	sbrs	r16, 7
    3e78:	09 c0       	rjmp	.+18     	; 0x3e8c <vfprintf+0x55e>
    3e7a:	84 e0       	ldi	r24, 0x04	; 4
    3e7c:	a8 0e       	add	r10, r24
    3e7e:	b1 1c       	adc	r11, r1
    3e80:	f6 01       	movw	r30, r12
    3e82:	60 81       	ld	r22, Z
    3e84:	71 81       	ldd	r23, Z+1	; 0x01
    3e86:	82 81       	ldd	r24, Z+2	; 0x02
    3e88:	93 81       	ldd	r25, Z+3	; 0x03
    3e8a:	08 c0       	rjmp	.+16     	; 0x3e9c <vfprintf+0x56e>
    3e8c:	f2 e0       	ldi	r31, 0x02	; 2
    3e8e:	af 0e       	add	r10, r31
    3e90:	b1 1c       	adc	r11, r1
    3e92:	f6 01       	movw	r30, r12
    3e94:	60 81       	ld	r22, Z
    3e96:	71 81       	ldd	r23, Z+1	; 0x01
    3e98:	80 e0       	ldi	r24, 0x00	; 0
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	a3 01       	movw	r20, r6
    3e9e:	f2 d2       	rcall	.+1508   	; 0x4484 <__ultoa_invert>
    3ea0:	c8 2e       	mov	r12, r24
    3ea2:	c6 18       	sub	r12, r6
    3ea4:	0f 77       	andi	r16, 0x7F	; 127
    3ea6:	90 2e       	mov	r9, r16
    3ea8:	96 fe       	sbrs	r9, 6
    3eaa:	0b c0       	rjmp	.+22     	; 0x3ec2 <vfprintf+0x594>
    3eac:	09 2d       	mov	r16, r9
    3eae:	0e 7f       	andi	r16, 0xFE	; 254
    3eb0:	c1 16       	cp	r12, r17
    3eb2:	50 f4       	brcc	.+20     	; 0x3ec8 <vfprintf+0x59a>
    3eb4:	94 fe       	sbrs	r9, 4
    3eb6:	0a c0       	rjmp	.+20     	; 0x3ecc <vfprintf+0x59e>
    3eb8:	92 fc       	sbrc	r9, 2
    3eba:	08 c0       	rjmp	.+16     	; 0x3ecc <vfprintf+0x59e>
    3ebc:	09 2d       	mov	r16, r9
    3ebe:	0e 7e       	andi	r16, 0xEE	; 238
    3ec0:	05 c0       	rjmp	.+10     	; 0x3ecc <vfprintf+0x59e>
    3ec2:	dc 2c       	mov	r13, r12
    3ec4:	09 2d       	mov	r16, r9
    3ec6:	03 c0       	rjmp	.+6      	; 0x3ece <vfprintf+0x5a0>
    3ec8:	dc 2c       	mov	r13, r12
    3eca:	01 c0       	rjmp	.+2      	; 0x3ece <vfprintf+0x5a0>
    3ecc:	d1 2e       	mov	r13, r17
    3ece:	04 ff       	sbrs	r16, 4
    3ed0:	0d c0       	rjmp	.+26     	; 0x3eec <vfprintf+0x5be>
    3ed2:	fe 01       	movw	r30, r28
    3ed4:	ec 0d       	add	r30, r12
    3ed6:	f1 1d       	adc	r31, r1
    3ed8:	80 81       	ld	r24, Z
    3eda:	80 33       	cpi	r24, 0x30	; 48
    3edc:	11 f4       	brne	.+4      	; 0x3ee2 <vfprintf+0x5b4>
    3ede:	09 7e       	andi	r16, 0xE9	; 233
    3ee0:	09 c0       	rjmp	.+18     	; 0x3ef4 <vfprintf+0x5c6>
    3ee2:	02 ff       	sbrs	r16, 2
    3ee4:	06 c0       	rjmp	.+12     	; 0x3ef2 <vfprintf+0x5c4>
    3ee6:	d3 94       	inc	r13
    3ee8:	d3 94       	inc	r13
    3eea:	04 c0       	rjmp	.+8      	; 0x3ef4 <vfprintf+0x5c6>
    3eec:	80 2f       	mov	r24, r16
    3eee:	86 78       	andi	r24, 0x86	; 134
    3ef0:	09 f0       	breq	.+2      	; 0x3ef4 <vfprintf+0x5c6>
    3ef2:	d3 94       	inc	r13
    3ef4:	03 fd       	sbrc	r16, 3
    3ef6:	10 c0       	rjmp	.+32     	; 0x3f18 <vfprintf+0x5ea>
    3ef8:	00 ff       	sbrs	r16, 0
    3efa:	06 c0       	rjmp	.+12     	; 0x3f08 <vfprintf+0x5da>
    3efc:	1c 2d       	mov	r17, r12
    3efe:	d5 14       	cp	r13, r5
    3f00:	78 f4       	brcc	.+30     	; 0x3f20 <vfprintf+0x5f2>
    3f02:	15 0d       	add	r17, r5
    3f04:	1d 19       	sub	r17, r13
    3f06:	0c c0       	rjmp	.+24     	; 0x3f20 <vfprintf+0x5f2>
    3f08:	d5 14       	cp	r13, r5
    3f0a:	50 f4       	brcc	.+20     	; 0x3f20 <vfprintf+0x5f2>
    3f0c:	b7 01       	movw	r22, r14
    3f0e:	80 e2       	ldi	r24, 0x20	; 32
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	34 d2       	rcall	.+1128   	; 0x437c <fputc>
    3f14:	d3 94       	inc	r13
    3f16:	f8 cf       	rjmp	.-16     	; 0x3f08 <vfprintf+0x5da>
    3f18:	d5 14       	cp	r13, r5
    3f1a:	10 f4       	brcc	.+4      	; 0x3f20 <vfprintf+0x5f2>
    3f1c:	5d 18       	sub	r5, r13
    3f1e:	01 c0       	rjmp	.+2      	; 0x3f22 <vfprintf+0x5f4>
    3f20:	51 2c       	mov	r5, r1
    3f22:	04 ff       	sbrs	r16, 4
    3f24:	0f c0       	rjmp	.+30     	; 0x3f44 <vfprintf+0x616>
    3f26:	b7 01       	movw	r22, r14
    3f28:	80 e3       	ldi	r24, 0x30	; 48
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	27 d2       	rcall	.+1102   	; 0x437c <fputc>
    3f2e:	02 ff       	sbrs	r16, 2
    3f30:	16 c0       	rjmp	.+44     	; 0x3f5e <vfprintf+0x630>
    3f32:	01 fd       	sbrc	r16, 1
    3f34:	03 c0       	rjmp	.+6      	; 0x3f3c <vfprintf+0x60e>
    3f36:	88 e7       	ldi	r24, 0x78	; 120
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	02 c0       	rjmp	.+4      	; 0x3f40 <vfprintf+0x612>
    3f3c:	88 e5       	ldi	r24, 0x58	; 88
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	b7 01       	movw	r22, r14
    3f42:	0c c0       	rjmp	.+24     	; 0x3f5c <vfprintf+0x62e>
    3f44:	80 2f       	mov	r24, r16
    3f46:	86 78       	andi	r24, 0x86	; 134
    3f48:	51 f0       	breq	.+20     	; 0x3f5e <vfprintf+0x630>
    3f4a:	01 ff       	sbrs	r16, 1
    3f4c:	02 c0       	rjmp	.+4      	; 0x3f52 <vfprintf+0x624>
    3f4e:	8b e2       	ldi	r24, 0x2B	; 43
    3f50:	01 c0       	rjmp	.+2      	; 0x3f54 <vfprintf+0x626>
    3f52:	80 e2       	ldi	r24, 0x20	; 32
    3f54:	07 fd       	sbrc	r16, 7
    3f56:	8d e2       	ldi	r24, 0x2D	; 45
    3f58:	b7 01       	movw	r22, r14
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	0f d2       	rcall	.+1054   	; 0x437c <fputc>
    3f5e:	c1 16       	cp	r12, r17
    3f60:	30 f4       	brcc	.+12     	; 0x3f6e <vfprintf+0x640>
    3f62:	b7 01       	movw	r22, r14
    3f64:	80 e3       	ldi	r24, 0x30	; 48
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	09 d2       	rcall	.+1042   	; 0x437c <fputc>
    3f6a:	11 50       	subi	r17, 0x01	; 1
    3f6c:	f8 cf       	rjmp	.-16     	; 0x3f5e <vfprintf+0x630>
    3f6e:	ca 94       	dec	r12
    3f70:	f3 01       	movw	r30, r6
    3f72:	ec 0d       	add	r30, r12
    3f74:	f1 1d       	adc	r31, r1
    3f76:	80 81       	ld	r24, Z
    3f78:	b7 01       	movw	r22, r14
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	ff d1       	rcall	.+1022   	; 0x437c <fputc>
    3f7e:	c1 10       	cpse	r12, r1
    3f80:	f6 cf       	rjmp	.-20     	; 0x3f6e <vfprintf+0x640>
    3f82:	15 c0       	rjmp	.+42     	; 0x3fae <vfprintf+0x680>
    3f84:	f4 e0       	ldi	r31, 0x04	; 4
    3f86:	f5 15       	cp	r31, r5
    3f88:	50 f5       	brcc	.+84     	; 0x3fde <vfprintf+0x6b0>
    3f8a:	84 e0       	ldi	r24, 0x04	; 4
    3f8c:	58 1a       	sub	r5, r24
    3f8e:	93 fe       	sbrs	r9, 3
    3f90:	1e c0       	rjmp	.+60     	; 0x3fce <vfprintf+0x6a0>
    3f92:	01 11       	cpse	r16, r1
    3f94:	25 c0       	rjmp	.+74     	; 0x3fe0 <vfprintf+0x6b2>
    3f96:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f98:	23 ff       	sbrs	r18, 3
    3f9a:	27 c0       	rjmp	.+78     	; 0x3fea <vfprintf+0x6bc>
    3f9c:	06 e2       	ldi	r16, 0x26	; 38
    3f9e:	13 e0       	ldi	r17, 0x03	; 3
    3fa0:	39 2d       	mov	r19, r9
    3fa2:	30 71       	andi	r19, 0x10	; 16
    3fa4:	93 2e       	mov	r9, r19
    3fa6:	f8 01       	movw	r30, r16
    3fa8:	84 91       	lpm	r24, Z
    3faa:	81 11       	cpse	r24, r1
    3fac:	21 c0       	rjmp	.+66     	; 0x3ff0 <vfprintf+0x6c2>
    3fae:	55 20       	and	r5, r5
    3fb0:	09 f4       	brne	.+2      	; 0x3fb4 <vfprintf+0x686>
    3fb2:	fc cc       	rjmp	.-1544   	; 0x39ac <vfprintf+0x7e>
    3fb4:	b7 01       	movw	r22, r14
    3fb6:	80 e2       	ldi	r24, 0x20	; 32
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	e0 d1       	rcall	.+960    	; 0x437c <fputc>
    3fbc:	5a 94       	dec	r5
    3fbe:	f7 cf       	rjmp	.-18     	; 0x3fae <vfprintf+0x680>
    3fc0:	f7 01       	movw	r30, r14
    3fc2:	86 81       	ldd	r24, Z+6	; 0x06
    3fc4:	97 81       	ldd	r25, Z+7	; 0x07
    3fc6:	23 c0       	rjmp	.+70     	; 0x400e <vfprintf+0x6e0>
    3fc8:	8f ef       	ldi	r24, 0xFF	; 255
    3fca:	9f ef       	ldi	r25, 0xFF	; 255
    3fcc:	20 c0       	rjmp	.+64     	; 0x400e <vfprintf+0x6e0>
    3fce:	b7 01       	movw	r22, r14
    3fd0:	80 e2       	ldi	r24, 0x20	; 32
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	d3 d1       	rcall	.+934    	; 0x437c <fputc>
    3fd6:	5a 94       	dec	r5
    3fd8:	51 10       	cpse	r5, r1
    3fda:	f9 cf       	rjmp	.-14     	; 0x3fce <vfprintf+0x6a0>
    3fdc:	da cf       	rjmp	.-76     	; 0x3f92 <vfprintf+0x664>
    3fde:	51 2c       	mov	r5, r1
    3fe0:	b7 01       	movw	r22, r14
    3fe2:	80 2f       	mov	r24, r16
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	ca d1       	rcall	.+916    	; 0x437c <fputc>
    3fe8:	d6 cf       	rjmp	.-84     	; 0x3f96 <vfprintf+0x668>
    3fea:	0a e2       	ldi	r16, 0x2A	; 42
    3fec:	13 e0       	ldi	r17, 0x03	; 3
    3fee:	d8 cf       	rjmp	.-80     	; 0x3fa0 <vfprintf+0x672>
    3ff0:	91 10       	cpse	r9, r1
    3ff2:	80 52       	subi	r24, 0x20	; 32
    3ff4:	b7 01       	movw	r22, r14
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	c1 d1       	rcall	.+898    	; 0x437c <fputc>
    3ffa:	0f 5f       	subi	r16, 0xFF	; 255
    3ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ffe:	d3 cf       	rjmp	.-90     	; 0x3fa6 <vfprintf+0x678>
    4000:	23 e0       	ldi	r18, 0x03	; 3
    4002:	25 15       	cp	r18, r5
    4004:	10 f4       	brcc	.+4      	; 0x400a <vfprintf+0x6dc>
    4006:	83 e0       	ldi	r24, 0x03	; 3
    4008:	c1 cf       	rjmp	.-126    	; 0x3f8c <vfprintf+0x65e>
    400a:	51 2c       	mov	r5, r1
    400c:	c4 cf       	rjmp	.-120    	; 0x3f96 <vfprintf+0x668>
    400e:	60 96       	adiw	r28, 0x10	; 16
    4010:	0f b6       	in	r0, 0x3f	; 63
    4012:	f8 94       	cli
    4014:	de bf       	out	0x3e, r29	; 62
    4016:	0f be       	out	0x3f, r0	; 63
    4018:	cd bf       	out	0x3d, r28	; 61
    401a:	df 91       	pop	r29
    401c:	cf 91       	pop	r28
    401e:	1f 91       	pop	r17
    4020:	0f 91       	pop	r16
    4022:	ff 90       	pop	r15
    4024:	ef 90       	pop	r14
    4026:	df 90       	pop	r13
    4028:	cf 90       	pop	r12
    402a:	bf 90       	pop	r11
    402c:	af 90       	pop	r10
    402e:	9f 90       	pop	r9
    4030:	8f 90       	pop	r8
    4032:	7f 90       	pop	r7
    4034:	6f 90       	pop	r6
    4036:	5f 90       	pop	r5
    4038:	4f 90       	pop	r4
    403a:	3f 90       	pop	r3
    403c:	2f 90       	pop	r2
    403e:	08 95       	ret

00004040 <__divmodhi4>:
    4040:	97 fb       	bst	r25, 7
    4042:	07 2e       	mov	r0, r23
    4044:	16 f4       	brtc	.+4      	; 0x404a <__divmodhi4+0xa>
    4046:	00 94       	com	r0
    4048:	06 d0       	rcall	.+12     	; 0x4056 <__divmodhi4_neg1>
    404a:	77 fd       	sbrc	r23, 7
    404c:	08 d0       	rcall	.+16     	; 0x405e <__divmodhi4_neg2>
    404e:	60 d0       	rcall	.+192    	; 0x4110 <__udivmodhi4>
    4050:	07 fc       	sbrc	r0, 7
    4052:	05 d0       	rcall	.+10     	; 0x405e <__divmodhi4_neg2>
    4054:	3e f4       	brtc	.+14     	; 0x4064 <__divmodhi4_exit>

00004056 <__divmodhi4_neg1>:
    4056:	90 95       	com	r25
    4058:	81 95       	neg	r24
    405a:	9f 4f       	sbci	r25, 0xFF	; 255
    405c:	08 95       	ret

0000405e <__divmodhi4_neg2>:
    405e:	70 95       	com	r23
    4060:	61 95       	neg	r22
    4062:	7f 4f       	sbci	r23, 0xFF	; 255

00004064 <__divmodhi4_exit>:
    4064:	08 95       	ret

00004066 <__udivmodsi4>:
    4066:	a1 e2       	ldi	r26, 0x21	; 33
    4068:	1a 2e       	mov	r1, r26
    406a:	aa 1b       	sub	r26, r26
    406c:	bb 1b       	sub	r27, r27
    406e:	fd 01       	movw	r30, r26
    4070:	0d c0       	rjmp	.+26     	; 0x408c <__udivmodsi4_ep>

00004072 <__udivmodsi4_loop>:
    4072:	aa 1f       	adc	r26, r26
    4074:	bb 1f       	adc	r27, r27
    4076:	ee 1f       	adc	r30, r30
    4078:	ff 1f       	adc	r31, r31
    407a:	a2 17       	cp	r26, r18
    407c:	b3 07       	cpc	r27, r19
    407e:	e4 07       	cpc	r30, r20
    4080:	f5 07       	cpc	r31, r21
    4082:	20 f0       	brcs	.+8      	; 0x408c <__udivmodsi4_ep>
    4084:	a2 1b       	sub	r26, r18
    4086:	b3 0b       	sbc	r27, r19
    4088:	e4 0b       	sbc	r30, r20
    408a:	f5 0b       	sbc	r31, r21

0000408c <__udivmodsi4_ep>:
    408c:	66 1f       	adc	r22, r22
    408e:	77 1f       	adc	r23, r23
    4090:	88 1f       	adc	r24, r24
    4092:	99 1f       	adc	r25, r25
    4094:	1a 94       	dec	r1
    4096:	69 f7       	brne	.-38     	; 0x4072 <__udivmodsi4_loop>
    4098:	60 95       	com	r22
    409a:	70 95       	com	r23
    409c:	80 95       	com	r24
    409e:	90 95       	com	r25
    40a0:	9b 01       	movw	r18, r22
    40a2:	ac 01       	movw	r20, r24
    40a4:	bd 01       	movw	r22, r26
    40a6:	cf 01       	movw	r24, r30
    40a8:	08 95       	ret

000040aa <__divmodsi4>:
    40aa:	05 2e       	mov	r0, r21
    40ac:	97 fb       	bst	r25, 7
    40ae:	16 f4       	brtc	.+4      	; 0x40b4 <__divmodsi4+0xa>
    40b0:	00 94       	com	r0
    40b2:	0f d0       	rcall	.+30     	; 0x40d2 <__negsi2>
    40b4:	57 fd       	sbrc	r21, 7
    40b6:	05 d0       	rcall	.+10     	; 0x40c2 <__divmodsi4_neg2>
    40b8:	d6 df       	rcall	.-84     	; 0x4066 <__udivmodsi4>
    40ba:	07 fc       	sbrc	r0, 7
    40bc:	02 d0       	rcall	.+4      	; 0x40c2 <__divmodsi4_neg2>
    40be:	46 f4       	brtc	.+16     	; 0x40d0 <__divmodsi4_exit>
    40c0:	08 c0       	rjmp	.+16     	; 0x40d2 <__negsi2>

000040c2 <__divmodsi4_neg2>:
    40c2:	50 95       	com	r21
    40c4:	40 95       	com	r20
    40c6:	30 95       	com	r19
    40c8:	21 95       	neg	r18
    40ca:	3f 4f       	sbci	r19, 0xFF	; 255
    40cc:	4f 4f       	sbci	r20, 0xFF	; 255
    40ce:	5f 4f       	sbci	r21, 0xFF	; 255

000040d0 <__divmodsi4_exit>:
    40d0:	08 95       	ret

000040d2 <__negsi2>:
    40d2:	90 95       	com	r25
    40d4:	80 95       	com	r24
    40d6:	70 95       	com	r23
    40d8:	61 95       	neg	r22
    40da:	7f 4f       	sbci	r23, 0xFF	; 255
    40dc:	8f 4f       	sbci	r24, 0xFF	; 255
    40de:	9f 4f       	sbci	r25, 0xFF	; 255
    40e0:	08 95       	ret

000040e2 <__tablejump2__>:
    40e2:	ee 0f       	add	r30, r30
    40e4:	ff 1f       	adc	r31, r31
    40e6:	88 1f       	adc	r24, r24
    40e8:	8b bf       	out	0x3b, r24	; 59
    40ea:	07 90       	elpm	r0, Z+
    40ec:	f6 91       	elpm	r31, Z
    40ee:	e0 2d       	mov	r30, r0
    40f0:	19 94       	eijmp

000040f2 <__umulhisi3>:
    40f2:	a2 9f       	mul	r26, r18
    40f4:	b0 01       	movw	r22, r0
    40f6:	b3 9f       	mul	r27, r19
    40f8:	c0 01       	movw	r24, r0
    40fa:	a3 9f       	mul	r26, r19
    40fc:	70 0d       	add	r23, r0
    40fe:	81 1d       	adc	r24, r1
    4100:	11 24       	eor	r1, r1
    4102:	91 1d       	adc	r25, r1
    4104:	b2 9f       	mul	r27, r18
    4106:	70 0d       	add	r23, r0
    4108:	81 1d       	adc	r24, r1
    410a:	11 24       	eor	r1, r1
    410c:	91 1d       	adc	r25, r1
    410e:	08 95       	ret

00004110 <__udivmodhi4>:
    4110:	aa 1b       	sub	r26, r26
    4112:	bb 1b       	sub	r27, r27
    4114:	51 e1       	ldi	r21, 0x11	; 17
    4116:	07 c0       	rjmp	.+14     	; 0x4126 <__udivmodhi4_ep>

00004118 <__udivmodhi4_loop>:
    4118:	aa 1f       	adc	r26, r26
    411a:	bb 1f       	adc	r27, r27
    411c:	a6 17       	cp	r26, r22
    411e:	b7 07       	cpc	r27, r23
    4120:	10 f0       	brcs	.+4      	; 0x4126 <__udivmodhi4_ep>
    4122:	a6 1b       	sub	r26, r22
    4124:	b7 0b       	sbc	r27, r23

00004126 <__udivmodhi4_ep>:
    4126:	88 1f       	adc	r24, r24
    4128:	99 1f       	adc	r25, r25
    412a:	5a 95       	dec	r21
    412c:	a9 f7       	brne	.-22     	; 0x4118 <__udivmodhi4_loop>
    412e:	80 95       	com	r24
    4130:	90 95       	com	r25
    4132:	bc 01       	movw	r22, r24
    4134:	cd 01       	movw	r24, r26
    4136:	08 95       	ret

00004138 <__ftoa_engine>:
    4138:	28 30       	cpi	r18, 0x08	; 8
    413a:	08 f0       	brcs	.+2      	; 0x413e <__ftoa_engine+0x6>
    413c:	27 e0       	ldi	r18, 0x07	; 7
    413e:	33 27       	eor	r19, r19
    4140:	da 01       	movw	r26, r20
    4142:	99 0f       	add	r25, r25
    4144:	31 1d       	adc	r19, r1
    4146:	87 fd       	sbrc	r24, 7
    4148:	91 60       	ori	r25, 0x01	; 1
    414a:	00 96       	adiw	r24, 0x00	; 0
    414c:	61 05       	cpc	r22, r1
    414e:	71 05       	cpc	r23, r1
    4150:	39 f4       	brne	.+14     	; 0x4160 <__ftoa_engine+0x28>
    4152:	32 60       	ori	r19, 0x02	; 2
    4154:	2e 5f       	subi	r18, 0xFE	; 254
    4156:	3d 93       	st	X+, r19
    4158:	30 e3       	ldi	r19, 0x30	; 48
    415a:	2a 95       	dec	r18
    415c:	e1 f7       	brne	.-8      	; 0x4156 <__ftoa_engine+0x1e>
    415e:	08 95       	ret
    4160:	9f 3f       	cpi	r25, 0xFF	; 255
    4162:	30 f0       	brcs	.+12     	; 0x4170 <__ftoa_engine+0x38>
    4164:	80 38       	cpi	r24, 0x80	; 128
    4166:	71 05       	cpc	r23, r1
    4168:	61 05       	cpc	r22, r1
    416a:	09 f0       	breq	.+2      	; 0x416e <__ftoa_engine+0x36>
    416c:	3c 5f       	subi	r19, 0xFC	; 252
    416e:	3c 5f       	subi	r19, 0xFC	; 252
    4170:	3d 93       	st	X+, r19
    4172:	91 30       	cpi	r25, 0x01	; 1
    4174:	08 f0       	brcs	.+2      	; 0x4178 <__ftoa_engine+0x40>
    4176:	80 68       	ori	r24, 0x80	; 128
    4178:	91 1d       	adc	r25, r1
    417a:	df 93       	push	r29
    417c:	cf 93       	push	r28
    417e:	1f 93       	push	r17
    4180:	0f 93       	push	r16
    4182:	ff 92       	push	r15
    4184:	ef 92       	push	r14
    4186:	19 2f       	mov	r17, r25
    4188:	98 7f       	andi	r25, 0xF8	; 248
    418a:	96 95       	lsr	r25
    418c:	e9 2f       	mov	r30, r25
    418e:	96 95       	lsr	r25
    4190:	96 95       	lsr	r25
    4192:	e9 0f       	add	r30, r25
    4194:	ff 27       	eor	r31, r31
    4196:	e8 57       	subi	r30, 0x78	; 120
    4198:	fc 4f       	sbci	r31, 0xFC	; 252
    419a:	99 27       	eor	r25, r25
    419c:	33 27       	eor	r19, r19
    419e:	ee 24       	eor	r14, r14
    41a0:	ff 24       	eor	r15, r15
    41a2:	a7 01       	movw	r20, r14
    41a4:	e7 01       	movw	r28, r14
    41a6:	05 90       	lpm	r0, Z+
    41a8:	08 94       	sec
    41aa:	07 94       	ror	r0
    41ac:	28 f4       	brcc	.+10     	; 0x41b8 <__ftoa_engine+0x80>
    41ae:	36 0f       	add	r19, r22
    41b0:	e7 1e       	adc	r14, r23
    41b2:	f8 1e       	adc	r15, r24
    41b4:	49 1f       	adc	r20, r25
    41b6:	51 1d       	adc	r21, r1
    41b8:	66 0f       	add	r22, r22
    41ba:	77 1f       	adc	r23, r23
    41bc:	88 1f       	adc	r24, r24
    41be:	99 1f       	adc	r25, r25
    41c0:	06 94       	lsr	r0
    41c2:	a1 f7       	brne	.-24     	; 0x41ac <__ftoa_engine+0x74>
    41c4:	05 90       	lpm	r0, Z+
    41c6:	07 94       	ror	r0
    41c8:	28 f4       	brcc	.+10     	; 0x41d4 <__ftoa_engine+0x9c>
    41ca:	e7 0e       	add	r14, r23
    41cc:	f8 1e       	adc	r15, r24
    41ce:	49 1f       	adc	r20, r25
    41d0:	56 1f       	adc	r21, r22
    41d2:	c1 1d       	adc	r28, r1
    41d4:	77 0f       	add	r23, r23
    41d6:	88 1f       	adc	r24, r24
    41d8:	99 1f       	adc	r25, r25
    41da:	66 1f       	adc	r22, r22
    41dc:	06 94       	lsr	r0
    41de:	a1 f7       	brne	.-24     	; 0x41c8 <__ftoa_engine+0x90>
    41e0:	05 90       	lpm	r0, Z+
    41e2:	07 94       	ror	r0
    41e4:	28 f4       	brcc	.+10     	; 0x41f0 <__ftoa_engine+0xb8>
    41e6:	f8 0e       	add	r15, r24
    41e8:	49 1f       	adc	r20, r25
    41ea:	56 1f       	adc	r21, r22
    41ec:	c7 1f       	adc	r28, r23
    41ee:	d1 1d       	adc	r29, r1
    41f0:	88 0f       	add	r24, r24
    41f2:	99 1f       	adc	r25, r25
    41f4:	66 1f       	adc	r22, r22
    41f6:	77 1f       	adc	r23, r23
    41f8:	06 94       	lsr	r0
    41fa:	a1 f7       	brne	.-24     	; 0x41e4 <__ftoa_engine+0xac>
    41fc:	05 90       	lpm	r0, Z+
    41fe:	07 94       	ror	r0
    4200:	20 f4       	brcc	.+8      	; 0x420a <__ftoa_engine+0xd2>
    4202:	49 0f       	add	r20, r25
    4204:	56 1f       	adc	r21, r22
    4206:	c7 1f       	adc	r28, r23
    4208:	d8 1f       	adc	r29, r24
    420a:	99 0f       	add	r25, r25
    420c:	66 1f       	adc	r22, r22
    420e:	77 1f       	adc	r23, r23
    4210:	88 1f       	adc	r24, r24
    4212:	06 94       	lsr	r0
    4214:	a9 f7       	brne	.-22     	; 0x4200 <__ftoa_engine+0xc8>
    4216:	84 91       	lpm	r24, Z
    4218:	10 95       	com	r17
    421a:	17 70       	andi	r17, 0x07	; 7
    421c:	41 f0       	breq	.+16     	; 0x422e <__ftoa_engine+0xf6>
    421e:	d6 95       	lsr	r29
    4220:	c7 95       	ror	r28
    4222:	57 95       	ror	r21
    4224:	47 95       	ror	r20
    4226:	f7 94       	ror	r15
    4228:	e7 94       	ror	r14
    422a:	1a 95       	dec	r17
    422c:	c1 f7       	brne	.-16     	; 0x421e <__ftoa_engine+0xe6>
    422e:	ee e2       	ldi	r30, 0x2E	; 46
    4230:	f3 e0       	ldi	r31, 0x03	; 3
    4232:	68 94       	set
    4234:	15 90       	lpm	r1, Z+
    4236:	15 91       	lpm	r17, Z+
    4238:	35 91       	lpm	r19, Z+
    423a:	65 91       	lpm	r22, Z+
    423c:	95 91       	lpm	r25, Z+
    423e:	05 90       	lpm	r0, Z+
    4240:	7f e2       	ldi	r23, 0x2F	; 47
    4242:	73 95       	inc	r23
    4244:	e1 18       	sub	r14, r1
    4246:	f1 0a       	sbc	r15, r17
    4248:	43 0b       	sbc	r20, r19
    424a:	56 0b       	sbc	r21, r22
    424c:	c9 0b       	sbc	r28, r25
    424e:	d0 09       	sbc	r29, r0
    4250:	c0 f7       	brcc	.-16     	; 0x4242 <__ftoa_engine+0x10a>
    4252:	e1 0c       	add	r14, r1
    4254:	f1 1e       	adc	r15, r17
    4256:	43 1f       	adc	r20, r19
    4258:	56 1f       	adc	r21, r22
    425a:	c9 1f       	adc	r28, r25
    425c:	d0 1d       	adc	r29, r0
    425e:	7e f4       	brtc	.+30     	; 0x427e <__ftoa_engine+0x146>
    4260:	70 33       	cpi	r23, 0x30	; 48
    4262:	11 f4       	brne	.+4      	; 0x4268 <__ftoa_engine+0x130>
    4264:	8a 95       	dec	r24
    4266:	e6 cf       	rjmp	.-52     	; 0x4234 <__ftoa_engine+0xfc>
    4268:	e8 94       	clt
    426a:	01 50       	subi	r16, 0x01	; 1
    426c:	30 f0       	brcs	.+12     	; 0x427a <__ftoa_engine+0x142>
    426e:	08 0f       	add	r16, r24
    4270:	0a f4       	brpl	.+2      	; 0x4274 <__ftoa_engine+0x13c>
    4272:	00 27       	eor	r16, r16
    4274:	02 17       	cp	r16, r18
    4276:	08 f4       	brcc	.+2      	; 0x427a <__ftoa_engine+0x142>
    4278:	20 2f       	mov	r18, r16
    427a:	23 95       	inc	r18
    427c:	02 2f       	mov	r16, r18
    427e:	7a 33       	cpi	r23, 0x3A	; 58
    4280:	28 f0       	brcs	.+10     	; 0x428c <__ftoa_engine+0x154>
    4282:	79 e3       	ldi	r23, 0x39	; 57
    4284:	7d 93       	st	X+, r23
    4286:	2a 95       	dec	r18
    4288:	e9 f7       	brne	.-6      	; 0x4284 <__ftoa_engine+0x14c>
    428a:	10 c0       	rjmp	.+32     	; 0x42ac <__ftoa_engine+0x174>
    428c:	7d 93       	st	X+, r23
    428e:	2a 95       	dec	r18
    4290:	89 f6       	brne	.-94     	; 0x4234 <__ftoa_engine+0xfc>
    4292:	06 94       	lsr	r0
    4294:	97 95       	ror	r25
    4296:	67 95       	ror	r22
    4298:	37 95       	ror	r19
    429a:	17 95       	ror	r17
    429c:	17 94       	ror	r1
    429e:	e1 18       	sub	r14, r1
    42a0:	f1 0a       	sbc	r15, r17
    42a2:	43 0b       	sbc	r20, r19
    42a4:	56 0b       	sbc	r21, r22
    42a6:	c9 0b       	sbc	r28, r25
    42a8:	d0 09       	sbc	r29, r0
    42aa:	98 f0       	brcs	.+38     	; 0x42d2 <__ftoa_engine+0x19a>
    42ac:	23 95       	inc	r18
    42ae:	7e 91       	ld	r23, -X
    42b0:	73 95       	inc	r23
    42b2:	7a 33       	cpi	r23, 0x3A	; 58
    42b4:	08 f0       	brcs	.+2      	; 0x42b8 <__ftoa_engine+0x180>
    42b6:	70 e3       	ldi	r23, 0x30	; 48
    42b8:	7c 93       	st	X, r23
    42ba:	20 13       	cpse	r18, r16
    42bc:	b8 f7       	brcc	.-18     	; 0x42ac <__ftoa_engine+0x174>
    42be:	7e 91       	ld	r23, -X
    42c0:	70 61       	ori	r23, 0x10	; 16
    42c2:	7d 93       	st	X+, r23
    42c4:	30 f0       	brcs	.+12     	; 0x42d2 <__ftoa_engine+0x19a>
    42c6:	83 95       	inc	r24
    42c8:	71 e3       	ldi	r23, 0x31	; 49
    42ca:	7d 93       	st	X+, r23
    42cc:	70 e3       	ldi	r23, 0x30	; 48
    42ce:	2a 95       	dec	r18
    42d0:	e1 f7       	brne	.-8      	; 0x42ca <__ftoa_engine+0x192>
    42d2:	11 24       	eor	r1, r1
    42d4:	ef 90       	pop	r14
    42d6:	ff 90       	pop	r15
    42d8:	0f 91       	pop	r16
    42da:	1f 91       	pop	r17
    42dc:	cf 91       	pop	r28
    42de:	df 91       	pop	r29
    42e0:	99 27       	eor	r25, r25
    42e2:	87 fd       	sbrc	r24, 7
    42e4:	90 95       	com	r25
    42e6:	08 95       	ret

000042e8 <strnlen_P>:
    42e8:	fc 01       	movw	r30, r24
    42ea:	05 90       	lpm	r0, Z+
    42ec:	61 50       	subi	r22, 0x01	; 1
    42ee:	70 40       	sbci	r23, 0x00	; 0
    42f0:	01 10       	cpse	r0, r1
    42f2:	d8 f7       	brcc	.-10     	; 0x42ea <strnlen_P+0x2>
    42f4:	80 95       	com	r24
    42f6:	90 95       	com	r25
    42f8:	8e 0f       	add	r24, r30
    42fa:	9f 1f       	adc	r25, r31
    42fc:	08 95       	ret

000042fe <strcpy>:
    42fe:	fb 01       	movw	r30, r22
    4300:	dc 01       	movw	r26, r24
    4302:	01 90       	ld	r0, Z+
    4304:	0d 92       	st	X+, r0
    4306:	00 20       	and	r0, r0
    4308:	e1 f7       	brne	.-8      	; 0x4302 <strcpy+0x4>
    430a:	08 95       	ret

0000430c <strnlen>:
    430c:	fc 01       	movw	r30, r24
    430e:	61 50       	subi	r22, 0x01	; 1
    4310:	70 40       	sbci	r23, 0x00	; 0
    4312:	01 90       	ld	r0, Z+
    4314:	01 10       	cpse	r0, r1
    4316:	d8 f7       	brcc	.-10     	; 0x430e <strnlen+0x2>
    4318:	80 95       	com	r24
    431a:	90 95       	com	r25
    431c:	8e 0f       	add	r24, r30
    431e:	9f 1f       	adc	r25, r31
    4320:	08 95       	ret

00004322 <itoa>:
    4322:	45 32       	cpi	r20, 0x25	; 37
    4324:	51 05       	cpc	r21, r1
    4326:	18 f4       	brcc	.+6      	; 0x432e <itoa+0xc>
    4328:	42 30       	cpi	r20, 0x02	; 2
    432a:	08 f0       	brcs	.+2      	; 0x432e <itoa+0xc>
    432c:	04 c0       	rjmp	.+8      	; 0x4336 <__itoa_ncheck>
    432e:	fb 01       	movw	r30, r22
    4330:	10 82       	st	Z, r1
    4332:	cb 01       	movw	r24, r22
    4334:	08 95       	ret

00004336 <__itoa_ncheck>:
    4336:	bb 27       	eor	r27, r27
    4338:	4a 30       	cpi	r20, 0x0A	; 10
    433a:	31 f4       	brne	.+12     	; 0x4348 <__itoa_ncheck+0x12>
    433c:	99 23       	and	r25, r25
    433e:	22 f4       	brpl	.+8      	; 0x4348 <__itoa_ncheck+0x12>
    4340:	bd e2       	ldi	r27, 0x2D	; 45
    4342:	90 95       	com	r25
    4344:	81 95       	neg	r24
    4346:	9f 4f       	sbci	r25, 0xFF	; 255
    4348:	01 c0       	rjmp	.+2      	; 0x434c <__utoa_common>

0000434a <__utoa_ncheck>:
    434a:	bb 27       	eor	r27, r27

0000434c <__utoa_common>:
    434c:	fb 01       	movw	r30, r22
    434e:	55 27       	eor	r21, r21
    4350:	aa 27       	eor	r26, r26
    4352:	88 0f       	add	r24, r24
    4354:	99 1f       	adc	r25, r25
    4356:	aa 1f       	adc	r26, r26
    4358:	a4 17       	cp	r26, r20
    435a:	10 f0       	brcs	.+4      	; 0x4360 <__utoa_common+0x14>
    435c:	a4 1b       	sub	r26, r20
    435e:	83 95       	inc	r24
    4360:	50 51       	subi	r21, 0x10	; 16
    4362:	b9 f7       	brne	.-18     	; 0x4352 <__utoa_common+0x6>
    4364:	a0 5d       	subi	r26, 0xD0	; 208
    4366:	aa 33       	cpi	r26, 0x3A	; 58
    4368:	08 f0       	brcs	.+2      	; 0x436c <__utoa_common+0x20>
    436a:	a9 5d       	subi	r26, 0xD9	; 217
    436c:	a1 93       	st	Z+, r26
    436e:	00 97       	sbiw	r24, 0x00	; 0
    4370:	79 f7       	brne	.-34     	; 0x4350 <__utoa_common+0x4>
    4372:	b1 11       	cpse	r27, r1
    4374:	b1 93       	st	Z+, r27
    4376:	11 92       	st	Z+, r1
    4378:	cb 01       	movw	r24, r22
    437a:	e2 c0       	rjmp	.+452    	; 0x4540 <strrev>

0000437c <fputc>:
    437c:	0f 93       	push	r16
    437e:	1f 93       	push	r17
    4380:	cf 93       	push	r28
    4382:	df 93       	push	r29
    4384:	fb 01       	movw	r30, r22
    4386:	23 81       	ldd	r18, Z+3	; 0x03
    4388:	21 fd       	sbrc	r18, 1
    438a:	03 c0       	rjmp	.+6      	; 0x4392 <fputc+0x16>
    438c:	8f ef       	ldi	r24, 0xFF	; 255
    438e:	9f ef       	ldi	r25, 0xFF	; 255
    4390:	2c c0       	rjmp	.+88     	; 0x43ea <fputc+0x6e>
    4392:	22 ff       	sbrs	r18, 2
    4394:	16 c0       	rjmp	.+44     	; 0x43c2 <fputc+0x46>
    4396:	46 81       	ldd	r20, Z+6	; 0x06
    4398:	57 81       	ldd	r21, Z+7	; 0x07
    439a:	24 81       	ldd	r18, Z+4	; 0x04
    439c:	35 81       	ldd	r19, Z+5	; 0x05
    439e:	42 17       	cp	r20, r18
    43a0:	53 07       	cpc	r21, r19
    43a2:	44 f4       	brge	.+16     	; 0x43b4 <fputc+0x38>
    43a4:	a0 81       	ld	r26, Z
    43a6:	b1 81       	ldd	r27, Z+1	; 0x01
    43a8:	9d 01       	movw	r18, r26
    43aa:	2f 5f       	subi	r18, 0xFF	; 255
    43ac:	3f 4f       	sbci	r19, 0xFF	; 255
    43ae:	31 83       	std	Z+1, r19	; 0x01
    43b0:	20 83       	st	Z, r18
    43b2:	8c 93       	st	X, r24
    43b4:	26 81       	ldd	r18, Z+6	; 0x06
    43b6:	37 81       	ldd	r19, Z+7	; 0x07
    43b8:	2f 5f       	subi	r18, 0xFF	; 255
    43ba:	3f 4f       	sbci	r19, 0xFF	; 255
    43bc:	37 83       	std	Z+7, r19	; 0x07
    43be:	26 83       	std	Z+6, r18	; 0x06
    43c0:	14 c0       	rjmp	.+40     	; 0x43ea <fputc+0x6e>
    43c2:	8b 01       	movw	r16, r22
    43c4:	ec 01       	movw	r28, r24
    43c6:	fb 01       	movw	r30, r22
    43c8:	00 84       	ldd	r0, Z+8	; 0x08
    43ca:	f1 85       	ldd	r31, Z+9	; 0x09
    43cc:	e0 2d       	mov	r30, r0
    43ce:	19 95       	eicall
    43d0:	89 2b       	or	r24, r25
    43d2:	e1 f6       	brne	.-72     	; 0x438c <fputc+0x10>
    43d4:	d8 01       	movw	r26, r16
    43d6:	16 96       	adiw	r26, 0x06	; 6
    43d8:	8d 91       	ld	r24, X+
    43da:	9c 91       	ld	r25, X
    43dc:	17 97       	sbiw	r26, 0x07	; 7
    43de:	01 96       	adiw	r24, 0x01	; 1
    43e0:	17 96       	adiw	r26, 0x07	; 7
    43e2:	9c 93       	st	X, r25
    43e4:	8e 93       	st	-X, r24
    43e6:	16 97       	sbiw	r26, 0x06	; 6
    43e8:	ce 01       	movw	r24, r28
    43ea:	df 91       	pop	r29
    43ec:	cf 91       	pop	r28
    43ee:	1f 91       	pop	r17
    43f0:	0f 91       	pop	r16
    43f2:	08 95       	ret

000043f4 <printf>:
    43f4:	cf 93       	push	r28
    43f6:	df 93       	push	r29
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
    43fc:	ae 01       	movw	r20, r28
    43fe:	4a 5f       	subi	r20, 0xFA	; 250
    4400:	5f 4f       	sbci	r21, 0xFF	; 255
    4402:	fa 01       	movw	r30, r20
    4404:	61 91       	ld	r22, Z+
    4406:	71 91       	ld	r23, Z+
    4408:	af 01       	movw	r20, r30
    440a:	80 91 d4 0d 	lds	r24, 0x0DD4	; 0x800dd4 <__iob+0x2>
    440e:	90 91 d5 0d 	lds	r25, 0x0DD5	; 0x800dd5 <__iob+0x3>
    4412:	8d da       	rcall	.-2790   	; 0x392e <vfprintf>
    4414:	df 91       	pop	r29
    4416:	cf 91       	pop	r28
    4418:	08 95       	ret

0000441a <putchar>:
    441a:	60 91 d4 0d 	lds	r22, 0x0DD4	; 0x800dd4 <__iob+0x2>
    441e:	70 91 d5 0d 	lds	r23, 0x0DD5	; 0x800dd5 <__iob+0x3>
    4422:	ac cf       	rjmp	.-168    	; 0x437c <fputc>

00004424 <puts>:
    4424:	0f 93       	push	r16
    4426:	1f 93       	push	r17
    4428:	cf 93       	push	r28
    442a:	df 93       	push	r29
    442c:	e0 91 d4 0d 	lds	r30, 0x0DD4	; 0x800dd4 <__iob+0x2>
    4430:	f0 91 d5 0d 	lds	r31, 0x0DD5	; 0x800dd5 <__iob+0x3>
    4434:	23 81       	ldd	r18, Z+3	; 0x03
    4436:	21 ff       	sbrs	r18, 1
    4438:	1b c0       	rjmp	.+54     	; 0x4470 <puts+0x4c>
    443a:	8c 01       	movw	r16, r24
    443c:	d0 e0       	ldi	r29, 0x00	; 0
    443e:	c0 e0       	ldi	r28, 0x00	; 0
    4440:	f8 01       	movw	r30, r16
    4442:	81 91       	ld	r24, Z+
    4444:	8f 01       	movw	r16, r30
    4446:	60 91 d4 0d 	lds	r22, 0x0DD4	; 0x800dd4 <__iob+0x2>
    444a:	70 91 d5 0d 	lds	r23, 0x0DD5	; 0x800dd5 <__iob+0x3>
    444e:	db 01       	movw	r26, r22
    4450:	18 96       	adiw	r26, 0x08	; 8
    4452:	ed 91       	ld	r30, X+
    4454:	fc 91       	ld	r31, X
    4456:	19 97       	sbiw	r26, 0x09	; 9
    4458:	88 23       	and	r24, r24
    445a:	31 f0       	breq	.+12     	; 0x4468 <puts+0x44>
    445c:	19 95       	eicall
    445e:	89 2b       	or	r24, r25
    4460:	79 f3       	breq	.-34     	; 0x4440 <puts+0x1c>
    4462:	df ef       	ldi	r29, 0xFF	; 255
    4464:	cf ef       	ldi	r28, 0xFF	; 255
    4466:	ec cf       	rjmp	.-40     	; 0x4440 <puts+0x1c>
    4468:	8a e0       	ldi	r24, 0x0A	; 10
    446a:	19 95       	eicall
    446c:	89 2b       	or	r24, r25
    446e:	19 f0       	breq	.+6      	; 0x4476 <puts+0x52>
    4470:	8f ef       	ldi	r24, 0xFF	; 255
    4472:	9f ef       	ldi	r25, 0xFF	; 255
    4474:	02 c0       	rjmp	.+4      	; 0x447a <puts+0x56>
    4476:	8d 2f       	mov	r24, r29
    4478:	9c 2f       	mov	r25, r28
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	1f 91       	pop	r17
    4480:	0f 91       	pop	r16
    4482:	08 95       	ret

00004484 <__ultoa_invert>:
    4484:	fa 01       	movw	r30, r20
    4486:	aa 27       	eor	r26, r26
    4488:	28 30       	cpi	r18, 0x08	; 8
    448a:	51 f1       	breq	.+84     	; 0x44e0 <__ultoa_invert+0x5c>
    448c:	20 31       	cpi	r18, 0x10	; 16
    448e:	81 f1       	breq	.+96     	; 0x44f0 <__ultoa_invert+0x6c>
    4490:	e8 94       	clt
    4492:	6f 93       	push	r22
    4494:	6e 7f       	andi	r22, 0xFE	; 254
    4496:	6e 5f       	subi	r22, 0xFE	; 254
    4498:	7f 4f       	sbci	r23, 0xFF	; 255
    449a:	8f 4f       	sbci	r24, 0xFF	; 255
    449c:	9f 4f       	sbci	r25, 0xFF	; 255
    449e:	af 4f       	sbci	r26, 0xFF	; 255
    44a0:	b1 e0       	ldi	r27, 0x01	; 1
    44a2:	3e d0       	rcall	.+124    	; 0x4520 <__ultoa_invert+0x9c>
    44a4:	b4 e0       	ldi	r27, 0x04	; 4
    44a6:	3c d0       	rcall	.+120    	; 0x4520 <__ultoa_invert+0x9c>
    44a8:	67 0f       	add	r22, r23
    44aa:	78 1f       	adc	r23, r24
    44ac:	89 1f       	adc	r24, r25
    44ae:	9a 1f       	adc	r25, r26
    44b0:	a1 1d       	adc	r26, r1
    44b2:	68 0f       	add	r22, r24
    44b4:	79 1f       	adc	r23, r25
    44b6:	8a 1f       	adc	r24, r26
    44b8:	91 1d       	adc	r25, r1
    44ba:	a1 1d       	adc	r26, r1
    44bc:	6a 0f       	add	r22, r26
    44be:	71 1d       	adc	r23, r1
    44c0:	81 1d       	adc	r24, r1
    44c2:	91 1d       	adc	r25, r1
    44c4:	a1 1d       	adc	r26, r1
    44c6:	20 d0       	rcall	.+64     	; 0x4508 <__ultoa_invert+0x84>
    44c8:	09 f4       	brne	.+2      	; 0x44cc <__ultoa_invert+0x48>
    44ca:	68 94       	set
    44cc:	3f 91       	pop	r19
    44ce:	2a e0       	ldi	r18, 0x0A	; 10
    44d0:	26 9f       	mul	r18, r22
    44d2:	11 24       	eor	r1, r1
    44d4:	30 19       	sub	r19, r0
    44d6:	30 5d       	subi	r19, 0xD0	; 208
    44d8:	31 93       	st	Z+, r19
    44da:	de f6       	brtc	.-74     	; 0x4492 <__ultoa_invert+0xe>
    44dc:	cf 01       	movw	r24, r30
    44de:	08 95       	ret
    44e0:	46 2f       	mov	r20, r22
    44e2:	47 70       	andi	r20, 0x07	; 7
    44e4:	40 5d       	subi	r20, 0xD0	; 208
    44e6:	41 93       	st	Z+, r20
    44e8:	b3 e0       	ldi	r27, 0x03	; 3
    44ea:	0f d0       	rcall	.+30     	; 0x450a <__ultoa_invert+0x86>
    44ec:	c9 f7       	brne	.-14     	; 0x44e0 <__ultoa_invert+0x5c>
    44ee:	f6 cf       	rjmp	.-20     	; 0x44dc <__ultoa_invert+0x58>
    44f0:	46 2f       	mov	r20, r22
    44f2:	4f 70       	andi	r20, 0x0F	; 15
    44f4:	40 5d       	subi	r20, 0xD0	; 208
    44f6:	4a 33       	cpi	r20, 0x3A	; 58
    44f8:	18 f0       	brcs	.+6      	; 0x4500 <__ultoa_invert+0x7c>
    44fa:	49 5d       	subi	r20, 0xD9	; 217
    44fc:	31 fd       	sbrc	r19, 1
    44fe:	40 52       	subi	r20, 0x20	; 32
    4500:	41 93       	st	Z+, r20
    4502:	02 d0       	rcall	.+4      	; 0x4508 <__ultoa_invert+0x84>
    4504:	a9 f7       	brne	.-22     	; 0x44f0 <__ultoa_invert+0x6c>
    4506:	ea cf       	rjmp	.-44     	; 0x44dc <__ultoa_invert+0x58>
    4508:	b4 e0       	ldi	r27, 0x04	; 4
    450a:	a6 95       	lsr	r26
    450c:	97 95       	ror	r25
    450e:	87 95       	ror	r24
    4510:	77 95       	ror	r23
    4512:	67 95       	ror	r22
    4514:	ba 95       	dec	r27
    4516:	c9 f7       	brne	.-14     	; 0x450a <__ultoa_invert+0x86>
    4518:	00 97       	sbiw	r24, 0x00	; 0
    451a:	61 05       	cpc	r22, r1
    451c:	71 05       	cpc	r23, r1
    451e:	08 95       	ret
    4520:	9b 01       	movw	r18, r22
    4522:	ac 01       	movw	r20, r24
    4524:	0a 2e       	mov	r0, r26
    4526:	06 94       	lsr	r0
    4528:	57 95       	ror	r21
    452a:	47 95       	ror	r20
    452c:	37 95       	ror	r19
    452e:	27 95       	ror	r18
    4530:	ba 95       	dec	r27
    4532:	c9 f7       	brne	.-14     	; 0x4526 <__ultoa_invert+0xa2>
    4534:	62 0f       	add	r22, r18
    4536:	73 1f       	adc	r23, r19
    4538:	84 1f       	adc	r24, r20
    453a:	95 1f       	adc	r25, r21
    453c:	a0 1d       	adc	r26, r0
    453e:	08 95       	ret

00004540 <strrev>:
    4540:	dc 01       	movw	r26, r24
    4542:	fc 01       	movw	r30, r24
    4544:	67 2f       	mov	r22, r23
    4546:	71 91       	ld	r23, Z+
    4548:	77 23       	and	r23, r23
    454a:	e1 f7       	brne	.-8      	; 0x4544 <strrev+0x4>
    454c:	32 97       	sbiw	r30, 0x02	; 2
    454e:	04 c0       	rjmp	.+8      	; 0x4558 <strrev+0x18>
    4550:	7c 91       	ld	r23, X
    4552:	6d 93       	st	X+, r22
    4554:	70 83       	st	Z, r23
    4556:	62 91       	ld	r22, -Z
    4558:	ae 17       	cp	r26, r30
    455a:	bf 07       	cpc	r27, r31
    455c:	c8 f3       	brcs	.-14     	; 0x4550 <strrev+0x10>
    455e:	08 95       	ret

00004560 <_exit>:
    4560:	f8 94       	cli

00004562 <__stop_program>:
    4562:	ff cf       	rjmp	.-2      	; 0x4562 <__stop_program>
